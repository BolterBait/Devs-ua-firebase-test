{"mappings":"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","sources":["src/js/firebase.js","node_modules/@firebase/installations/src/functions/common.ts","node_modules/@firebase/installations/src/functions/create-installation-request.ts","node_modules/@firebase/installations/src/helpers/buffer-to-base64-url-safe.ts","node_modules/@firebase/installations/src/helpers/generate-fid.ts","node_modules/@firebase/installations/src/util/sleep.ts","node_modules/@firebase/installations/src/helpers/fid-changed.ts","node_modules/@firebase/installations/src/helpers/idb-manager.ts","node_modules/@firebase/installations/src/helpers/get-installation-entry.ts","node_modules/@firebase/installations/src/functions/generate-auth-token-request.ts","node_modules/@firebase/installations/src/helpers/refresh-auth-token.ts","node_modules/@firebase/installations/src/api/get-id.ts","node_modules/@firebase/installations/src/api/get-token.ts","node_modules/@firebase/installations/src/util/get-key.ts","node_modules/@firebase/installations/src/util/errors.ts","node_modules/@firebase/installations/src/functions/delete-installation-request.ts","node_modules/@firebase/installations/src/api/delete-installations.ts","node_modules/@firebase/installations/src/api/on-id-change.ts","node_modules/@firebase/installations/src/api/get-installations.ts","node_modules/@firebase/installations/src/helpers/extract-app-config.ts","node_modules/@firebase/installations/src/functions/config.ts","node_modules/@firebase/installations/src/index.ts","node_modules/@firebase/analytics/src/helpers.ts","node_modules/@firebase/analytics/src/get-config.ts","node_modules/@firebase/analytics/src/errors.ts","node_modules/@firebase/analytics/src/functions.ts","node_modules/@firebase/analytics/src/initialize-analytics.ts","node_modules/@firebase/analytics/src/factory.ts","node_modules/@firebase/analytics/src/api.ts","node_modules/@firebase/firestore/dist/lite/index.browser.esm2017.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport {\n  getFirestore, collection, getDocs, addDoc, doc, setDoc,\n} from 'firebase/firestore/lite'\nimport { refs } from './refs';\nimport { filmArray } from './modal-filmoteka';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBMQEt78CaPaq3dSOfApmBG4vPslBGp6pQ\",\n  authDomain: \"filmoteka-5bf07.firebaseapp.com\",\n  projectId: \"filmoteka-5bf07\",\n  storageBucket: \"filmoteka-5bf07.appspot.com\",\n  messagingSenderId: \"626342412224\",\n  appId: \"1:626342412224:web:b02b966cc92ff4eefbd225\",\n  measurementId: \"G-X5BM5EZZVP\"\n};\n\n// Ініціалізуємо бібліотеку \n\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\n\n//  Ініціалізуємо сервіс\nconst db = getFirestore(app)\n\n  // Посилання на колекцію\n  const colWatchedRef = collection(db, 'watched');\n  const colQueueRef = collection(db, 'queue');\n\n  // Отримуємо колекції\n  getDocs(colQueueRef)\n  .then((snapshot) => {\n    let queue = [];\n    snapshot.docs.forEach((doc) => {\n    queue.push({...doc.data(), id: doc.id})\n    })    \n    console.log(queue)})\n    .catch(err => {console.log(err.message)});\n  \n\n  getDocs(colWatchedRef)\n  .then((snapshot) => {\n    let watched = [];\n    snapshot.docs.forEach((doc) => {\n      watched.push({...doc.data(), id: doc.id})\n    })\n    console.log(watched)})\n    .catch(err => {console.log(err.message)});\n\n// Додовання в колекцію з автоID\nconst addWatchedFilm = document.querySelector('.modal-film-wrap');\naddWatchedFilm.addEventListener('click', (e) => {\n  e.preventDefault()\nconsole.log(e.target.id);\n\n  addDoc(colWatchedRef, {\n    id: e.target.id,\n    poster_path: filmArray.poster_path,\n    original_title: filmArray.original_title,\n    genres: filmArray.genres,\n    release_date: `${new Date(filmArray.release_date).getFullYear()}`,\n  }).then(() => {\n    // refs.watchedHederBtnEl.classList.add('active');\n    // refs.watchedHederBtnEl.textContent = 'Remove';\n    })\n})\n\n\n//     Add a new document in collection \"watched\"\n// setDoc(doc(db, \"watched\", \"77777\"), {\n//   original_title: \"Los Angeles\",\n//   adult: false,\n//   overview: \"A young girl is kidnapped during a powerful storm. Her mother joins forces with her mysterious neighbour to set off in pursuit of the kidnapper. Their journey will test their limits and expose the dark secrets\"\n// });\n\n  // setDoc(doc(db, 'watched', 'new-film-id'),addWatchedFilm.title.value );  \n\n  // async function getBooks(db) {\n  //   const booksCol = collection(db, 'books');\n  //   const booksSnapshot = await getDocs(booksCol);\n  //   const booksList = booksSnapshot.docs.map(doc => doc.data());\n  //   console.log(booksList);\n  //   return booksList;\n  // }\n\n// Додовання в колекцію з автоID\n// const addWatchedFilm = document.querySelector('.modal-film-wrap');\n// addWatchedFilm.addEventListener('click', (e) => {\n//   e.preventDefault()\n//   addDoc(collection, {\n//     id: addWatchedFilm.title.value,\n//     adult: addWatchedFilm.author.value,\n//   }).then(() => {\n//     addWatchedFilm.reset()\n//   })\n// })\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { AppConfig } from '../interfaces/installation-impl';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\n\nexport async function createInstallationRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || (self as unknown as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getKey } from '../util/get-key';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { IdChangeCallbackFn } from '../api';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void {\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key: string, fid: string): void {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({ key, fid });\n  }\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DBSchema, IDBPDatabase, openDB } from 'idb';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { InstallationEntry } from '../interfaces/installation-entry';\nimport { getKey } from '../util/get-key';\nimport { fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\ninterface InstallationsDB extends DBSchema {\n  'firebase-installations-store': {\n    key: string;\n    value: InstallationEntry | undefined;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<InstallationsDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<InstallationsDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key) as Promise<InstallationEntry>;\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = (await objectStore.get(key)) as InstallationEntry;\n  await objectStore.put(value, key);\n  await tx.done;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = (await store.get(\n    key\n  )) as InstallationEntry;\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n  await tx.done;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> {\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.done;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallationRequest } from '../functions/create-installation-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  installations: FirebaseInstallationsImpl\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(installations.appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      installations,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      installations,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(\n      installations,\n      installationEntry\n    );\n    return set(installations.appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(installations.appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(\n    installations.appConfig\n  );\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(installations.appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    const { installationEntry, registrationPromise } =\n      await getInstallationEntry(installations);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n    }\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport {\n  FirebaseInstallationsImpl,\n  AppConfig\n} from '../interfaces/installation-impl';\n\nexport async function generateAuthTokenRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION,\n      appId: appConfig.appId\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken =\n      extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthTokenRequest } from '../functions/generate-auth-token-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh = false\n): Promise<CompletedAuthToken> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(installations.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(installations.appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return {\n        ...oldEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthTokenRequest(\n      installations,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(installations.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Creates a Firebase Installation if there isn't one for the app and\n * returns the Installation ID.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function getId(installations: Installations): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    installationsImpl\n  );\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns a Firebase Installations auth token, identifying the current\n * Firebase Installation.\n * @param installations - The `Installations` instance.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getToken(\n  installations: Installations,\n  forceRefresh = false\n): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  await completeInstallationRegistration(installationsImpl);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<void> {\n  const { registrationPromise } = await getInstallationEntry(installations);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.REQUEST_FAILED]: {\n    requestName: string;\n    [index: string]: string | number; // to make Typescript 3.8 happy\n  } & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData {\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & { customData: ServerErrorData };\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError {\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { RegisteredInstallationEntry } from '../interfaces/installation-entry';\nimport {\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function deleteInstallationRequest(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<void> {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request: RequestInit = {\n    method: 'DELETE',\n    headers\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteInstallationRequest } from '../functions/delete-installation-request';\nimport { remove, update } from '../helpers/idb-manager';\nimport { RequestStatus } from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Deletes the Firebase Installation and all associated data.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function deleteInstallations(\n  installations: Installations\n): Promise<void> {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(ErrorCode.DELETE_PENDING_REGISTRATION);\n    } else if (entry.registrationStatus === RequestStatus.COMPLETED) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { addCallback, removeCallback } from '../helpers/fid-changed';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * An user defined callback function that gets called when Installations ID changes.\n *\n * @public\n */\nexport type IdChangeCallbackFn = (installationId: string) => void;\n/**\n * Unsubscribe a callback function previously added via {@link IdChangeCallbackFn}.\n *\n * @public\n */\nexport type IdChangeUnsubscribeFn = () => void;\n\n/**\n * Sets a new callback that will get called when Installation ID changes.\n * Returns an unsubscribe function that will remove the callback when called.\n * @param installations - The `Installations` instance.\n * @param callback - The callback function that is invoked when FID changes.\n * @returns A function that can be called to unsubscribe.\n *\n * @public\n */\nexport function onIdChange(\n  installations: Installations,\n  callback: IdChangeCallbackFn\n): IdChangeUnsubscribeFn {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  addCallback(appConfig, callback);\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns an instance of {@link Installations} associated with the given\n * {@link @firebase/app#FirebaseApp} instance.\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\n *\n * @public\n */\nexport function getInstallations(app: FirebaseApp = getApp()): Installations {\n  const installationsImpl = _getProvider(app, 'installations').getImmediate();\n  return installationsImpl;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, _getProvider } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstanceFactory,\n  ComponentContainer\n} from '@firebase/component';\nimport { getId, getToken } from '../api/index';\nimport { _FirebaseInstallationsInternal } from '../interfaces/public-types';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { extractAppConfig } from '../helpers/extract-app-config';\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory: InstanceFactory<'installations'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Throws if app isn't configured properly.\n  const appConfig = extractAppConfig(app);\n  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n\n  const installationsImpl: FirebaseInstallationsImpl = {\n    app,\n    appConfig,\n    heartbeatServiceProvider,\n    _delete: () => Promise.resolve()\n  };\n  return installationsImpl;\n};\n\nconst internalFactory: InstanceFactory<'installations-internal'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Internal FIS instance relies on public FIS instance.\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal: _FirebaseInstallationsInternal = {\n    getId: () => getId(installations),\n    getToken: (forceRefresh?: boolean) => getToken(installations, forceRefresh)\n  };\n  return installationsInternal;\n};\n\nexport function registerInstallations(): void {\n  _registerComponent(\n    new Component(INSTALLATIONS_NAME, publicFactory, ComponentType.PUBLIC)\n  );\n  _registerComponent(\n    new Component(\n      INSTALLATIONS_NAME_INTERNAL,\n      internalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n}\n","/**\n * Firebase Installations\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerInstallations } from './functions/config';\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nexport * from './api';\nexport * from './interfaces/public-types';\n\nregisterInstallations();\nregisterVersion(name, version);\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\nregisterVersion(name, version, '__BUILD_TARGET__');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CustomParams,\n  ControlParams,\n  EventParams,\n  ConsentSettings\n} from './public-types';\nimport { DynamicConfig, DataLayer, Gtag, MinimalDynamicConfig } from './types';\nimport { GtagCommand, GTAG_URL } from './constants';\nimport { logger } from './logger';\n\n// Possible parameter types for gtag 'event' and 'config' commands\ntype GtagConfigOrEventParams = ControlParams & EventParams & CustomParams;\n\n/**\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\n * have either resolved or rejected.\n *\n * @param promises Array of promises to wait for.\n */\nexport function promiseAllSettled<T>(\n  promises: Array<Promise<T>>\n): Promise<T[]> {\n  return Promise.all(promises.map(promise => promise.catch(e => e)));\n}\n\n/**\n * Inserts gtag script tag into the page to asynchronously download gtag.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function insertScriptTag(\n  dataLayerName: string,\n  measurementId: string\n): void {\n  const script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n  script.src = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/**\n * Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName] as DataLayer;\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'config' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param measurementId GA Measurement ID to set config for.\n * @param gtagParams Gtag config params to set.\n */\nasync function gtagOnConfig(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId as string];\n  try {\n    if (correspondingAppId) {\n      await initializationPromisesMap[correspondingAppId];\n    } else {\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      const foundConfig = dynamicConfigResults.find(\n        config => config.measurementId === measurementId\n      );\n      if (foundConfig) {\n        await initializationPromisesMap[foundConfig.appId];\n      }\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n  gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'event' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementId GA Measurement ID to log event to.\n * @param gtagParams Params to log with this event.\n */\nasync function gtagOnEvent(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  try {\n    let initializationPromisesToWaitFor: Array<Promise<string>> = [];\n\n    // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n    if (gtagParams && gtagParams['send_to']) {\n      let gaSendToList: string | string[] = gtagParams['send_to'];\n      // Make it an array if is isn't, so it can be dealt with the same way.\n      if (!Array.isArray(gaSendToList)) {\n        gaSendToList = [gaSendToList];\n      }\n      // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      for (const sendToId of gaSendToList) {\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(\n          config => config.measurementId === sendToId\n        );\n        const initializationPromise =\n          foundConfig && initializationPromisesMap[foundConfig.appId];\n        if (initializationPromise) {\n          initializationPromisesToWaitFor.push(initializationPromise);\n        } else {\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n        }\n      }\n    }\n\n    // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n    if (initializationPromisesToWaitFor.length === 0) {\n      initializationPromisesToWaitFor = Object.values(\n        initializationPromisesMap\n      );\n    }\n\n    // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n    await Promise.all(initializationPromisesToWaitFor);\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\n    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n  } catch (e) {\n    logger.error(e);\n  }\n}\n\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  /**\n   * Allows wrapped gtag calls to wait on whichever intialization promises are required,\n   * depending on the contents of the gtag params' `send_to` field, if any.\n   */\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  /**\n   * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\n   * before determining what initialization promises (which include FIDs) to wait for.\n   */\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  /**\n   * Wrapped gtag config calls can narrow down which initialization promise (with FID)\n   * to wait for if the measurementId is already fetched, by getting the corresponding appId,\n   * which is the key for the initialization promises map.\n   */\n  measurementIdToAppId: { [measurementId: string]: string }\n): Gtag {\n  /**\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\n   * @param command Gtag command type.\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\n   * @param gtagParams Params if event is EVENT/CONFIG.\n   */\n  async function gtagWrapper(\n    command: 'config' | 'set' | 'event' | 'consent',\n    idOrNameOrParams: string | ControlParams,\n    gtagParams?: GtagConfigOrEventParams | ConsentSettings\n  ): Promise<void> {\n    try {\n      // If event, check that relevant initialization promises have completed.\n      if (command === GtagCommand.EVENT) {\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          idOrNameOrParams as string,\n          gtagParams as GtagConfigOrEventParams\n        );\n      } else if (command === GtagCommand.CONFIG) {\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementIdToAppId,\n          idOrNameOrParams as string,\n          gtagParams as GtagConfigOrEventParams\n        );\n      } else if (command === GtagCommand.CONSENT) {\n        // If CONFIG, second arg must be measurementId.\n        gtagCore(GtagCommand.CONSENT, 'update', gtagParams as ConsentSettings);\n      } else {\n        // If SET, second arg must be params.\n        gtagCore(GtagCommand.SET, idOrNameOrParams as CustomParams);\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n  return gtagWrapper as Gtag;\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\n */\nexport function wrapOrCreateGtag(\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  dataLayerName: string,\n  gtagFunctionName: string\n): {\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} {\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function (..._args: unknown[]) {\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n  };\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(\n    gtagCore,\n    initializationPromisesMap,\n    dynamicConfigPromisesList,\n    measurementIdToAppId\n  );\n\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n  };\n}\n\n/**\n * Returns first script tag in DOM matching our gtag url pattern.\n */\nexport function findGtagScriptOnPage(): HTMLScriptElement | null {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Most logic is copied from packages/remote-config/src/client/retrying_client.ts\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { DynamicConfig, ThrottleMetadata, MinimalDynamicConfig } from './types';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { DYNAMIC_CONFIG_URL, FETCH_TIMEOUT_MILLIS } from './constants';\nimport { logger } from './logger';\n\n// App config fields needed by analytics.\nexport interface AppFields {\n  appId: string;\n  apiKey: string;\n  measurementId?: string;\n}\n\n/**\n * Backoff factor for 503 errors, which we want to be conservative about\n * to avoid overloading servers. Each retry interval will be\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\n * will be ~30 seconds (with fuzzing).\n */\nexport const LONG_RETRY_FACTOR = 30;\n\n/**\n * Base wait interval to multiplied by backoffFactor^backoffCount.\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n\n/**\n * Stubbable retry data storage class.\n */\nclass RetryData {\n  constructor(\n    public throttleMetadata: { [appId: string]: ThrottleMetadata } = {},\n    public intervalMillis: number = BASE_INTERVAL_MILLIS\n  ) {}\n\n  getThrottleMetadata(appId: string): ThrottleMetadata {\n    return this.throttleMetadata[appId];\n  }\n\n  setThrottleMetadata(appId: string, metadata: ThrottleMetadata): void {\n    this.throttleMetadata[appId] = metadata;\n  }\n\n  deleteThrottleMetadata(appId: string): void {\n    delete this.throttleMetadata[appId];\n  }\n}\n\nconst defaultRetryData = new RetryData();\n\n/**\n * Set GET request headers.\n * @param apiKey App API key.\n */\nfunction getHeaders(apiKey: string): Headers {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\n/**\n * Fetches dynamic config from backend.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfig(\n  appFields: AppFields\n): Promise<DynamicConfig> {\n  const { appId, apiKey } = appFields;\n  const request: RequestInit = {\n    method: 'GET',\n    headers: getHeaders(apiKey)\n  };\n  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n  const response = await fetch(appUrl, request);\n  if (response.status !== 200 && response.status !== 304) {\n    let errorMessage = '';\n    try {\n      // Try to get any error message text from server response.\n      const jsonResponse = (await response.json()) as {\n        error?: { message?: string };\n      };\n      if (jsonResponse.error?.message) {\n        errorMessage = jsonResponse.error.message;\n      }\n    } catch (_ignored) {}\n    throw ERROR_FACTORY.create(AnalyticsError.CONFIG_FETCH_FAILED, {\n      httpStatus: response.status,\n      responseMessage: errorMessage\n    });\n  }\n  return response.json();\n}\n\n/**\n * Fetches dynamic config from backend, retrying if failed.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfigWithRetry(\n  app: FirebaseApp,\n  // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\n  retryData: RetryData = defaultRetryData,\n  timeoutMillis?: number\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, apiKey, measurementId } = app.options;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n\n  if (!apiKey) {\n    if (measurementId) {\n      return {\n        measurementId,\n        appId\n      };\n    }\n    throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n  }\n\n  const throttleMetadata: ThrottleMetadata = retryData.getThrottleMetadata(\n    appId\n  ) || {\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n  };\n\n  const signal = new AnalyticsAbortSignal();\n\n  setTimeout(\n    async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      signal.abort();\n    },\n    timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS\n  );\n\n  return attemptFetchDynamicConfigWithRetry(\n    { appId, apiKey, measurementId },\n    throttleMetadata,\n    signal,\n    retryData\n  );\n}\n\n/**\n * Runs one retry attempt.\n * @param appFields Necessary app config fields.\n * @param throttleMetadata Ongoing metadata to determine throttling times.\n * @param signal Abort signal.\n */\nasync function attemptFetchDynamicConfigWithRetry(\n  appFields: AppFields,\n  { throttleEndTimeMillis, backoffCount }: ThrottleMetadata,\n  signal: AnalyticsAbortSignal,\n  retryData: RetryData = defaultRetryData // for testing\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, measurementId } = appFields;\n  // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n  try {\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n  } catch (e) {\n    if (measurementId) {\n      logger.warn(\n        `Timed out fetching this Firebase app's measurement ID from the server.` +\n          ` Falling back to the measurement ID ${measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config. [${\n            (e as Error)?.message\n          }]`\n      );\n      return { appId, measurementId };\n    }\n    throw e;\n  }\n\n  try {\n    const response = await fetchDynamicConfig(appFields);\n\n    // Note the SDK only clears throttle state if response is success or non-retriable.\n    retryData.deleteThrottleMetadata(appId);\n\n    return response;\n  } catch (e) {\n    const error = e as Error;\n    if (!isRetriableError(error)) {\n      retryData.deleteThrottleMetadata(appId);\n      if (measurementId) {\n        logger.warn(\n          `Failed to fetch this Firebase app's measurement ID from the server.` +\n            ` Falling back to the measurement ID ${measurementId}` +\n            ` provided in the \"measurementId\" field in the local Firebase config. [${error?.message}]`\n        );\n        return { appId, measurementId };\n      } else {\n        throw e;\n      }\n    }\n\n    const backoffMillis =\n      Number(error?.customData?.httpStatus) === 503\n        ? calculateBackoffMillis(\n            backoffCount,\n            retryData.intervalMillis,\n            LONG_RETRY_FACTOR\n          )\n        : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n\n    // Increments backoff state.\n    const throttleMetadata = {\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n    };\n\n    // Persists state.\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n\n    return attemptFetchDynamicConfigWithRetry(\n      appFields,\n      throttleMetadata,\n      signal,\n      retryData\n    );\n  }\n}\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(\n  signal: AnalyticsAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(AnalyticsError.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Shims a minimal AbortSignal (copied from Remote Config).\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class AnalyticsAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AnalyticsError {\n  ALREADY_EXISTS = 'already-exists',\n  ALREADY_INITIALIZED = 'already-initialized',\n  ALREADY_INITIALIZED_SETTINGS = 'already-initialized-settings',\n  INTEROP_COMPONENT_REG_FAILED = 'interop-component-reg-failed',\n  INVALID_ANALYTICS_CONTEXT = 'invalid-analytics-context',\n  INDEXEDDB_UNAVAILABLE = 'indexeddb-unavailable',\n  FETCH_THROTTLE = 'fetch-throttle',\n  CONFIG_FETCH_FAILED = 'config-fetch-failed',\n  NO_API_KEY = 'no-api-key',\n  NO_APP_ID = 'no-app-id'\n}\n\nconst ERRORS: ErrorMap<AnalyticsError> = {\n  [AnalyticsError.ALREADY_EXISTS]:\n    'A Firebase Analytics instance with the appId {$id} ' +\n    ' already exists. ' +\n    'Only one Firebase Analytics instance can be created for each appId.',\n  [AnalyticsError.ALREADY_INITIALIZED]:\n    'initializeAnalytics() cannot be called again with different options than those ' +\n    'it was initially called with. It can be called again with the same options to ' +\n    'return the existing instance, or getAnalytics() can be used ' +\n    'to get a reference to the already-intialized instance.',\n  [AnalyticsError.ALREADY_INITIALIZED_SETTINGS]:\n    'Firebase Analytics has already been initialized.' +\n    'settings() must be called before initializing any Analytics instance' +\n    'or it will have no effect.',\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]:\n    'Firebase Analytics Interop Component failed to instantiate: {$reason}',\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]:\n    'Firebase Analytics is not supported in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]:\n    'IndexedDB unavailable or restricted in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [AnalyticsError.CONFIG_FETCH_FAILED]:\n    'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\n  [AnalyticsError.NO_API_KEY]:\n    'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid API key.',\n  [AnalyticsError.NO_APP_ID]:\n    'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid app ID.'\n};\n\ninterface ErrorParams {\n  [AnalyticsError.ALREADY_EXISTS]: { id: string };\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]: { reason: Error };\n  [AnalyticsError.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [AnalyticsError.CONFIG_FETCH_FAILED]: {\n    httpStatus: number;\n    responseMessage: string;\n  };\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]: { errorInfo: string };\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AnalyticsError, ErrorParams>(\n  'analytics',\n  'Analytics',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  CustomParams,\n  ControlParams,\n  EventParams,\n  ConsentSettings\n} from './public-types';\nimport { Gtag } from './types';\nimport { GtagCommand } from './constants';\n\n/**\n * Event parameters to set on 'gtag' during initialization.\n */\nexport let defaultEventParametersForInit: CustomParams | undefined;\n\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport async function logEvent(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n    return;\n  } else {\n    const measurementId = await initializationPromise;\n    const params: EventParams | ControlParams = {\n      ...eventParams,\n      'send_to': measurementId\n    };\n    gtagFunction(GtagCommand.EVENT, eventName, params);\n  }\n}\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport async function setCurrentScreen(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport async function setUserId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'user_id': id });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport async function setUserProperties(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    const flatProperties: { [key: string]: unknown } = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport async function setAnalyticsCollectionEnabled(\n  initializationPromise: Promise<string>,\n  enabled: boolean\n): Promise<void> {\n  const measurementId = await initializationPromise;\n  window[`ga-disable-${measurementId}`] = !enabled;\n}\n\n/**\n * Consent parameters to default to during 'gtag' initialization.\n */\nexport let defaultConsentSettingsForInit: ConsentSettings | undefined;\n\n/**\n * Sets the variable {@link defaultConsentSettingsForInit} for use in the initialization of\n * analytics.\n *\n * @param consentSettings Maps the applicable end user consent state for gtag.js.\n */\nexport function _setConsentDefaultForInit(\n  consentSettings?: ConsentSettings\n): void {\n  defaultConsentSettingsForInit = consentSettings;\n}\n\n/**\n * Sets the variable `defaultEventParametersForInit` for use in the initialization of\n * analytics.\n *\n * @param customParams Any custom params the user may pass to gtag.js.\n */\nexport function _setDefaultEventParametersForInit(\n  customParams?: CustomParams\n): void {\n  defaultEventParametersForInit = customParams;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicConfig, Gtag, MinimalDynamicConfig } from './types';\nimport { GtagCommand, GA_FID_KEY, ORIGIN_KEY } from './constants';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { fetchDynamicConfigWithRetry } from './get-config';\nimport { logger } from './logger';\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { findGtagScriptOnPage, insertScriptTag } from './helpers';\nimport { AnalyticsSettings } from './public-types';\nimport {\n  defaultConsentSettingsForInit,\n  _setConsentDefaultForInit,\n  defaultEventParametersForInit,\n  _setDefaultEventParametersForInit\n} from './functions';\n\nasync function validateIndexedDB(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    logger.warn(\n      ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n        errorInfo: 'IndexedDB is not available in this environment.'\n      }).message\n    );\n    return false;\n  } else {\n    try {\n      await validateIndexedDBOpenable();\n    } catch (e) {\n      logger.warn(\n        ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n          errorInfo: (e as Error)?.toString()\n        }).message\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\n * @param measurementIdToAppId Maps measurementID to appID.\n * @param installations _FirebaseInstallationsInternal instance.\n *\n * @returns Measurement ID.\n */\nexport async function _initializeAnalytics(\n  app: FirebaseApp,\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [key: string]: string },\n  installations: _FirebaseInstallationsInternal,\n  gtagCore: Gtag,\n  dataLayerName: string,\n  options?: AnalyticsSettings\n): Promise<string> {\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n  dynamicConfigPromise\n    .then(config => {\n      measurementIdToAppId[config.measurementId] = config.appId;\n      if (\n        app.options.measurementId &&\n        config.measurementId !== app.options.measurementId\n      ) {\n        logger.warn(\n          `The measurement ID in the local Firebase config (${app.options.measurementId})` +\n            ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\n            ` To ensure analytics events are always sent to the correct Analytics property,` +\n            ` update the` +\n            ` measurement ID field in the local config or remove it from the local config.`\n        );\n      }\n    })\n    .catch(e => logger.error(e));\n  // Add to list to track state of all dynamic config promises.\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n\n  const fidPromise: Promise<string | undefined> = validateIndexedDB().then(\n    envIsValid => {\n      if (envIsValid) {\n        return installations.getId();\n      } else {\n        return undefined;\n      }\n    }\n  );\n\n  const [dynamicConfig, fid] = await Promise.all([\n    dynamicConfigPromise,\n    fidPromise\n  ]);\n\n  // Detect if user has already put the gtag <script> tag on this page.\n  if (!findGtagScriptOnPage()) {\n    insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n  }\n\n  // Detects if there are consent settings that need to be configured.\n  if (defaultConsentSettingsForInit) {\n    gtagCore(GtagCommand.CONSENT, 'default', defaultConsentSettingsForInit);\n    _setConsentDefaultForInit(undefined);\n  }\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (gtagCore as any)('js', new Date());\n  // User config added first. We don't want users to accidentally overwrite\n  // base Firebase config properties.\n  const configProperties: Record<string, unknown> = options?.config ?? {};\n\n  // guard against developers accidentally setting properties with prefix `firebase_`\n  configProperties[ORIGIN_KEY] = 'firebase';\n  configProperties.update = true;\n\n  if (fid != null) {\n    configProperties[GA_FID_KEY] = fid;\n  }\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n  // `configProperties`.\n  gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n\n  // Detects if there is data that will be set on every event logged from the SDK.\n  if (defaultEventParametersForInit) {\n    gtagCore(GtagCommand.SET, defaultEventParametersForInit);\n    _setDefaultEventParametersForInit(undefined);\n  }\n\n  return dynamicConfig.measurementId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsOptions, Analytics, AnalyticsSettings } from './public-types';\nimport { Gtag, DynamicConfig, MinimalDynamicConfig } from './types';\nimport { getOrCreateDataLayer, wrapOrCreateGtag } from './helpers';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { areCookiesEnabled, isBrowserExtension } from '@firebase/util';\nimport { _initializeAnalytics } from './initialize-analytics';\nimport { logger } from './logger';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\n\n/**\n * Analytics Service class.\n */\nexport class AnalyticsService implements Analytics, _FirebaseService {\n  constructor(public app: FirebaseApp) {}\n  _delete(): Promise<void> {\n    delete initializationPromisesMap[this.app.options.appId!];\n    return Promise.resolve();\n  }\n}\n\n/**\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\n * all or some of these, depending on the call's `send_to` param and the status\n * of the dynamic config fetches (see below).\n */\nexport let initializationPromisesMap: {\n  [appId: string]: Promise<string>; // Promise contains measurement ID string.\n} = {};\n\n/**\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\n * wait on all these to be complete in order to determine if it can selectively\n * wait for only certain initialization (FID) promises or if it must wait for all.\n */\nlet dynamicConfigPromisesList: Array<\n  Promise<DynamicConfig | MinimalDynamicConfig>\n> = [];\n\n/**\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\n * fetch completes. If already populated, gtag config calls can use this to\n * selectively wait for only this app's initialization promise (FID) instead of all\n * initialization promises.\n */\nconst measurementIdToAppId: { [measurementId: string]: string } = {};\n\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName: string = 'dataLayer';\n\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName: string = 'gtag';\n\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction: Gtag;\n\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nexport let wrappedGtagFunction: Gtag;\n\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone: boolean = false;\n\n/**\n * For testing\n * @internal\n */\nexport function resetGlobalVars(\n  newGlobalInitDone = false,\n  newInitializationPromisesMap = {},\n  newDynamicPromises = []\n): void {\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n\n/**\n * For testing\n * @internal\n */\nexport function getGlobalVars(): {\n  initializationPromisesMap: { [appId: string]: Promise<string> };\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >;\n} {\n  return {\n    initializationPromisesMap,\n    dynamicConfigPromisesList\n  };\n}\n\n/**\n * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\n * Intended to be used if `gtag.js` script has been installed on\n * this page independently of Firebase Analytics, and is using non-default\n * names for either the `gtag` function or for `dataLayer`.\n * Must be called before calling `getAnalytics()` or it won't\n * have any effect.\n *\n * @public\n *\n * @param options - Custom gtag and dataLayer names.\n */\nexport function settings(options: SettingsOptions): void {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\n/**\n * Returns true if no environment mismatch is found.\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\n * error that also lists details for each mismatch found.\n */\nfunction warnOnBrowserContextMismatch(): void {\n  const mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    const details = mismatchedEnvMessages\n      .map((message, index) => `(${index + 1}) ${message}`)\n      .join(' ');\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_ANALYTICS_CONTEXT, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n\n/**\n * Analytics instance factory.\n * @internal\n */\nexport function factory(\n  app: FirebaseApp,\n  installations: _FirebaseInstallationsInternal,\n  options?: AnalyticsSettings\n): AnalyticsService {\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\n        `The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\n          ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config.`\n      );\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n    }\n  }\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_EXISTS, {\n      id: appId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n\n    getOrCreateDataLayer(dataLayerName);\n\n    const { wrappedGtag, gtagCore } = wrapOrCreateGtag(\n      initializationPromisesMap,\n      dynamicConfigPromisesList,\n      measurementIdToAppId,\n      dataLayerName,\n      gtagName\n    );\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = _initializeAnalytics(\n    app,\n    dynamicConfigPromisesList,\n    measurementIdToAppId,\n    installations,\n    gtagCoreFunction,\n    dataLayerName,\n    options\n  );\n\n  const analyticsInstance: AnalyticsService = new AnalyticsService(app);\n\n  return analyticsInstance;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable camelcase */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport {\n  Analytics,\n  AnalyticsCallOptions,\n  AnalyticsSettings,\n  ConsentSettings,\n  CustomParams,\n  EventNameString,\n  EventParams\n} from './public-types';\nimport { Provider } from '@firebase/component';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable,\n  areCookiesEnabled,\n  isBrowserExtension,\n  getModularInstance,\n  deepEqual\n} from '@firebase/util';\nimport { ANALYTICS_TYPE, GtagCommand } from './constants';\nimport {\n  AnalyticsService,\n  initializationPromisesMap,\n  wrappedGtagFunction\n} from './factory';\nimport { logger } from './logger';\nimport {\n  logEvent as internalLogEvent,\n  setCurrentScreen as internalSetCurrentScreen,\n  setUserId as internalSetUserId,\n  setUserProperties as internalSetUserProperties,\n  setAnalyticsCollectionEnabled as internalSetAnalyticsCollectionEnabled,\n  _setConsentDefaultForInit,\n  _setDefaultEventParametersForInit\n} from './functions';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\n\nexport { settings } from './factory';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    [ANALYTICS_TYPE]: AnalyticsService;\n  }\n}\n\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport function getAnalytics(app: FirebaseApp = getApp()): Analytics {\n  app = getModularInstance(app);\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n\n  if (analyticsProvider.isInitialized()) {\n    return analyticsProvider.getImmediate();\n  }\n\n  return initializeAnalytics(app);\n}\n\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport function initializeAnalytics(\n  app: FirebaseApp,\n  options: AnalyticsSettings = {}\n): Analytics {\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n  if (analyticsProvider.isInitialized()) {\n    const existingInstance = analyticsProvider.getImmediate();\n    if (deepEqual(options, analyticsProvider.getOptions())) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n    }\n  }\n  const analyticsInstance = analyticsProvider.initialize({ options });\n  return analyticsInstance;\n}\n\n/**\n * This is a public static method provided to users that wraps four different checks:\n *\n * 1. Check if it's not a browser extension environment.\n * 2. Check if cookies are enabled in current browser.\n * 3. Check if IndexedDB is supported by the browser environment.\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\n *\n * @public\n *\n */\nexport async function isSupported(): Promise<boolean> {\n  if (isBrowserExtension()) {\n    return false;\n  }\n  if (!areCookiesEnabled()) {\n    return false;\n  }\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Use gtag `config` command to set `screen_name`.\n *\n * @public\n *\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param screenName - Screen name to set.\n */\nexport function setCurrentScreen(\n  analyticsInstance: Analytics,\n  screenName: string,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetCurrentScreen(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    screenName,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Use gtag `config` command to set `user_id`.\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param id - User ID to set.\n */\nexport function setUserId(\n  analyticsInstance: Analytics,\n  id: string,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserId(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    id,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Use gtag `config` command to set all params specified.\n *\n * @public\n */\nexport function setUserProperties(\n  analyticsInstance: Analytics,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserProperties(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    properties,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Sets whether Google Analytics collection is enabled for this app on this device.\n * Sets global `window['ga-disable-analyticsId'] = true;`\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param enabled - If true, enables collection, if false, disables it.\n */\nexport function setAnalyticsCollectionEnabled(\n  analyticsInstance: Analytics,\n  enabled: boolean\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetAnalyticsCollectionEnabled(\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    enabled\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Adds data that will be set on every event logged from the SDK, including automatic ones.\n * With gtag's \"set\" command, the values passed persist on the current page and are passed with\n * all subsequent events.\n * @public\n * @param customParams - Any custom params the user may pass to gtag.js.\n */\nexport function setDefaultEventParameters(customParams: CustomParams): void {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(GtagCommand.SET, customParams);\n  } else {\n    _setDefaultEventParametersForInit(customParams);\n  }\n}\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_payment_info',\n  eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    payment_type?: EventParams['payment_type'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_shipping_info',\n  eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    shipping_tier?: EventParams['shipping_tier'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_to_cart' | 'add_to_wishlist' | 'remove_from_cart',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'begin_checkout',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'checkout_progress',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * {@link https://developers.google.com/analytics/devguides/collection/ga4/exceptions\n * | Measure exceptions}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'exception',\n  eventParams?: {\n    description?: EventParams['description'];\n    fatal?: EventParams['fatal'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'generate_lead',\n  eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'login',\n  eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * {@link https://developers.google.com/analytics/devguides/collection/ga4/page-view\n * | Page views}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'page_view',\n  eventParams?: {\n    page_title?: string;\n    page_location?: string;\n    page_path?: string;\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'purchase' | 'refund',\n  eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    transaction_id: EventParams['transaction_id'];\n    tax?: EventParams['tax'];\n    shipping?: EventParams['shipping'];\n    items?: EventParams['items'];\n    coupon?: EventParams['coupon'];\n    affiliation?: EventParams['affiliation'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See {@link https://firebase.google.com/docs/analytics/screenviews\n * | Track Screenviews}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'screen_view',\n  eventParams?: {\n    firebase_screen: EventParams['firebase_screen'];\n    firebase_screen_class: EventParams['firebase_screen_class'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'search' | 'view_search_results',\n  eventParams?: {\n    search_term?: EventParams['search_term'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_content',\n  eventParams?: {\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_item',\n  eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_promotion' | 'view_promotion',\n  eventParams?: {\n    items?: EventParams['items'];\n    promotion_id?: EventParams['promotion_id'];\n    promotion_name?: EventParams['promotion_name'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'set_checkout_option',\n  eventParams?: {\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'share',\n  eventParams?: {\n    method?: EventParams['method'];\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'sign_up',\n  eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'timing_complete',\n  eventParams?: {\n    name: string;\n    value: number;\n    event_category?: string;\n    event_label?: string;\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_cart' | 'view_item',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_item_list',\n  eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent<T extends string>(\n  analyticsInstance: Analytics,\n  eventName: CustomEventName<T>,\n  eventParams?: { [key: string]: any },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * List of official event parameters can be found in the gtag.js\n * reference documentation:\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n *\n * @public\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalLogEvent(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    eventName,\n    eventParams,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Any custom event name string not in the standard list of recommended\n * event names.\n * @public\n */\nexport type CustomEventName<T> = T extends EventNameString ? never : T;\n\n/**\n * Sets the applicable end user consent state for this web app across all gtag references once\n * Firebase Analytics is initialized.\n *\n * Use the {@link ConsentSettings} to specify individual consent type values. By default consent\n * types are set to \"granted\".\n * @public\n * @param consentSettings - Maps the applicable end user consent state for gtag.js.\n */\nexport function setConsent(consentSettings: ConsentSettings): void {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(GtagCommand.CONSENT, 'update', consentSettings);\n  } else {\n    _setConsentDefaultForInit(consentSettings);\n  }\n}\n","import { _getProvider, getApp as t, _removeServiceInstance as e, _registerComponent as n, registerVersion as r, SDK_VERSION as s } from \"@firebase/app\";\n\nimport { Component as i } from \"@firebase/component\";\n\nimport { Logger as o, LogLevel as u } from \"@firebase/logger\";\n\nimport { FirebaseError as c, createMockUserToken as a, getModularInstance as h } from \"@firebase/util\";\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nclass l {\n    constructor(t) {\n        this.uid = t;\n    }\n    isAuthenticated() {\n        return null != this.uid;\n    }\n    /**\n     * Returns a key representing this user, suitable for inclusion in a\n     * dictionary.\n     */    toKey() {\n        return this.isAuthenticated() ? \"uid:\" + this.uid : \"anonymous-user\";\n    }\n    isEqual(t) {\n        return t.uid === this.uid;\n    }\n}\n\n/** A user with a null UID. */ l.UNAUTHENTICATED = new l(null), \n// TODO(mikelehen): Look into getting a proper uid-equivalent for\n// non-FirebaseAuth providers.\nl.GOOGLE_CREDENTIALS = new l(\"google-credentials-uid\"), l.FIRST_PARTY = new l(\"first-party-uid\"), \nl.MOCK_USER = new l(\"mock-user\");\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet f = \"9.10.0\";\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst d = new o(\"@firebase/firestore\");\n\n/**\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\n *\n * @param logLevel - The verbosity you set for activity and error logging. Can\n *   be any of the following values:\n *\n *   <ul>\n *     <li>`debug` for the most verbose logging level, primarily for\n *     debugging.</li>\n *     <li>`error` to log errors only.</li>\n *     <li><code>`silent` to turn off logging.</li>\n *   </ul>\n */ function w(t) {\n    d.setLogLevel(t);\n}\n\nfunction m(t, ...e) {\n    if (d.logLevel <= u.DEBUG) {\n        const n = e.map(_);\n        d.debug(`Firestore (${f}): ${t}`, ...n);\n    }\n}\n\nfunction p(t, ...e) {\n    if (d.logLevel <= u.ERROR) {\n        const n = e.map(_);\n        d.error(`Firestore (${f}): ${t}`, ...n);\n    }\n}\n\n/**\n * @internal\n */ function y(t, ...e) {\n    if (d.logLevel <= u.WARN) {\n        const n = e.map(_);\n        d.warn(`Firestore (${f}): ${t}`, ...n);\n    }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */ function _(t) {\n    if (\"string\" == typeof t) return t;\n    try {\n        return e = t, JSON.stringify(e);\n    } catch (e) {\n        // Converting to JSON failed, just log the object directly\n        return t;\n    }\n    /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n    /** Formats an object as a JSON string, suitable for logging. */\n    var e;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */ function g(t = \"Unexpected state\") {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    const e = `FIRESTORE (${f}) INTERNAL ASSERTION FAILED: ` + t;\n    // NOTE: We don't use FirestoreError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw p(e), new Error(e);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */ function v(t, e) {\n    t || g();\n}\n\n/**\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\n * instance of `T` before casting.\n */ function b(t, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n    return t;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const E = \"ok\", T = \"cancelled\", I = \"unknown\", A = \"invalid-argument\", R = \"deadline-exceeded\", P = \"not-found\", V = \"already-exists\", N = \"permission-denied\", D = \"unauthenticated\", $ = \"resource-exhausted\", x = \"failed-precondition\", F = \"aborted\", S = \"out-of-range\", q = \"unimplemented\", O = \"internal\", k = \"unavailable\", C = \"data-loss\";\n\n/** An error returned by a Firestore operation. */ class L extends c {\n    /** @hideconstructor */\n    constructor(\n    /**\n     * The backend error code associated with this error.\n     */\n    t, \n    /**\n     * A custom error description.\n     */\n    e) {\n        super(t, e), this.code = t, this.message = e, \n        // HACK: We write a toString property directly because Error is not a real\n        // class and so inheritance does not work correctly. We could alternatively\n        // do the same \"back-door inheritance\" trick that FirebaseError does.\n        this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class M {\n    constructor() {\n        this.promise = new Promise(((t, e) => {\n            this.resolve = t, this.reject = e;\n        }));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class U {\n    constructor(t, e) {\n        this.user = e, this.type = \"OAuth\", this.headers = new Map, this.headers.set(\"Authorization\", `Bearer ${t}`);\n    }\n}\n\n/**\n * A CredentialsProvider that always yields an empty token.\n * @internal\n */ class j {\n    getToken() {\n        return Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {\n        // Fire with initial user.\n        t.enqueueRetryable((() => e(l.UNAUTHENTICATED)));\n    }\n    shutdown() {}\n}\n\n/**\n * A CredentialsProvider that always returns a constant token. Used for\n * emulator token mocking.\n */ class B {\n    constructor(t) {\n        this.token = t, \n        /**\n         * Stores the listener registered with setChangeListener()\n         * This isn't actually necessary since the UID never changes, but we use this\n         * to verify the listen contract is adhered to in tests.\n         */\n        this.changeListener = null;\n    }\n    getToken() {\n        return Promise.resolve(this.token);\n    }\n    invalidateToken() {}\n    start(t, e) {\n        this.changeListener = e, \n        // Fire with initial user.\n        t.enqueueRetryable((() => e(this.token.user)));\n    }\n    shutdown() {\n        this.changeListener = null;\n    }\n}\n\n/** Credential provider for the Lite SDK. */ class z {\n    constructor(t) {\n        this.auth = null, t.onInit((t => {\n            this.auth = t;\n        }));\n    }\n    getToken() {\n        return this.auth ? this.auth.getToken().then((t => t ? (v(\"string\" == typeof t.accessToken), \n        new U(t.accessToken, new l(this.auth.getUid()))) : null)) : Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {}\n    shutdown() {}\n}\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */ class G {\n    constructor(t, e, n, r) {\n        this.t = t, this.i = e, this.o = n, this.u = r, this.type = \"FirstParty\", this.user = l.FIRST_PARTY, \n        this.h = new Map;\n    }\n    /** Gets an authorization token, using a provided factory function, or falling back to First Party GAPI. */    l() {\n        return this.u ? this.u() : (\n        // Make sure this really is a Gapi client.\n        v(!(\"object\" != typeof this.t || null === this.t || !this.t.auth || !this.t.auth.getAuthHeaderValueForFirstParty)), \n        this.t.auth.getAuthHeaderValueForFirstParty([]));\n    }\n    get headers() {\n        this.h.set(\"X-Goog-AuthUser\", this.i);\n        // Use array notation to prevent minification\n        const t = this.l();\n        return t && this.h.set(\"Authorization\", t), this.o && this.h.set(\"X-Goog-Iam-Authorization-Token\", this.o), \n        this.h;\n    }\n}\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */ class W {\n    constructor(t, e, n, r) {\n        this.t = t, this.i = e, this.o = n, this.u = r;\n    }\n    getToken() {\n        return Promise.resolve(new G(this.t, this.i, this.o, this.u));\n    }\n    start(t, e) {\n        // Fire with initial uid.\n        t.enqueueRetryable((() => e(l.FIRST_PARTY)));\n    }\n    shutdown() {}\n    invalidateToken() {}\n}\n\nclass K {\n    constructor(t) {\n        this.value = t, this.type = \"AppCheck\", this.headers = new Map, t && t.length > 0 && this.headers.set(\"x-firebase-appcheck\", this.value);\n    }\n}\n\n/** AppCheck token provider for the Lite SDK. */ class Q {\n    constructor(t) {\n        this.m = t, this.appCheck = null, t.onInit((t => {\n            this.appCheck = t;\n        }));\n    }\n    getToken() {\n        return this.appCheck ? this.appCheck.getToken().then((t => t ? (v(\"string\" == typeof t.token), \n        new K(t.token)) : null)) : Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {}\n    shutdown() {}\n}\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Y {\n    /**\n     * Constructs a DatabaseInfo using the provided host, databaseId and\n     * persistenceKey.\n     *\n     * @param databaseId - The database to use.\n     * @param appId - The Firebase App Id.\n     * @param persistenceKey - A unique identifier for this Firestore's local\n     * storage (used in conjunction with the databaseId).\n     * @param host - The Firestore backend host to connect to.\n     * @param ssl - Whether to use SSL when connecting.\n     * @param forceLongPolling - Whether to use the forceLongPolling option\n     * when using WebChannel as the network transport.\n     * @param autoDetectLongPolling - Whether to use the detectBufferingProxy\n     * option when using WebChannel as the network transport.\n     * @param useFetchStreams Whether to use the Fetch API instead of\n     * XMLHTTPRequest\n     */\n    constructor(t, e, n, r, s, i, o, u) {\n        this.databaseId = t, this.appId = e, this.persistenceKey = n, this.host = r, this.ssl = s, \n        this.forceLongPolling = i, this.autoDetectLongPolling = o, this.useFetchStreams = u;\n    }\n}\n\n/** The default database name for a project. */\n/**\n * Represents the database ID a Firestore client is associated with.\n * @internal\n */\nclass H {\n    constructor(t, e) {\n        this.projectId = t, this.database = e || \"(default)\";\n    }\n    static empty() {\n        return new H(\"\", \"\");\n    }\n    get isDefaultDatabase() {\n        return \"(default)\" === this.database;\n    }\n    isEqual(t) {\n        return t instanceof H && t.projectId === this.projectId && t.database === this.database;\n    }\n}\n\n/**\n * Path represents an ordered sequence of string segments.\n */\nclass J {\n    constructor(t, e, n) {\n        void 0 === e ? e = 0 : e > t.length && g(), void 0 === n ? n = t.length - e : n > t.length - e && g(), \n        this.segments = t, this.offset = e, this.len = n;\n    }\n    get length() {\n        return this.len;\n    }\n    isEqual(t) {\n        return 0 === J.comparator(this, t);\n    }\n    child(t) {\n        const e = this.segments.slice(this.offset, this.limit());\n        return t instanceof J ? t.forEach((t => {\n            e.push(t);\n        })) : e.push(t), this.construct(e);\n    }\n    /** The index of one past the last segment of the path. */    limit() {\n        return this.offset + this.length;\n    }\n    popFirst(t) {\n        return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);\n    }\n    popLast() {\n        return this.construct(this.segments, this.offset, this.length - 1);\n    }\n    firstSegment() {\n        return this.segments[this.offset];\n    }\n    lastSegment() {\n        return this.get(this.length - 1);\n    }\n    get(t) {\n        return this.segments[this.offset + t];\n    }\n    isEmpty() {\n        return 0 === this.length;\n    }\n    isPrefixOf(t) {\n        if (t.length < this.length) return !1;\n        for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n        return !0;\n    }\n    isImmediateParentOf(t) {\n        if (this.length + 1 !== t.length) return !1;\n        for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n        return !0;\n    }\n    forEach(t) {\n        for (let e = this.offset, n = this.limit(); e < n; e++) t(this.segments[e]);\n    }\n    toArray() {\n        return this.segments.slice(this.offset, this.limit());\n    }\n    static comparator(t, e) {\n        const n = Math.min(t.length, e.length);\n        for (let r = 0; r < n; r++) {\n            const n = t.get(r), s = e.get(r);\n            if (n < s) return -1;\n            if (n > s) return 1;\n        }\n        return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;\n    }\n}\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n *\n * @internal\n */ class X extends J {\n    construct(t, e, n) {\n        return new X(t, e, n);\n    }\n    canonicalString() {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        return this.toArray().join(\"/\");\n    }\n    toString() {\n        return this.canonicalString();\n    }\n    /**\n     * Creates a resource path from the given slash-delimited string. If multiple\n     * arguments are provided, all components are combined. Leading and trailing\n     * slashes from all components are ignored.\n     */    static fromString(...t) {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        const e = [];\n        for (const n of t) {\n            if (n.indexOf(\"//\") >= 0) throw new L(A, `Invalid segment (${n}). Paths must not contain // in them.`);\n            // Strip leading and traling slashed.\n                        e.push(...n.split(\"/\").filter((t => t.length > 0)));\n        }\n        return new X(e);\n    }\n    static emptyPath() {\n        return new X([]);\n    }\n}\n\nconst Z = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/**\n * A dot-separated path for navigating sub-objects within a document.\n * @internal\n */ class tt extends J {\n    construct(t, e, n) {\n        return new tt(t, e, n);\n    }\n    /**\n     * Returns true if the string could be used as a segment in a field path\n     * without escaping.\n     */    static isValidIdentifier(t) {\n        return Z.test(t);\n    }\n    canonicalString() {\n        return this.toArray().map((t => (t = t.replace(/\\\\/g, \"\\\\\\\\\").replace(/`/g, \"\\\\`\"), \n        tt.isValidIdentifier(t) || (t = \"`\" + t + \"`\"), t))).join(\".\");\n    }\n    toString() {\n        return this.canonicalString();\n    }\n    /**\n     * Returns true if this field references the key of a document.\n     */    isKeyField() {\n        return 1 === this.length && \"__name__\" === this.get(0);\n    }\n    /**\n     * The field designating the key of a document.\n     */    static keyField() {\n        return new tt([ \"__name__\" ]);\n    }\n    /**\n     * Parses a field string from the given server-formatted string.\n     *\n     * - Splitting the empty string is not allowed (for now at least).\n     * - Empty segments within the string (e.g. if there are two consecutive\n     *   separators) are not allowed.\n     *\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\n     * non-identifier path components, even if they aren't escaped.\n     */    static fromServerFormat(t) {\n        const e = [];\n        let n = \"\", r = 0;\n        const s = () => {\n            if (0 === n.length) throw new L(A, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);\n            e.push(n), n = \"\";\n        };\n        let i = !1;\n        for (;r < t.length; ) {\n            const e = t[r];\n            if (\"\\\\\" === e) {\n                if (r + 1 === t.length) throw new L(A, \"Path has trailing escape character: \" + t);\n                const e = t[r + 1];\n                if (\"\\\\\" !== e && \".\" !== e && \"`\" !== e) throw new L(A, \"Path has invalid escape sequence: \" + t);\n                n += e, r += 2;\n            } else \"`\" === e ? (i = !i, r++) : \".\" !== e || i ? (n += e, r++) : (s(), r++);\n        }\n        if (s(), i) throw new L(A, \"Unterminated ` in path: \" + t);\n        return new tt(e);\n    }\n    static emptyPath() {\n        return new tt([]);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n */ class et {\n    constructor(t) {\n        this.path = t;\n    }\n    static fromPath(t) {\n        return new et(X.fromString(t));\n    }\n    static fromName(t) {\n        return new et(X.fromString(t).popFirst(5));\n    }\n    static empty() {\n        return new et(X.emptyPath());\n    }\n    get collectionGroup() {\n        return this.path.popLast().lastSegment();\n    }\n    /** Returns true if the document is in the specified collectionId. */    hasCollectionId(t) {\n        return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;\n    }\n    /** Returns the collection group (i.e. the name of the parent collection) for this key. */    getCollectionGroup() {\n        return this.path.get(this.path.length - 2);\n    }\n    /** Returns the fully qualified path to the parent collection. */    getCollectionPath() {\n        return this.path.popLast();\n    }\n    isEqual(t) {\n        return null !== t && 0 === X.comparator(this.path, t.path);\n    }\n    toString() {\n        return this.path.toString();\n    }\n    static comparator(t, e) {\n        return X.comparator(t.path, e.path);\n    }\n    static isDocumentKey(t) {\n        return t.length % 2 == 0;\n    }\n    /**\n     * Creates and returns a new document key with the given segments.\n     *\n     * @param segments - The segments of the path to the document\n     * @returns A new instance of DocumentKey\n     */    static fromSegments(t) {\n        return new et(new X(t.slice()));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function nt(t, e, n) {\n    if (!n) throw new L(A, `Function ${t}() cannot be called with an empty ${e}.`);\n}\n\n/**\n * Validates that two boolean options are not set at the same time.\n * @internal\n */\n/**\n * Validates that `path` refers to a document (indicated by the fact it contains\n * an even numbers of segments).\n */\nfunction rt(t) {\n    if (!et.isDocumentKey(t)) throw new L(A, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);\n}\n\n/**\n * Validates that `path` refers to a collection (indicated by the fact it\n * contains an odd numbers of segments).\n */ function st(t) {\n    if (et.isDocumentKey(t)) throw new L(A, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);\n}\n\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\n/** Returns a string describing the type / value of the provided input. */\nfunction it(t) {\n    if (void 0 === t) return \"undefined\";\n    if (null === t) return \"null\";\n    if (\"string\" == typeof t) return t.length > 20 && (t = `${t.substring(0, 20)}...`), \n    JSON.stringify(t);\n    if (\"number\" == typeof t || \"boolean\" == typeof t) return \"\" + t;\n    if (\"object\" == typeof t) {\n        if (t instanceof Array) return \"an array\";\n        {\n            const e = \n            /** try to get the constructor name for an object. */\n            function(t) {\n                if (t.constructor) return t.constructor.name;\n                return null;\n            }\n            /**\n * Casts `obj` to `T`, optionally unwrapping Compat types to expose the\n * underlying instance. Throws if  `obj` is not an instance of `T`.\n *\n * This cast is used in the Lite and Full SDK to verify instance types for\n * arguments passed to the public API.\n * @internal\n */ (t);\n            return e ? `a custom ${e} object` : \"an object\";\n        }\n    }\n    return \"function\" == typeof t ? \"a function\" : g();\n}\n\nfunction ot(t, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n    if (\"_delegate\" in t && (\n    // Unwrap Compat types\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    t = t._delegate), !(t instanceof e)) {\n        if (e.name === t.constructor.name) throw new L(A, \"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?\");\n        {\n            const n = it(t);\n            throw new L(A, `Expected type '${e.name}', but it was: ${n}`);\n        }\n    }\n    return t;\n}\n\nfunction ut(t, e) {\n    if (e <= 0) throw new L(A, `Function ${t}() requires a positive number, but it was: ${e}.`);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns whether a variable is either undefined or null.\n */ function ct(t) {\n    return null == t;\n}\n\n/** Returns whether the value represents -0. */ function at(t) {\n    // Detect if the value is -0.0. Based on polyfill from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n    return 0 === t && 1 / t == -1 / 0;\n}\n\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value - The value to test for being an integer and in the safe range\n */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst ht = {\n    BatchGetDocuments: \"batchGet\",\n    Commit: \"commit\",\n    RunQuery: \"runQuery\"\n};\n\n/**\n * Maps RPC names to the corresponding REST endpoint name.\n *\n * We use array notation to avoid mangling.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\nvar lt, ft;\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status - An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nfunction dt(t) {\n    if (void 0 === t) return p(\"RPC_ERROR\", \"HTTP error has no status\"), I;\n    // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n    // status codes but the mapping is not bijective. In each case of ambiguity\n    // this function chooses a primary error.\n    \n    // [1]\n    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n        switch (t) {\n      case 200:\n        // OK\n        return E;\n\n      case 400:\n        // Bad Request\n        return x;\n\n        // Other possibilities based on the forward mapping\n        // return Code.INVALID_ARGUMENT;\n        // return Code.OUT_OF_RANGE;\n              case 401:\n        // Unauthorized\n        return D;\n\n      case 403:\n        // Forbidden\n        return N;\n\n      case 404:\n        // Not Found\n        return P;\n\n      case 409:\n        // Conflict\n        return F;\n\n        // Other possibilities:\n        // return Code.ALREADY_EXISTS;\n              case 416:\n        // Range Not Satisfiable\n        return S;\n\n      case 429:\n        // Too Many Requests\n        return $;\n\n      case 499:\n        // Client Closed Request\n        return T;\n\n      case 500:\n        // Internal Server Error\n        return I;\n\n        // Other possibilities:\n        // return Code.INTERNAL;\n        // return Code.DATA_LOSS;\n              case 501:\n        // Unimplemented\n        return q;\n\n      case 503:\n        // Service Unavailable\n        return k;\n\n      case 504:\n        // Gateway Timeout\n        return R;\n\n      default:\n        return t >= 200 && t < 300 ? E : t >= 400 && t < 500 ? x : t >= 500 && t < 600 ? O : I;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A Rest-based connection that relies on the native HTTP stack\n * (e.g. `fetch` or a polyfill).\n */ (ft = lt || (lt = {}))[ft.OK = 0] = \"OK\", ft[ft.CANCELLED = 1] = \"CANCELLED\", \nft[ft.UNKNOWN = 2] = \"UNKNOWN\", ft[ft.INVALID_ARGUMENT = 3] = \"INVALID_ARGUMENT\", \nft[ft.DEADLINE_EXCEEDED = 4] = \"DEADLINE_EXCEEDED\", ft[ft.NOT_FOUND = 5] = \"NOT_FOUND\", \nft[ft.ALREADY_EXISTS = 6] = \"ALREADY_EXISTS\", ft[ft.PERMISSION_DENIED = 7] = \"PERMISSION_DENIED\", \nft[ft.UNAUTHENTICATED = 16] = \"UNAUTHENTICATED\", ft[ft.RESOURCE_EXHAUSTED = 8] = \"RESOURCE_EXHAUSTED\", \nft[ft.FAILED_PRECONDITION = 9] = \"FAILED_PRECONDITION\", ft[ft.ABORTED = 10] = \"ABORTED\", \nft[ft.OUT_OF_RANGE = 11] = \"OUT_OF_RANGE\", ft[ft.UNIMPLEMENTED = 12] = \"UNIMPLEMENTED\", \nft[ft.INTERNAL = 13] = \"INTERNAL\", ft[ft.UNAVAILABLE = 14] = \"UNAVAILABLE\", ft[ft.DATA_LOSS = 15] = \"DATA_LOSS\";\n\nclass wt extends \n/**\n * Base class for all Rest-based connections to the backend (WebChannel and\n * HTTP).\n */\nclass {\n    constructor(t) {\n        this.databaseInfo = t, this.databaseId = t.databaseId;\n        const e = t.ssl ? \"https\" : \"http\";\n        this.p = e + \"://\" + t.host, this.g = \"projects/\" + this.databaseId.projectId + \"/databases/\" + this.databaseId.database + \"/documents\";\n    }\n    v(t, e, n, r, s) {\n        const i = this.T(t, e);\n        m(\"RestConnection\", \"Sending: \", i, n);\n        const o = {};\n        return this.I(o, r, s), this.A(t, i, o, n).then((t => (m(\"RestConnection\", \"Received: \", t), \n        t)), (e => {\n            throw y(\"RestConnection\", `${t} failed with error: `, e, \"url: \", i, \"request:\", n), \n            e;\n        }));\n    }\n    R(t, e, n, r, s, i) {\n        // The REST API automatically aggregates all of the streamed results, so we\n        // can just use the normal invoke() method.\n        return this.v(t, e, n, r, s);\n    }\n    /**\n     * Modifies the headers for a request, adding any authorization token if\n     * present and any additional headers for the request.\n     */    I(t, e, n) {\n        t[\"X-Goog-Api-Client\"] = \"gl-js/ fire/\" + f, \n        // Content-Type: text/plain will avoid preflight requests which might\n        // mess with CORS and redirects by proxies. If we add custom headers\n        // we will need to change this code to potentially use the $httpOverwrite\n        // parameter supported by ESF to avoid triggering preflight requests.\n        t[\"Content-Type\"] = \"text/plain\", this.databaseInfo.appId && (t[\"X-Firebase-GMPID\"] = this.databaseInfo.appId), \n        e && e.headers.forEach(((e, n) => t[n] = e)), n && n.headers.forEach(((e, n) => t[n] = e));\n    }\n    T(t, e) {\n        const n = ht[t];\n        return `${this.p}/v1/${e}:${n}`;\n    }\n} {\n    /**\n     * @param databaseInfo - The connection info.\n     * @param fetchImpl - `fetch` or a Polyfill that implements the fetch API.\n     */\n    constructor(t, e) {\n        super(t), this.P = e;\n    }\n    V(t, e) {\n        throw new Error(\"Not supported by FetchConnection\");\n    }\n    async A(t, e, n, r) {\n        const s = JSON.stringify(r);\n        let i;\n        try {\n            i = await this.P(e, {\n                method: \"POST\",\n                headers: n,\n                body: s\n            });\n        } catch (t) {\n            throw new L(dt(t.status), \"Request failed with error: \" + t.statusText);\n        }\n        if (!i.ok) throw new L(dt(i.status), \"Request failed with error: \" + i.statusText);\n        return i.json();\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Initializes the HTTP connection for the REST API. */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Generates `nBytes` of random bytes.\n *\n * If `nBytes < 0` , an error will be thrown.\n */\nfunction mt(t) {\n    // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.\n    const e = \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    \"undefined\" != typeof self && (self.crypto || self.msCrypto), n = new Uint8Array(t);\n    if (e && \"function\" == typeof e.getRandomValues) e.getRandomValues(n); else \n    // Falls back to Math.random\n    for (let e = 0; e < t; e++) n[e] = Math.floor(256 * Math.random());\n    return n;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class pt {\n    static N() {\n        // Alphanumeric characters\n        const t = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\", e = Math.floor(256 / t.length) * t.length;\n        // The largest byte value that is a multiple of `char.length`.\n                let n = \"\";\n        for (;n.length < 20; ) {\n            const r = mt(40);\n            for (let s = 0; s < r.length; ++s) \n            // Only accept values that are [0, maxMultiple), this ensures they can\n            // be evenly mapped to indices of `chars` via a modulo operation.\n            n.length < 20 && r[s] < e && (n += t.charAt(r[s] % t.length));\n        }\n        return n;\n    }\n}\n\nfunction yt(t, e) {\n    return t < e ? -1 : t > e ? 1 : 0;\n}\n\n/** Helper to compare arrays using isEqual(). */ function _t(t, e, n) {\n    return t.length === e.length && t.every(((t, r) => n(t, e[r])));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).\n/**\n * A `Timestamp` represents a point in time independent of any time zone or\n * calendar, represented as seconds and fractions of seconds at nanosecond\n * resolution in UTC Epoch time.\n *\n * It is encoded using the Proleptic Gregorian Calendar which extends the\n * Gregorian calendar backwards to year one. It is encoded assuming all minutes\n * are 60 seconds long, i.e. leap seconds are \"smeared\" so that no leap second\n * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to\n * 9999-12-31T23:59:59.999999999Z.\n *\n * For examples and further specifications, refer to the\n * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.\n */\nclass gt {\n    /**\n     * Creates a new timestamp.\n     *\n     * @param seconds - The number of seconds of UTC time since Unix epoch\n     *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n     *     9999-12-31T23:59:59Z inclusive.\n     * @param nanoseconds - The non-negative fractions of a second at nanosecond\n     *     resolution. Negative second values with fractions must still have\n     *     non-negative nanoseconds values that count forward in time. Must be\n     *     from 0 to 999,999,999 inclusive.\n     */\n    constructor(\n    /**\n     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.\n     */\n    t, \n    /**\n     * The fractions of a second at nanosecond resolution.*\n     */\n    e) {\n        if (this.seconds = t, this.nanoseconds = e, e < 0) throw new L(A, \"Timestamp nanoseconds out of range: \" + e);\n        if (e >= 1e9) throw new L(A, \"Timestamp nanoseconds out of range: \" + e);\n        if (t < -62135596800) throw new L(A, \"Timestamp seconds out of range: \" + t);\n        // This will break in the year 10,000.\n                if (t >= 253402300800) throw new L(A, \"Timestamp seconds out of range: \" + t);\n    }\n    /**\n     * Creates a new timestamp with the current date, with millisecond precision.\n     *\n     * @returns a new timestamp representing the current date.\n     */    static now() {\n        return gt.fromMillis(Date.now());\n    }\n    /**\n     * Creates a new timestamp from the given date.\n     *\n     * @param date - The date to initialize the `Timestamp` from.\n     * @returns A new `Timestamp` representing the same point in time as the given\n     *     date.\n     */    static fromDate(t) {\n        return gt.fromMillis(t.getTime());\n    }\n    /**\n     * Creates a new timestamp from the given number of milliseconds.\n     *\n     * @param milliseconds - Number of milliseconds since Unix epoch\n     *     1970-01-01T00:00:00Z.\n     * @returns A new `Timestamp` representing the same point in time as the given\n     *     number of milliseconds.\n     */    static fromMillis(t) {\n        const e = Math.floor(t / 1e3), n = Math.floor(1e6 * (t - 1e3 * e));\n        return new gt(e, n);\n    }\n    /**\n     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion\n     * causes a loss of precision since `Date` objects only support millisecond\n     * precision.\n     *\n     * @returns JavaScript `Date` object representing the same point in time as\n     *     this `Timestamp`, with millisecond precision.\n     */    toDate() {\n        return new Date(this.toMillis());\n    }\n    /**\n     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since\n     * epoch). This operation causes a loss of precision.\n     *\n     * @returns The point in time corresponding to this timestamp, represented as\n     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\n     */    toMillis() {\n        return 1e3 * this.seconds + this.nanoseconds / 1e6;\n    }\n    _compareTo(t) {\n        return this.seconds === t.seconds ? yt(this.nanoseconds, t.nanoseconds) : yt(this.seconds, t.seconds);\n    }\n    /**\n     * Returns true if this `Timestamp` is equal to the provided one.\n     *\n     * @param other - The `Timestamp` to compare against.\n     * @returns true if this `Timestamp` is equal to the provided one.\n     */    isEqual(t) {\n        return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;\n    }\n    /** Returns a textual representation of this `Timestamp`. */    toString() {\n        return \"Timestamp(seconds=\" + this.seconds + \", nanoseconds=\" + this.nanoseconds + \")\";\n    }\n    /** Returns a JSON-serializable representation of this `Timestamp`. */    toJSON() {\n        return {\n            seconds: this.seconds,\n            nanoseconds: this.nanoseconds\n        };\n    }\n    /**\n     * Converts this object to a primitive string, which allows `Timestamp` objects\n     * to be compared using the `>`, `<=`, `>=` and `>` operators.\n     */    valueOf() {\n        // This method returns a string of the form <seconds>.<nanoseconds> where\n        // <seconds> is translated to have a non-negative value and both <seconds>\n        // and <nanoseconds> are left-padded with zeroes to be a consistent length.\n        // Strings with this format then have a lexiographical ordering that matches\n        // the expected ordering. The <seconds> translation is done to avoid having\n        // a leading negative sign (i.e. a leading '-' character) in its string\n        // representation, which would affect its lexiographical ordering.\n        const t = this.seconds - -62135596800;\n        // Note: Up to 12 decimal digits are required to represent all valid\n        // 'seconds' values.\n                return String(t).padStart(12, \"0\") + \".\" + String(this.nanoseconds).padStart(9, \"0\");\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */ class vt {\n    constructor(t) {\n        this.timestamp = t;\n    }\n    static fromTimestamp(t) {\n        return new vt(t);\n    }\n    static min() {\n        return new vt(new gt(0, 0));\n    }\n    static max() {\n        return new vt(new gt(253402300799, 999999999));\n    }\n    compareTo(t) {\n        return this.timestamp._compareTo(t.timestamp);\n    }\n    isEqual(t) {\n        return this.timestamp.isEqual(t.timestamp);\n    }\n    /** Returns a number representation of the version for use in spec tests. */    toMicroseconds() {\n        // Convert to microseconds.\n        return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;\n    }\n    toString() {\n        return \"SnapshotVersion(\" + this.timestamp.toString() + \")\";\n    }\n    toTimestamp() {\n        return this.timestamp;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function bt(t) {\n    let e = 0;\n    for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e++;\n    return e;\n}\n\nfunction Et(t, e) {\n    for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nclass Tt {\n    constructor(t, e) {\n        this.comparator = t, this.root = e || At.EMPTY;\n    }\n    // Returns a copy of the map, with the specified key/value added or replaced.\n    insert(t, e) {\n        return new Tt(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, At.BLACK, null, null));\n    }\n    // Returns a copy of the map, with the specified key removed.\n    remove(t) {\n        return new Tt(this.comparator, this.root.remove(t, this.comparator).copy(null, null, At.BLACK, null, null));\n    }\n    // Returns the value of the node with the given key, or null.\n    get(t) {\n        let e = this.root;\n        for (;!e.isEmpty(); ) {\n            const n = this.comparator(t, e.key);\n            if (0 === n) return e.value;\n            n < 0 ? e = e.left : n > 0 && (e = e.right);\n        }\n        return null;\n    }\n    // Returns the index of the element in this sorted map, or -1 if it doesn't\n    // exist.\n    indexOf(t) {\n        // Number of nodes that were pruned when descending right\n        let e = 0, n = this.root;\n        for (;!n.isEmpty(); ) {\n            const r = this.comparator(t, n.key);\n            if (0 === r) return e + n.left.size;\n            r < 0 ? n = n.left : (\n            // Count all nodes left of the node plus the node itself\n            e += n.left.size + 1, n = n.right);\n        }\n        // Node not found\n                return -1;\n    }\n    isEmpty() {\n        return this.root.isEmpty();\n    }\n    // Returns the total number of nodes in the map.\n    get size() {\n        return this.root.size;\n    }\n    // Returns the minimum key in the map.\n    minKey() {\n        return this.root.minKey();\n    }\n    // Returns the maximum key in the map.\n    maxKey() {\n        return this.root.maxKey();\n    }\n    // Traverses the map in key order and calls the specified action function\n    // for each key/value pair. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    inorderTraversal(t) {\n        return this.root.inorderTraversal(t);\n    }\n    forEach(t) {\n        this.inorderTraversal(((e, n) => (t(e, n), !1)));\n    }\n    toString() {\n        const t = [];\n        return this.inorderTraversal(((e, n) => (t.push(`${e}:${n}`), !1))), `{${t.join(\", \")}}`;\n    }\n    // Traverses the map in reverse key order and calls the specified action\n    // function for each key/value pair. If action returns true, traversal is\n    // aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    reverseTraversal(t) {\n        return this.root.reverseTraversal(t);\n    }\n    // Returns an iterator over the SortedMap.\n    getIterator() {\n        return new It(this.root, null, this.comparator, !1);\n    }\n    getIteratorFrom(t) {\n        return new It(this.root, t, this.comparator, !1);\n    }\n    getReverseIterator() {\n        return new It(this.root, null, this.comparator, !0);\n    }\n    getReverseIteratorFrom(t) {\n        return new It(this.root, t, this.comparator, !0);\n    }\n}\n\n // end SortedMap\n// An iterator over an LLRBNode.\nclass It {\n    constructor(t, e, n, r) {\n        this.isReverse = r, this.nodeStack = [];\n        let s = 1;\n        for (;!t.isEmpty(); ) if (s = e ? n(t.key, e) : 1, \n        // flip the comparison if we're going in reverse\n        e && r && (s *= -1), s < 0) \n        // This node is less than our start key. ignore it\n        t = this.isReverse ? t.left : t.right; else {\n            if (0 === s) {\n                // This node is exactly equal to our start key. Push it on the stack,\n                // but stop iterating;\n                this.nodeStack.push(t);\n                break;\n            }\n            // This node is greater than our start key, add it to the stack and move\n            // to the next one\n            this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;\n        }\n    }\n    getNext() {\n        let t = this.nodeStack.pop();\n        const e = {\n            key: t.key,\n            value: t.value\n        };\n        if (this.isReverse) for (t = t.left; !t.isEmpty(); ) this.nodeStack.push(t), t = t.right; else for (t = t.right; !t.isEmpty(); ) this.nodeStack.push(t), \n        t = t.left;\n        return e;\n    }\n    hasNext() {\n        return this.nodeStack.length > 0;\n    }\n    peek() {\n        if (0 === this.nodeStack.length) return null;\n        const t = this.nodeStack[this.nodeStack.length - 1];\n        return {\n            key: t.key,\n            value: t.value\n        };\n    }\n}\n\n // end SortedMapIterator\n// Represents a node in a Left-leaning Red-Black tree.\nclass At {\n    constructor(t, e, n, r, s) {\n        this.key = t, this.value = e, this.color = null != n ? n : At.RED, this.left = null != r ? r : At.EMPTY, \n        this.right = null != s ? s : At.EMPTY, this.size = this.left.size + 1 + this.right.size;\n    }\n    // Returns a copy of the current node, optionally replacing pieces of it.\n    copy(t, e, n, r, s) {\n        return new At(null != t ? t : this.key, null != e ? e : this.value, null != n ? n : this.color, null != r ? r : this.left, null != s ? s : this.right);\n    }\n    isEmpty() {\n        return !1;\n    }\n    // Traverses the tree in key order and calls the specified action function\n    // for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    inorderTraversal(t) {\n        return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);\n    }\n    // Traverses the tree in reverse key order and calls the specified action\n    // function for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    reverseTraversal(t) {\n        return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);\n    }\n    // Returns the minimum node in the tree.\n    min() {\n        return this.left.isEmpty() ? this : this.left.min();\n    }\n    // Returns the maximum key in the tree.\n    minKey() {\n        return this.min().key;\n    }\n    // Returns the maximum key in the tree.\n    maxKey() {\n        return this.right.isEmpty() ? this.key : this.right.maxKey();\n    }\n    // Returns new tree, with the key/value added.\n    insert(t, e, n) {\n        let r = this;\n        const s = n(t, r.key);\n        return r = s < 0 ? r.copy(null, null, null, r.left.insert(t, e, n), null) : 0 === s ? r.copy(null, e, null, null, null) : r.copy(null, null, null, null, r.right.insert(t, e, n)), \n        r.fixUp();\n    }\n    removeMin() {\n        if (this.left.isEmpty()) return At.EMPTY;\n        let t = this;\n        return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), \n        t.fixUp();\n    }\n    // Returns new tree, with the specified item removed.\n    remove(t, e) {\n        let n, r = this;\n        if (e(t, r.key) < 0) r.left.isEmpty() || r.left.isRed() || r.left.left.isRed() || (r = r.moveRedLeft()), \n        r = r.copy(null, null, null, r.left.remove(t, e), null); else {\n            if (r.left.isRed() && (r = r.rotateRight()), r.right.isEmpty() || r.right.isRed() || r.right.left.isRed() || (r = r.moveRedRight()), \n            0 === e(t, r.key)) {\n                if (r.right.isEmpty()) return At.EMPTY;\n                n = r.right.min(), r = r.copy(n.key, n.value, null, null, r.right.removeMin());\n            }\n            r = r.copy(null, null, null, null, r.right.remove(t, e));\n        }\n        return r.fixUp();\n    }\n    isRed() {\n        return this.color;\n    }\n    // Returns new tree after performing any needed rotations.\n    fixUp() {\n        let t = this;\n        return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), \n        t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;\n    }\n    moveRedLeft() {\n        let t = this.colorFlip();\n        return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), \n        t = t.rotateLeft(), t = t.colorFlip()), t;\n    }\n    moveRedRight() {\n        let t = this.colorFlip();\n        return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;\n    }\n    rotateLeft() {\n        const t = this.copy(null, null, At.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, t, null);\n    }\n    rotateRight() {\n        const t = this.copy(null, null, At.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, t);\n    }\n    colorFlip() {\n        const t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, t, e);\n    }\n    // For testing.\n    checkMaxDepth() {\n        const t = this.check();\n        return Math.pow(2, t) <= this.size + 1;\n    }\n    // In a balanced RB tree, the black-depth (number of black nodes) from root to\n    // leaves is equal on both sides.  This function verifies that or asserts.\n    check() {\n        if (this.isRed() && this.left.isRed()) throw g();\n        if (this.right.isRed()) throw g();\n        const t = this.left.check();\n        if (t !== this.right.check()) throw g();\n        return t + (this.isRed() ? 0 : 1);\n    }\n}\n\n // end LLRBNode\n// Empty node is shared between all LLRB trees.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nAt.EMPTY = null, At.RED = !0, At.BLACK = !1;\n\n// end LLRBEmptyNode\nAt.EMPTY = new \n// Represents an empty node (a leaf node in the Red-Black Tree).\nclass {\n    constructor() {\n        this.size = 0;\n    }\n    get key() {\n        throw g();\n    }\n    get value() {\n        throw g();\n    }\n    get color() {\n        throw g();\n    }\n    get left() {\n        throw g();\n    }\n    get right() {\n        throw g();\n    }\n    // Returns a copy of the current node.\n    copy(t, e, n, r, s) {\n        return this;\n    }\n    // Returns a copy of the tree, with the specified key/value added.\n    insert(t, e, n) {\n        return new At(t, e);\n    }\n    // Returns a copy of the tree, with the specified key removed.\n    remove(t, e) {\n        return this;\n    }\n    isEmpty() {\n        return !0;\n    }\n    inorderTraversal(t) {\n        return !1;\n    }\n    reverseTraversal(t) {\n        return !1;\n    }\n    minKey() {\n        return null;\n    }\n    maxKey() {\n        return null;\n    }\n    isRed() {\n        return !1;\n    }\n    // For testing.\n    checkMaxDepth() {\n        return !0;\n    }\n    check() {\n        return 0;\n    }\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nclass Rt {\n    constructor(t) {\n        this.comparator = t, this.data = new Tt(this.comparator);\n    }\n    has(t) {\n        return null !== this.data.get(t);\n    }\n    first() {\n        return this.data.minKey();\n    }\n    last() {\n        return this.data.maxKey();\n    }\n    get size() {\n        return this.data.size;\n    }\n    indexOf(t) {\n        return this.data.indexOf(t);\n    }\n    /** Iterates elements in order defined by \"comparator\" */    forEach(t) {\n        this.data.inorderTraversal(((e, n) => (t(e), !1)));\n    }\n    /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */    forEachInRange(t, e) {\n        const n = this.data.getIteratorFrom(t[0]);\n        for (;n.hasNext(); ) {\n            const r = n.getNext();\n            if (this.comparator(r.key, t[1]) >= 0) return;\n            e(r.key);\n        }\n    }\n    /**\n     * Iterates over `elem`s such that: start &lt;= elem until false is returned.\n     */    forEachWhile(t, e) {\n        let n;\n        for (n = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); n.hasNext(); ) {\n            if (!t(n.getNext().key)) return;\n        }\n    }\n    /** Finds the least element greater than or equal to `elem`. */    firstAfterOrEqual(t) {\n        const e = this.data.getIteratorFrom(t);\n        return e.hasNext() ? e.getNext().key : null;\n    }\n    getIterator() {\n        return new Pt(this.data.getIterator());\n    }\n    getIteratorFrom(t) {\n        return new Pt(this.data.getIteratorFrom(t));\n    }\n    /** Inserts or updates an element */    add(t) {\n        return this.copy(this.data.remove(t).insert(t, !0));\n    }\n    /** Deletes an element */    delete(t) {\n        return this.has(t) ? this.copy(this.data.remove(t)) : this;\n    }\n    isEmpty() {\n        return this.data.isEmpty();\n    }\n    unionWith(t) {\n        let e = this;\n        // Make sure `result` always refers to the larger one of the two sets.\n                return e.size < t.size && (e = t, t = this), t.forEach((t => {\n            e = e.add(t);\n        })), e;\n    }\n    isEqual(t) {\n        if (!(t instanceof Rt)) return !1;\n        if (this.size !== t.size) return !1;\n        const e = this.data.getIterator(), n = t.data.getIterator();\n        for (;e.hasNext(); ) {\n            const t = e.getNext().key, r = n.getNext().key;\n            if (0 !== this.comparator(t, r)) return !1;\n        }\n        return !0;\n    }\n    toArray() {\n        const t = [];\n        return this.forEach((e => {\n            t.push(e);\n        })), t;\n    }\n    toString() {\n        const t = [];\n        return this.forEach((e => t.push(e))), \"SortedSet(\" + t.toString() + \")\";\n    }\n    copy(t) {\n        const e = new Rt(this.comparator);\n        return e.data = t, e;\n    }\n}\n\nclass Pt {\n    constructor(t) {\n        this.iter = t;\n    }\n    getNext() {\n        return this.iter.getNext().key;\n    }\n    hasNext() {\n        return this.iter.hasNext();\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */ class Vt {\n    constructor(t) {\n        this.fields = t, \n        // TODO(dimond): validation of FieldMask\n        // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n        t.sort(tt.comparator);\n    }\n    static empty() {\n        return new Vt([]);\n    }\n    /**\n     * Returns a new FieldMask object that is the result of adding all the given\n     * fields paths to this field mask.\n     */    unionWith(t) {\n        let e = new Rt(tt.comparator);\n        for (const t of this.fields) e = e.add(t);\n        for (const n of t) e = e.add(n);\n        return new Vt(e.toArray());\n    }\n    /**\n     * Verifies that `fieldPath` is included by at least one field in this field\n     * mask.\n     *\n     * This is an O(n) operation, where `n` is the size of the field mask.\n     */    covers(t) {\n        for (const e of this.fields) if (e.isPrefixOf(t)) return !0;\n        return !1;\n    }\n    isEqual(t) {\n        return _t(this.fields, t.fields, ((t, e) => t.isEqual(e)));\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Converts a Base64 encoded string to a binary string. */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n * @internal\n */\nclass Nt {\n    constructor(t) {\n        this.binaryString = t;\n    }\n    static fromBase64String(t) {\n        const e = atob(t);\n        return new Nt(e);\n    }\n    static fromUint8Array(t) {\n        // TODO(indexing); Remove the copy of the byte string here as this method\n        // is frequently called during indexing.\n        const e = \n        /**\n * Helper function to convert an Uint8array to a binary string.\n */\n        function(t) {\n            let e = \"\";\n            for (let n = 0; n < t.length; ++n) e += String.fromCharCode(t[n]);\n            return e;\n        }\n        /**\n * Helper function to convert a binary string to an Uint8Array.\n */ (t);\n        return new Nt(e);\n    }\n    [Symbol.iterator]() {\n        let t = 0;\n        return {\n            next: () => t < this.binaryString.length ? {\n                value: this.binaryString.charCodeAt(t++),\n                done: !1\n            } : {\n                value: void 0,\n                done: !0\n            }\n        };\n    }\n    toBase64() {\n        return t = this.binaryString, btoa(t);\n        /** Converts a binary string to a Base64 encoded string. */\n        var t;\n    }\n    toUint8Array() {\n        return function(t) {\n            const e = new Uint8Array(t.length);\n            for (let n = 0; n < t.length; n++) e[n] = t.charCodeAt(n);\n            return e;\n        }\n        /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n        // A RegExp matching ISO 8601 UTC timestamps with optional fraction.\n        (this.binaryString);\n    }\n    approximateByteSize() {\n        return 2 * this.binaryString.length;\n    }\n    compareTo(t) {\n        return yt(this.binaryString, t.binaryString);\n    }\n    isEqual(t) {\n        return this.binaryString === t.binaryString;\n    }\n}\n\nNt.EMPTY_BYTE_STRING = new Nt(\"\");\n\nconst Dt = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\n\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */ function $t(t) {\n    // The json interface (for the browser) will return an iso timestamp string,\n    // while the proto js library (for node) will return a\n    // google.protobuf.Timestamp instance.\n    if (v(!!t), \"string\" == typeof t) {\n        // The date string can have higher precision (nanos) than the Date class\n        // (millis), so we do some custom parsing here.\n        // Parse the nanos right out of the string.\n        let e = 0;\n        const n = Dt.exec(t);\n        if (v(!!n), n[1]) {\n            // Pad the fraction out to 9 digits (nanos).\n            let t = n[1];\n            t = (t + \"000000000\").substr(0, 9), e = Number(t);\n        }\n        // Parse the date to get the seconds.\n                const r = new Date(t);\n        return {\n            seconds: Math.floor(r.getTime() / 1e3),\n            nanos: e\n        };\n    }\n    return {\n        seconds: xt(t.seconds),\n        nanos: xt(t.nanos)\n    };\n}\n\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */ function xt(t) {\n    // TODO(bjornick): Handle int64 greater than 53 bits.\n    return \"number\" == typeof t ? t : \"string\" == typeof t ? Number(t) : 0;\n}\n\n/** Converts the possible Proto types for Blobs into a ByteString. */ function Ft(t) {\n    return \"string\" == typeof t ? Nt.fromBase64String(t) : Nt.fromUint8Array(t);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   transform. They can only exist in the local view of a document. Therefore\n *   they do not need to be parsed or serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */ function St(t) {\n    var e, n;\n    return \"server_timestamp\" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);\n}\n\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */ function qt(t) {\n    const e = t.mapValue.fields.__previous_value__;\n    return St(e) ? qt(e) : e;\n}\n\n/**\n * Returns the local time at which this timestamp was first set.\n */ function Ot(t) {\n    const e = $t(t.mapValue.fields.__local_write_time__.timestampValue);\n    return new gt(e.seconds, e.nanos);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const kt = {\n    fields: {\n        __type__: {\n            stringValue: \"__max__\"\n        }\n    }\n};\n\n/** Extracts the backend's type order for the provided value. */\nfunction Ct(t) {\n    return \"nullValue\" in t ? 0 /* NullValue */ : \"booleanValue\" in t ? 1 /* BooleanValue */ : \"integerValue\" in t || \"doubleValue\" in t ? 2 /* NumberValue */ : \"timestampValue\" in t ? 3 /* TimestampValue */ : \"stringValue\" in t ? 5 /* StringValue */ : \"bytesValue\" in t ? 6 /* BlobValue */ : \"referenceValue\" in t ? 7 /* RefValue */ : \"geoPointValue\" in t ? 8 /* GeoPointValue */ : \"arrayValue\" in t ? 9 /* ArrayValue */ : \"mapValue\" in t ? St(t) ? 4 /* ServerTimestampValue */ : \n    /** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */\n    function(t) {\n        return \"__max__\" === (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue;\n    }\n    /**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n    /**\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n * ability to add and remove fields (via the ObjectValueBuilder).\n */ (t) ? 9007199254740991 /* MaxValue */ : 10 /* ObjectValue */ : g();\n}\n\n/** Tests `left` and `right` for equality based on the backend semantics. */ function Lt(t, e) {\n    if (t === e) return !0;\n    const n = Ct(t);\n    if (n !== Ct(e)) return !1;\n    switch (n) {\n      case 0 /* NullValue */ :\n      case 9007199254740991 /* MaxValue */ :\n        return !0;\n\n      case 1 /* BooleanValue */ :\n        return t.booleanValue === e.booleanValue;\n\n      case 4 /* ServerTimestampValue */ :\n        return Ot(t).isEqual(Ot(e));\n\n      case 3 /* TimestampValue */ :\n        return function(t, e) {\n            if (\"string\" == typeof t.timestampValue && \"string\" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) \n            // Use string equality for ISO 8601 timestamps\n            return t.timestampValue === e.timestampValue;\n            const n = $t(t.timestampValue), r = $t(e.timestampValue);\n            return n.seconds === r.seconds && n.nanos === r.nanos;\n        }(t, e);\n\n      case 5 /* StringValue */ :\n        return t.stringValue === e.stringValue;\n\n      case 6 /* BlobValue */ :\n        return function(t, e) {\n            return Ft(t.bytesValue).isEqual(Ft(e.bytesValue));\n        }(t, e);\n\n      case 7 /* RefValue */ :\n        return t.referenceValue === e.referenceValue;\n\n      case 8 /* GeoPointValue */ :\n        return function(t, e) {\n            return xt(t.geoPointValue.latitude) === xt(e.geoPointValue.latitude) && xt(t.geoPointValue.longitude) === xt(e.geoPointValue.longitude);\n        }(t, e);\n\n      case 2 /* NumberValue */ :\n        return function(t, e) {\n            if (\"integerValue\" in t && \"integerValue\" in e) return xt(t.integerValue) === xt(e.integerValue);\n            if (\"doubleValue\" in t && \"doubleValue\" in e) {\n                const n = xt(t.doubleValue), r = xt(e.doubleValue);\n                return n === r ? at(n) === at(r) : isNaN(n) && isNaN(r);\n            }\n            return !1;\n        }(t, e);\n\n      case 9 /* ArrayValue */ :\n        return _t(t.arrayValue.values || [], e.arrayValue.values || [], Lt);\n\n      case 10 /* ObjectValue */ :\n        return function(t, e) {\n            const n = t.mapValue.fields || {}, r = e.mapValue.fields || {};\n            if (bt(n) !== bt(r)) return !1;\n            for (const t in n) if (n.hasOwnProperty(t) && (void 0 === r[t] || !Lt(n[t], r[t]))) return !1;\n            return !0;\n        }\n        /** Returns true if the ArrayValue contains the specified element. */ (t, e);\n\n      default:\n        return g();\n    }\n}\n\nfunction Mt(t, e) {\n    return void 0 !== (t.values || []).find((t => Lt(t, e)));\n}\n\nfunction Ut(t, e) {\n    if (t === e) return 0;\n    const n = Ct(t), r = Ct(e);\n    if (n !== r) return yt(n, r);\n    switch (n) {\n      case 0 /* NullValue */ :\n      case 9007199254740991 /* MaxValue */ :\n        return 0;\n\n      case 1 /* BooleanValue */ :\n        return yt(t.booleanValue, e.booleanValue);\n\n      case 2 /* NumberValue */ :\n        return function(t, e) {\n            const n = xt(t.integerValue || t.doubleValue), r = xt(e.integerValue || e.doubleValue);\n            return n < r ? -1 : n > r ? 1 : n === r ? 0 : \n            // one or both are NaN.\n            isNaN(n) ? isNaN(r) ? 0 : -1 : 1;\n        }(t, e);\n\n      case 3 /* TimestampValue */ :\n        return jt(t.timestampValue, e.timestampValue);\n\n      case 4 /* ServerTimestampValue */ :\n        return jt(Ot(t), Ot(e));\n\n      case 5 /* StringValue */ :\n        return yt(t.stringValue, e.stringValue);\n\n      case 6 /* BlobValue */ :\n        return function(t, e) {\n            const n = Ft(t), r = Ft(e);\n            return n.compareTo(r);\n        }(t.bytesValue, e.bytesValue);\n\n      case 7 /* RefValue */ :\n        return function(t, e) {\n            const n = t.split(\"/\"), r = e.split(\"/\");\n            for (let t = 0; t < n.length && t < r.length; t++) {\n                const e = yt(n[t], r[t]);\n                if (0 !== e) return e;\n            }\n            return yt(n.length, r.length);\n        }(t.referenceValue, e.referenceValue);\n\n      case 8 /* GeoPointValue */ :\n        return function(t, e) {\n            const n = yt(xt(t.latitude), xt(e.latitude));\n            if (0 !== n) return n;\n            return yt(xt(t.longitude), xt(e.longitude));\n        }(t.geoPointValue, e.geoPointValue);\n\n      case 9 /* ArrayValue */ :\n        return function(t, e) {\n            const n = t.values || [], r = e.values || [];\n            for (let t = 0; t < n.length && t < r.length; ++t) {\n                const e = Ut(n[t], r[t]);\n                if (e) return e;\n            }\n            return yt(n.length, r.length);\n        }(t.arrayValue, e.arrayValue);\n\n      case 10 /* ObjectValue */ :\n        return function(t, e) {\n            if (t === kt && e === kt) return 0;\n            if (t === kt) return 1;\n            if (e === kt) return -1;\n            const n = t.fields || {}, r = Object.keys(n), s = e.fields || {}, i = Object.keys(s);\n            // Even though MapValues are likely sorted correctly based on their insertion\n            // order (e.g. when received from the backend), local modifications can bring\n            // elements out of order. We need to re-sort the elements to ensure that\n            // canonical IDs are independent of insertion order.\n            r.sort(), i.sort();\n            for (let t = 0; t < r.length && t < i.length; ++t) {\n                const e = yt(r[t], i[t]);\n                if (0 !== e) return e;\n                const o = Ut(n[r[t]], s[i[t]]);\n                if (0 !== o) return o;\n            }\n            return yt(r.length, i.length);\n        }\n        /** Returns a reference value for the provided database and key. */ (t.mapValue, e.mapValue);\n\n      default:\n        throw g();\n    }\n}\n\nfunction jt(t, e) {\n    if (\"string\" == typeof t && \"string\" == typeof e && t.length === e.length) return yt(t, e);\n    const n = $t(t), r = $t(e), s = yt(n.seconds, r.seconds);\n    return 0 !== s ? s : yt(n.nanos, r.nanos);\n}\n\nfunction Bt(t, e) {\n    return {\n        referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${e.path.canonicalString()}`\n    };\n}\n\n/** Returns true if `value` is an ArrayValue. */ function zt(t) {\n    return !!t && \"arrayValue\" in t;\n}\n\n/** Returns true if `value` is a NullValue. */ function Gt(t) {\n    return !!t && \"nullValue\" in t;\n}\n\n/** Returns true if `value` is NaN. */ function Wt(t) {\n    return !!t && \"doubleValue\" in t && isNaN(Number(t.doubleValue));\n}\n\n/** Returns true if `value` is a MapValue. */ function Kt(t) {\n    return !!t && \"mapValue\" in t;\n}\n\n/** Creates a deep copy of `source`. */ function Qt(t) {\n    if (t.geoPointValue) return {\n        geoPointValue: Object.assign({}, t.geoPointValue)\n    };\n    if (t.timestampValue && \"object\" == typeof t.timestampValue) return {\n        timestampValue: Object.assign({}, t.timestampValue)\n    };\n    if (t.mapValue) {\n        const e = {\n            mapValue: {\n                fields: {}\n            }\n        };\n        return Et(t.mapValue.fields, ((t, n) => e.mapValue.fields[t] = Qt(n))), e;\n    }\n    if (t.arrayValue) {\n        const e = {\n            arrayValue: {\n                values: []\n            }\n        };\n        for (let n = 0; n < (t.arrayValue.values || []).length; ++n) e.arrayValue.values[n] = Qt(t.arrayValue.values[n]);\n        return e;\n    }\n    return Object.assign({}, t);\n}\n\nclass Yt {\n    constructor(t) {\n        this.value = t;\n    }\n    static empty() {\n        return new Yt({\n            mapValue: {}\n        });\n    }\n    /**\n     * Returns the value at the given path or null.\n     *\n     * @param path - the path to search\n     * @returns The value at the path or null if the path is not set.\n     */    field(t) {\n        if (t.isEmpty()) return this.value;\n        {\n            let e = this.value;\n            for (let n = 0; n < t.length - 1; ++n) if (e = (e.mapValue.fields || {})[t.get(n)], \n            !Kt(e)) return null;\n            return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;\n        }\n    }\n    /**\n     * Sets the field to the provided value.\n     *\n     * @param path - The field path to set.\n     * @param value - The value to set.\n     */    set(t, e) {\n        this.getFieldsMap(t.popLast())[t.lastSegment()] = Qt(e);\n    }\n    /**\n     * Sets the provided fields to the provided values.\n     *\n     * @param data - A map of fields to values (or null for deletes).\n     */    setAll(t) {\n        let e = tt.emptyPath(), n = {}, r = [];\n        t.forEach(((t, s) => {\n            if (!e.isImmediateParentOf(s)) {\n                // Insert the accumulated changes at this parent location\n                const t = this.getFieldsMap(e);\n                this.applyChanges(t, n, r), n = {}, r = [], e = s.popLast();\n            }\n            t ? n[s.lastSegment()] = Qt(t) : r.push(s.lastSegment());\n        }));\n        const s = this.getFieldsMap(e);\n        this.applyChanges(s, n, r);\n    }\n    /**\n     * Removes the field at the specified path. If there is no field at the\n     * specified path, nothing is changed.\n     *\n     * @param path - The field path to remove.\n     */    delete(t) {\n        const e = this.field(t.popLast());\n        Kt(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];\n    }\n    isEqual(t) {\n        return Lt(this.value, t.value);\n    }\n    /**\n     * Returns the map that contains the leaf element of `path`. If the parent\n     * entry does not yet exist, or if it is not a map, a new map will be created.\n     */    getFieldsMap(t) {\n        let e = this.value;\n        e.mapValue.fields || (e.mapValue = {\n            fields: {}\n        });\n        for (let n = 0; n < t.length; ++n) {\n            let r = e.mapValue.fields[t.get(n)];\n            Kt(r) && r.mapValue.fields || (r = {\n                mapValue: {\n                    fields: {}\n                }\n            }, e.mapValue.fields[t.get(n)] = r), e = r;\n        }\n        return e.mapValue.fields;\n    }\n    /**\n     * Modifies `fieldsMap` by adding, replacing or deleting the specified\n     * entries.\n     */    applyChanges(t, e, n) {\n        Et(e, ((e, n) => t[e] = n));\n        for (const e of n) delete t[e];\n    }\n    clone() {\n        return new Yt(Qt(this.value));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a document in Firestore with a key, version, data and whether it\n * has local mutations applied to it.\n *\n * Documents can transition between states via `convertToFoundDocument()`,\n * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does\n * not transition to one of these states even after all mutations have been\n * applied, `isValidDocument()` returns false and the document should be removed\n * from all views.\n */ class Ht {\n    constructor(t, e, n, r, s, i) {\n        this.key = t, this.documentType = e, this.version = n, this.readTime = r, this.data = s, \n        this.documentState = i;\n    }\n    /**\n     * Creates a document with no known version or data, but which can serve as\n     * base document for mutations.\n     */    static newInvalidDocument(t) {\n        return new Ht(t, 0 /* INVALID */ , vt.min(), vt.min(), Yt.empty(), 0 /* SYNCED */);\n    }\n    /**\n     * Creates a new document that is known to exist with the given data at the\n     * given version.\n     */    static newFoundDocument(t, e, n) {\n        return new Ht(t, 1 /* FOUND_DOCUMENT */ , e, vt.min(), n, 0 /* SYNCED */);\n    }\n    /** Creates a new document that is known to not exist at the given version. */    static newNoDocument(t, e) {\n        return new Ht(t, 2 /* NO_DOCUMENT */ , e, vt.min(), Yt.empty(), 0 /* SYNCED */);\n    }\n    /**\n     * Creates a new document that is known to exist at the given version but\n     * whose data is not known (e.g. a document that was updated without a known\n     * base document).\n     */    static newUnknownDocument(t, e) {\n        return new Ht(t, 3 /* UNKNOWN_DOCUMENT */ , e, vt.min(), Yt.empty(), 2 /* HAS_COMMITTED_MUTATIONS */);\n    }\n    /**\n     * Changes the document type to indicate that it exists and that its version\n     * and data are known.\n     */    convertToFoundDocument(t, e) {\n        return this.version = t, this.documentType = 1 /* FOUND_DOCUMENT */ , this.data = e, \n        this.documentState = 0 /* SYNCED */ , this;\n    }\n    /**\n     * Changes the document type to indicate that it doesn't exist at the given\n     * version.\n     */    convertToNoDocument(t) {\n        return this.version = t, this.documentType = 2 /* NO_DOCUMENT */ , this.data = Yt.empty(), \n        this.documentState = 0 /* SYNCED */ , this;\n    }\n    /**\n     * Changes the document type to indicate that it exists at a given version but\n     * that its data is not known (e.g. a document that was updated without a known\n     * base document).\n     */    convertToUnknownDocument(t) {\n        return this.version = t, this.documentType = 3 /* UNKNOWN_DOCUMENT */ , this.data = Yt.empty(), \n        this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;\n    }\n    setHasCommittedMutations() {\n        return this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;\n    }\n    setHasLocalMutations() {\n        return this.documentState = 1 /* HAS_LOCAL_MUTATIONS */ , this.version = vt.min(), \n        this;\n    }\n    setReadTime(t) {\n        return this.readTime = t, this;\n    }\n    get hasLocalMutations() {\n        return 1 /* HAS_LOCAL_MUTATIONS */ === this.documentState;\n    }\n    get hasCommittedMutations() {\n        return 2 /* HAS_COMMITTED_MUTATIONS */ === this.documentState;\n    }\n    get hasPendingWrites() {\n        return this.hasLocalMutations || this.hasCommittedMutations;\n    }\n    isValidDocument() {\n        return 0 /* INVALID */ !== this.documentType;\n    }\n    isFoundDocument() {\n        return 1 /* FOUND_DOCUMENT */ === this.documentType;\n    }\n    isNoDocument() {\n        return 2 /* NO_DOCUMENT */ === this.documentType;\n    }\n    isUnknownDocument() {\n        return 3 /* UNKNOWN_DOCUMENT */ === this.documentType;\n    }\n    isEqual(t) {\n        return t instanceof Ht && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);\n    }\n    mutableCopy() {\n        return new Ht(this.key, this.documentType, this.version, this.readTime, this.data.clone(), this.documentState);\n    }\n    toString() {\n        return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Visible for testing\nclass Jt {\n    constructor(t, e = null, n = [], r = [], s = null, i = null, o = null) {\n        this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = r, this.limit = s, \n        this.startAt = i, this.endAt = o, this.D = null;\n    }\n}\n\n/**\n * Initializes a Target with a path and optional additional query constraints.\n * Path must currently be empty if this is a collection group query.\n *\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n * using this factory method, because `Query` provides an implicit `orderBy`\n * property.\n */ function Xt(t, e = null, n = [], r = [], s = null, i = null, o = null) {\n    return new Jt(t, e, n, r, s, i, o);\n}\n\nclass Zt extends class {} {\n    constructor(t, e, n) {\n        super(), this.field = t, this.op = e, this.value = n;\n    }\n    /**\n     * Creates a filter based on the provided arguments.\n     */    static create(t, e, n) {\n        return t.isKeyField() ? \"in\" /* IN */ === e || \"not-in\" /* NOT_IN */ === e ? this.$(t, e, n) : new te(t, e, n) : \"array-contains\" /* ARRAY_CONTAINS */ === e ? new se(t, n) : \"in\" /* IN */ === e ? new ie(t, n) : \"not-in\" /* NOT_IN */ === e ? new oe(t, n) : \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ === e ? new ue(t, n) : new Zt(t, e, n);\n    }\n    static $(t, e, n) {\n        return \"in\" /* IN */ === e ? new ee(t, n) : new ne(t, n);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        // Types do not have to match in NOT_EQUAL filters.\n                return \"!=\" /* NOT_EQUAL */ === this.op ? null !== e && this.F(Ut(e, this.value)) : null !== e && Ct(this.value) === Ct(e) && this.F(Ut(e, this.value));\n        // Only compare types with matching backend order (such as double and int).\n        }\n    F(t) {\n        switch (this.op) {\n          case \"<\" /* LESS_THAN */ :\n            return t < 0;\n\n          case \"<=\" /* LESS_THAN_OR_EQUAL */ :\n            return t <= 0;\n\n          case \"==\" /* EQUAL */ :\n            return 0 === t;\n\n          case \"!=\" /* NOT_EQUAL */ :\n            return 0 !== t;\n\n          case \">\" /* GREATER_THAN */ :\n            return t > 0;\n\n          case \">=\" /* GREATER_THAN_OR_EQUAL */ :\n            return t >= 0;\n\n          default:\n            return g();\n        }\n    }\n    S() {\n        return [ \"<\" /* LESS_THAN */ , \"<=\" /* LESS_THAN_OR_EQUAL */ , \">\" /* GREATER_THAN */ , \">=\" /* GREATER_THAN_OR_EQUAL */ , \"!=\" /* NOT_EQUAL */ , \"not-in\" /* NOT_IN */ ].indexOf(this.op) >= 0;\n    }\n}\n\n/** Filter that matches on key fields (i.e. '__name__'). */\nclass te extends Zt {\n    constructor(t, e, n) {\n        super(t, e, n), this.key = et.fromName(n.referenceValue);\n    }\n    matches(t) {\n        const e = et.comparator(t.key, this.key);\n        return this.F(e);\n    }\n}\n\n/** Filter that matches on key fields within an array. */ class ee extends Zt {\n    constructor(t, e) {\n        super(t, \"in\" /* IN */ , e), this.keys = re(\"in\" /* IN */ , e);\n    }\n    matches(t) {\n        return this.keys.some((e => e.isEqual(t.key)));\n    }\n}\n\n/** Filter that matches on key fields not present within an array. */ class ne extends Zt {\n    constructor(t, e) {\n        super(t, \"not-in\" /* NOT_IN */ , e), this.keys = re(\"not-in\" /* NOT_IN */ , e);\n    }\n    matches(t) {\n        return !this.keys.some((e => e.isEqual(t.key)));\n    }\n}\n\nfunction re(t, e) {\n    var n;\n    return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map((t => et.fromName(t.referenceValue)));\n}\n\n/** A Filter that implements the array-contains operator. */ class se extends Zt {\n    constructor(t, e) {\n        super(t, \"array-contains\" /* ARRAY_CONTAINS */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return zt(e) && Mt(e.arrayValue, this.value);\n    }\n}\n\n/** A Filter that implements the IN operator. */ class ie extends Zt {\n    constructor(t, e) {\n        super(t, \"in\" /* IN */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return null !== e && Mt(this.value.arrayValue, e);\n    }\n}\n\n/** A Filter that implements the not-in operator. */ class oe extends Zt {\n    constructor(t, e) {\n        super(t, \"not-in\" /* NOT_IN */ , e);\n    }\n    matches(t) {\n        if (Mt(this.value.arrayValue, {\n            nullValue: \"NULL_VALUE\"\n        })) return !1;\n        const e = t.data.field(this.field);\n        return null !== e && !Mt(this.value.arrayValue, e);\n    }\n}\n\n/** A Filter that implements the array-contains-any operator. */ class ue extends Zt {\n    constructor(t, e) {\n        super(t, \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return !(!zt(e) || !e.arrayValue.values) && e.arrayValue.values.some((t => Mt(this.value.arrayValue, t)));\n    }\n}\n\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */ class ce {\n    constructor(t, e) {\n        this.position = t, this.inclusive = e;\n    }\n}\n\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */ class ae {\n    constructor(t, e = \"asc\" /* ASCENDING */) {\n        this.field = t, this.dir = e;\n    }\n}\n\nfunction he(t, e) {\n    return t.dir === e.dir && t.field.isEqual(e.field);\n}\n\nfunction le(t, e) {\n    if (null === t) return null === e;\n    if (null === e) return !1;\n    if (t.inclusive !== e.inclusive || t.position.length !== e.position.length) return !1;\n    for (let n = 0; n < t.position.length; n++) {\n        if (!Lt(t.position[n], e.position[n])) return !1;\n    }\n    return !0;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n *\n * Visible for testing.\n */ class fe {\n    /**\n     * Initializes a Query with a path and optional additional query constraints.\n     * Path must currently be empty if this is a collection group query.\n     */\n    constructor(t, e = null, n = [], r = [], s = null, i = \"F\" /* First */ , o = null, u = null) {\n        this.path = t, this.collectionGroup = e, this.explicitOrderBy = n, this.filters = r, \n        this.limit = s, this.limitType = i, this.startAt = o, this.endAt = u, this.q = null, \n        // The corresponding `Target` of this `Query` instance.\n        this.O = null, this.startAt, this.endAt;\n    }\n}\n\n/** Creates a new Query for a query that matches all documents at `path` */ function de(t) {\n    return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;\n}\n\nfunction we(t) {\n    for (const e of t.filters) if (e.S()) return e.field;\n    return null;\n}\n\n/**\n * Checks if any of the provided Operators are included in the query and\n * returns the first one that is, or null if none are.\n */\n/**\n * Returns whether the query matches a collection group rather than a specific\n * collection.\n */\nfunction me(t) {\n    return null !== t.collectionGroup;\n}\n\n/**\n * Returns the implicit order by constraint that is used to execute the Query,\n * which can be different from the order by constraints the user provided (e.g.\n * the SDK and backend always orders by `__name__`).\n */ function pe(t) {\n    const e = b(t);\n    if (null === e.q) {\n        e.q = [];\n        const t = we(e), n = de(e);\n        if (null !== t && null === n) \n        // In order to implicitly add key ordering, we must also add the\n        // inequality filter field for it to be a valid query.\n        // Note that the default inequality field and key ordering is ascending.\n        t.isKeyField() || e.q.push(new ae(t)), e.q.push(new ae(tt.keyField(), \"asc\" /* ASCENDING */)); else {\n            let t = !1;\n            for (const n of e.explicitOrderBy) e.q.push(n), n.field.isKeyField() && (t = !0);\n            if (!t) {\n                // The order of the implicit key ordering always matches the last\n                // explicit order by\n                const t = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : \"asc\" /* ASCENDING */;\n                e.q.push(new ae(tt.keyField(), t));\n            }\n        }\n    }\n    return e.q;\n}\n\n/**\n * Converts this `Query` instance to it's corresponding `Target` representation.\n */ function ye(t) {\n    const e = b(t);\n    if (!e.O) if (\"F\" /* First */ === e.limitType) e.O = Xt(e.path, e.collectionGroup, pe(e), e.filters, e.limit, e.startAt, e.endAt); else {\n        // Flip the orderBy directions since we want the last results\n        const t = [];\n        for (const n of pe(e)) {\n            const e = \"desc\" /* DESCENDING */ === n.dir ? \"asc\" /* ASCENDING */ : \"desc\" /* DESCENDING */;\n            t.push(new ae(n.field, e));\n        }\n        // We need to swap the cursors to match the now-flipped query ordering.\n                const n = e.endAt ? new ce(e.endAt.position, e.endAt.inclusive) : null, r = e.startAt ? new ce(e.startAt.position, e.startAt.inclusive) : null;\n        // Now return as a LimitType.First query.\n        e.O = Xt(e.path, e.collectionGroup, t, e.filters, e.limit, n, r);\n    }\n    return e.O;\n}\n\nfunction _e(t, e) {\n    return function(t, e) {\n        if (t.limit !== e.limit) return !1;\n        if (t.orderBy.length !== e.orderBy.length) return !1;\n        for (let n = 0; n < t.orderBy.length; n++) if (!he(t.orderBy[n], e.orderBy[n])) return !1;\n        if (t.filters.length !== e.filters.length) return !1;\n        for (let s = 0; s < t.filters.length; s++) if (n = t.filters[s], r = e.filters[s], \n        n.op !== r.op || !n.field.isEqual(r.field) || !Lt(n.value, r.value)) return !1;\n        var n, r;\n        return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!le(t.startAt, e.startAt) && le(t.endAt, e.endAt);\n    }(ye(t), ye(e)) && t.limitType === e.limitType;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns an DoubleValue for `value` that is encoded based the serializer's\n * `useProto3Json` setting.\n */\n/**\n * Returns a value for a number that's appropriate to put into a proto.\n * The return value is an IntegerValue if it can safely represent the value,\n * otherwise a DoubleValue is returned.\n */\nfunction ge(t, e) {\n    return function(t) {\n        return \"number\" == typeof t && Number.isInteger(t) && !at(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;\n    }(e) ? \n    /**\n * Returns an IntegerValue for `value`.\n */\n    function(t) {\n        return {\n            integerValue: \"\" + t\n        };\n    }(e) : function(t, e) {\n        if (t.k) {\n            if (isNaN(e)) return {\n                doubleValue: \"NaN\"\n            };\n            if (e === 1 / 0) return {\n                doubleValue: \"Infinity\"\n            };\n            if (e === -1 / 0) return {\n                doubleValue: \"-Infinity\"\n            };\n        }\n        return {\n            doubleValue: at(e) ? \"-0\" : e\n        };\n    }(t, e);\n}\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Used to represent a field transform on a mutation. */ class ve {\n    constructor() {\n        // Make sure that the structural type of `TransformOperation` is unique.\n        // See https://github.com/microsoft/TypeScript/issues/5451\n        this._ = void 0;\n    }\n}\n\n/** Transforms a value into a server-generated timestamp. */ class be extends ve {}\n\n/** Transforms an array value via a union operation. */ class Ee extends ve {\n    constructor(t) {\n        super(), this.elements = t;\n    }\n}\n\n/** Transforms an array value via a remove operation. */ class Te extends ve {\n    constructor(t) {\n        super(), this.elements = t;\n    }\n}\n\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */ class Ie extends ve {\n    constructor(t, e) {\n        super(), this.C = t, this.L = e;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** A field path and the TransformOperation to perform upon it. */ class Ae {\n    constructor(t, e) {\n        this.field = t, this.transform = e;\n    }\n}\n\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */ class Re {\n    constructor(t, e) {\n        this.updateTime = t, this.exists = e;\n    }\n    /** Creates a new empty Precondition. */    static none() {\n        return new Re;\n    }\n    /** Creates a new Precondition with an exists flag. */    static exists(t) {\n        return new Re(void 0, t);\n    }\n    /** Creates a new Precondition based on a version a document exists at. */    static updateTime(t) {\n        return new Re(t);\n    }\n    /** Returns whether this Precondition is empty. */    get isNone() {\n        return void 0 === this.updateTime && void 0 === this.exists;\n    }\n    isEqual(t) {\n        return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);\n    }\n}\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set and Patch mutations. For Delete mutations, we\n * reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        InvalidDocument(v0)   Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set and Patch mutations. As deletes have no\n * explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we transition to an `UnknownDocument` and rely on Watch to send us\n * the updated version.\n *\n * Field transforms are used only with Patch and Set Mutations. We use the\n * `updateTransforms` message to store transforms, rather than the `transforms`s\n * messages.\n *\n * ## Subclassing Notes\n *\n * Every type of mutation needs to implement its own applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document (see `setMutationApplyToRemoteDocument()` for an\n * example).\n */ class Pe {}\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */ class Ve extends Pe {\n    constructor(t, e, n, r = []) {\n        super(), this.key = t, this.value = e, this.precondition = n, this.fieldTransforms = r, \n        this.type = 0 /* Set */;\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */ class Ne extends Pe {\n    constructor(t, e, n, r, s = []) {\n        super(), this.key = t, this.data = e, this.fieldMask = n, this.precondition = r, \n        this.fieldTransforms = s, this.type = 1 /* Patch */;\n    }\n    getFieldMask() {\n        return this.fieldMask;\n    }\n}\n\n/** A mutation that deletes the document at the given key. */ class De extends Pe {\n    constructor(t, e) {\n        super(), this.key = t, this.precondition = e, this.type = 2 /* Delete */ , this.fieldTransforms = [];\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */ class $e extends Pe {\n    constructor(t, e) {\n        super(), this.key = t, this.precondition = e, this.type = 3 /* Verify */ , this.fieldTransforms = [];\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const xe = (() => {\n    const t = {\n        asc: \"ASCENDING\",\n        desc: \"DESCENDING\"\n    };\n    return t;\n})(), Fe = (() => {\n    const t = {\n        \"<\": \"LESS_THAN\",\n        \"<=\": \"LESS_THAN_OR_EQUAL\",\n        \">\": \"GREATER_THAN\",\n        \">=\": \"GREATER_THAN_OR_EQUAL\",\n        \"==\": \"EQUAL\",\n        \"!=\": \"NOT_EQUAL\",\n        \"array-contains\": \"ARRAY_CONTAINS\",\n        in: \"IN\",\n        \"not-in\": \"NOT_IN\",\n        \"array-contains-any\": \"ARRAY_CONTAINS_ANY\"\n    };\n    return t;\n})();\n\n/**\n * This class generates JsonObject values for the Datastore API suitable for\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\n *\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\n * format.\n *\n * For a description of the Proto3 JSON format check\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n *\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nclass Se {\n    constructor(t, e) {\n        this.databaseId = t, this.k = e;\n    }\n}\n\n/**\n * Returns a value for a number (or null) that's appropriate to put into\n * a google.protobuf.Int32Value proto.\n * DO NOT USE THIS FOR ANYTHING ELSE.\n * This method cheats. It's typed as returning \"number\" because that's what\n * our generated proto interfaces say Int32Value must be. But GRPC actually\n * expects a { value: <number> } struct.\n */\n/**\n * Returns a value for a Date that's appropriate to put into a proto.\n */\nfunction qe(t, e) {\n    if (t.k) {\n        return `${new Date(1e3 * e.seconds).toISOString().replace(/\\.\\d*/, \"\").replace(\"Z\", \"\")}.${(\"000000000\" + e.nanoseconds).slice(-9)}Z`;\n    }\n    return {\n        seconds: \"\" + e.seconds,\n        nanos: e.nanoseconds\n    };\n}\n\n/**\n * Returns a value for bytes that's appropriate to put in a proto.\n *\n * Visible for testing.\n */\nfunction Oe(t, e) {\n    return t.k ? e.toBase64() : e.toUint8Array();\n}\n\nfunction ke(t, e) {\n    return qe(t, e.toTimestamp());\n}\n\nfunction Ce(t) {\n    return v(!!t), vt.fromTimestamp(function(t) {\n        const e = $t(t);\n        return new gt(e.seconds, e.nanos);\n    }(t));\n}\n\nfunction Le(t, e) {\n    return function(t) {\n        return new X([ \"projects\", t.projectId, \"databases\", t.database ]);\n    }(t).child(\"documents\").child(e).canonicalString();\n}\n\nfunction Me(t, e) {\n    return Le(t.databaseId, e.path);\n}\n\nfunction Ue(t, e) {\n    const n = function(t) {\n        const e = X.fromString(t);\n        return v(Xe(e)), e;\n    }(e);\n    if (n.get(1) !== t.databaseId.projectId) throw new L(A, \"Tried to deserialize key from different project: \" + n.get(1) + \" vs \" + t.databaseId.projectId);\n    if (n.get(3) !== t.databaseId.database) throw new L(A, \"Tried to deserialize key from different database: \" + n.get(3) + \" vs \" + t.databaseId.database);\n    return new et((v((r = n).length > 4 && \"documents\" === r.get(4)), r.popFirst(5)));\n    var r;\n    /** Creates a Document proto from key and fields (but no create/update time) */}\n\nfunction je(t, e) {\n    return Le(t.databaseId, e);\n}\n\nfunction Be(t) {\n    return new X([ \"projects\", t.databaseId.projectId, \"databases\", t.databaseId.database ]).canonicalString();\n}\n\nfunction ze(t, e, n) {\n    return {\n        name: Me(t, e),\n        fields: n.value.mapValue.fields\n    };\n}\n\nfunction Ge(t, e) {\n    return \"found\" in e ? function(t, e) {\n        v(!!e.found), e.found.name, e.found.updateTime;\n        const n = Ue(t, e.found.name), r = Ce(e.found.updateTime), s = new Yt({\n            mapValue: {\n                fields: e.found.fields\n            }\n        });\n        return Ht.newFoundDocument(n, r, s);\n    }(t, e) : \"missing\" in e ? function(t, e) {\n        v(!!e.missing), v(!!e.readTime);\n        const n = Ue(t, e.missing), r = Ce(e.readTime);\n        return Ht.newNoDocument(n, r);\n    }(t, e) : g();\n}\n\nfunction We(t, e) {\n    let n;\n    if (e instanceof Ve) n = {\n        update: ze(t, e.key, e.value)\n    }; else if (e instanceof De) n = {\n        delete: Me(t, e.key)\n    }; else if (e instanceof Ne) n = {\n        update: ze(t, e.key, e.data),\n        updateMask: Je(e.fieldMask)\n    }; else {\n        if (!(e instanceof $e)) return g();\n        n = {\n            verify: Me(t, e.key)\n        };\n    }\n    return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map((t => function(t, e) {\n        const n = e.transform;\n        if (n instanceof be) return {\n            fieldPath: e.field.canonicalString(),\n            setToServerValue: \"REQUEST_TIME\"\n        };\n        if (n instanceof Ee) return {\n            fieldPath: e.field.canonicalString(),\n            appendMissingElements: {\n                values: n.elements\n            }\n        };\n        if (n instanceof Te) return {\n            fieldPath: e.field.canonicalString(),\n            removeAllFromArray: {\n                values: n.elements\n            }\n        };\n        if (n instanceof Ie) return {\n            fieldPath: e.field.canonicalString(),\n            increment: n.L\n        };\n        throw g();\n    }(0, t)))), e.precondition.isNone || (n.currentDocument = function(t, e) {\n        return void 0 !== e.updateTime ? {\n            updateTime: ke(t, e.updateTime)\n        } : void 0 !== e.exists ? {\n            exists: e.exists\n        } : g();\n    }(t, e.precondition)), n;\n}\n\nfunction Ke(t, e) {\n    // Dissect the path into parent, collectionId, and optional key filter.\n    const n = {\n        structuredQuery: {}\n    }, r = e.path;\n    null !== e.collectionGroup ? (n.parent = je(t, r), n.structuredQuery.from = [ {\n        collectionId: e.collectionGroup,\n        allDescendants: !0\n    } ]) : (n.parent = je(t, r.popLast()), n.structuredQuery.from = [ {\n        collectionId: r.lastSegment()\n    } ]);\n    const s = function(t) {\n        if (0 === t.length) return;\n        const e = t.map((t => \n        // visible for testing\n        function(t) {\n            if (\"==\" /* EQUAL */ === t.op) {\n                if (Wt(t.value)) return {\n                    unaryFilter: {\n                        field: He(t.field),\n                        op: \"IS_NAN\"\n                    }\n                };\n                if (Gt(t.value)) return {\n                    unaryFilter: {\n                        field: He(t.field),\n                        op: \"IS_NULL\"\n                    }\n                };\n            } else if (\"!=\" /* NOT_EQUAL */ === t.op) {\n                if (Wt(t.value)) return {\n                    unaryFilter: {\n                        field: He(t.field),\n                        op: \"IS_NOT_NAN\"\n                    }\n                };\n                if (Gt(t.value)) return {\n                    unaryFilter: {\n                        field: He(t.field),\n                        op: \"IS_NOT_NULL\"\n                    }\n                };\n            }\n            return {\n                fieldFilter: {\n                    field: He(t.field),\n                    op: Ye(t.op),\n                    value: t.value\n                }\n            };\n        }(t)));\n        if (1 === e.length) return e[0];\n        return {\n            compositeFilter: {\n                op: \"AND\",\n                filters: e\n            }\n        };\n    }(e.filters);\n    s && (n.structuredQuery.where = s);\n    const i = function(t) {\n        if (0 === t.length) return;\n        return t.map((t => \n        // visible for testing\n        function(t) {\n            return {\n                field: He(t.field),\n                direction: Qe(t.dir)\n            };\n        }(t)));\n    }(e.orderBy);\n    i && (n.structuredQuery.orderBy = i);\n    const o = function(t, e) {\n        return t.k || ct(e) ? e : {\n            value: e\n        };\n    }(t, e.limit);\n    var u;\n    return null !== o && (n.structuredQuery.limit = o), e.startAt && (n.structuredQuery.startAt = {\n        before: (u = e.startAt).inclusive,\n        values: u.position\n    }), e.endAt && (n.structuredQuery.endAt = function(t) {\n        return {\n            before: !t.inclusive,\n            values: t.position\n        };\n    }\n    // visible for testing\n    (e.endAt)), n;\n}\n\nfunction Qe(t) {\n    return xe[t];\n}\n\n// visible for testing\nfunction Ye(t) {\n    return Fe[t];\n}\n\nfunction He(t) {\n    return {\n        fieldPath: t.canonicalString()\n    };\n}\n\nfunction Je(t) {\n    const e = [];\n    return t.fields.forEach((t => e.push(t.canonicalString()))), {\n        fieldPaths: e\n    };\n}\n\nfunction Xe(t) {\n    // Resource names have at least 4 components (project ID, database ID)\n    return t.length >= 4 && \"projects\" === t.get(0) && \"databases\" === t.get(2);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function Ze(t) {\n    return new Se(t, /* useProto3Json= */ !0);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nclass tn {\n    constructor(\n    /**\n     * The AsyncQueue to run backoff operations on.\n     */\n    t, \n    /**\n     * The ID to use when scheduling backoff operations on the AsyncQueue.\n     */\n    e, \n    /**\n     * The initial delay (used as the base delay on the first retry attempt).\n     * Note that jitter will still be applied, so the actual delay could be as\n     * little as 0.5*initialDelayMs.\n     */\n    n = 1e3\n    /**\n     * The multiplier to use to determine the extended base delay after each\n     * attempt.\n     */ , r = 1.5\n    /**\n     * The maximum base delay after which no further backoff is performed.\n     * Note that jitter will still be applied, so the actual delay could be as\n     * much as 1.5*maxDelayMs.\n     */ , s = 6e4) {\n        this.M = t, this.timerId = e, this.U = n, this.j = r, this.B = s, this.G = 0, this.W = null, \n        /** The last backoff attempt, as epoch milliseconds. */\n        this.K = Date.now(), this.reset();\n    }\n    /**\n     * Resets the backoff delay.\n     *\n     * The very next backoffAndWait() will have no delay. If it is called again\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n     * subsequent ones will increase according to the backoffFactor.\n     */    reset() {\n        this.G = 0;\n    }\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     */    Y() {\n        this.G = this.B;\n    }\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts. If there was a pending backoff operation\n     * already, it will be canceled.\n     */    H(t) {\n        // Cancel any pending backoff operation.\n        this.cancel();\n        // First schedule using the current base (which may be 0 and should be\n        // honored as such).\n        const e = Math.floor(this.G + this.J()), n = Math.max(0, Date.now() - this.K), r = Math.max(0, e - n);\n        // Guard against lastAttemptTime being in the future due to a clock change.\n                r > 0 && m(\"ExponentialBackoff\", `Backing off for ${r} ms (base delay: ${this.G} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`), \n        this.W = this.M.enqueueAfterDelay(this.timerId, r, (() => (this.K = Date.now(), \n        t()))), \n        // Apply backoff factor to determine next delay and ensure it is within\n        // bounds.\n        this.G *= this.j, this.G < this.U && (this.G = this.U), this.G > this.B && (this.G = this.B);\n    }\n    X() {\n        null !== this.W && (this.W.skipDelay(), this.W = null);\n    }\n    cancel() {\n        null !== this.W && (this.W.cancel(), this.W = null);\n    }\n    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */    J() {\n        return (Math.random() - .5) * this.G;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Datastore and its related methods are a wrapper around the external Google\n * Cloud Datastore grpc API, which provides an interface that is more convenient\n * for the rest of the client SDK architecture to consume.\n */\n/**\n * An implementation of Datastore that exposes additional state for internal\n * consumption.\n */\nclass en extends class {} {\n    constructor(t, e, n, r) {\n        super(), this.authCredentials = t, this.appCheckCredentials = e, this.Z = n, this.C = r, \n        this.tt = !1;\n    }\n    et() {\n        if (this.tt) throw new L(x, \"The client has already been terminated.\");\n    }\n    /** Invokes the provided RPC with auth and AppCheck tokens. */    v(t, e, n) {\n        return this.et(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([r, s]) => this.Z.v(t, e, n, r, s))).catch((t => {\n            throw \"FirebaseError\" === t.name ? (t.code === D && (this.authCredentials.invalidateToken(), \n            this.appCheckCredentials.invalidateToken()), t) : new L(I, t.toString());\n        }));\n    }\n    /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */    R(t, e, n, r) {\n        return this.et(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([s, i]) => this.Z.R(t, e, n, s, i, r))).catch((t => {\n            throw \"FirebaseError\" === t.name ? (t.code === D && (this.authCredentials.invalidateToken(), \n            this.appCheckCredentials.invalidateToken()), t) : new L(I, t.toString());\n        }));\n    }\n    terminate() {\n        this.tt = !0;\n    }\n}\n\n// TODO(firestorexp): Make sure there is only one Datastore instance per\n// firestore-exp client.\nasync function nn(t, e) {\n    const n = b(t), r = Be(n.C) + \"/documents\", s = {\n        writes: e.map((t => We(n.C, t)))\n    };\n    await n.v(\"Commit\", r, s);\n}\n\nasync function rn(t, e) {\n    const n = b(t), r = Be(n.C) + \"/documents\", s = {\n        documents: e.map((t => Me(n.C, t)))\n    }, i = await n.R(\"BatchGetDocuments\", r, s, e.length), o = new Map;\n    i.forEach((t => {\n        const e = Ge(n.C, t);\n        o.set(e.key.toString(), e);\n    }));\n    const u = [];\n    return e.forEach((t => {\n        const e = o.get(t.toString());\n        v(!!e), u.push(e);\n    })), u;\n}\n\nasync function sn(t, e) {\n    const n = b(t), r = Ke(n.C, ye(e));\n    return (await n.R(\"RunQuery\", r.parent, {\n        structuredQuery: r.structuredQuery\n    })).filter((t => !!t.document)).map((t => function(t, e, n) {\n        const r = Ue(t, e.name), s = Ce(e.updateTime), i = new Yt({\n            mapValue: {\n                fields: e.fields\n            }\n        }), o = Ht.newFoundDocument(r, s, i);\n        return n && o.setHasCommittedMutations(), n ? o.setHasCommittedMutations() : o;\n    }(n.C, t.document, void 0)));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const on = new Map;\n\n/**\n * An instance map that ensures only one Datastore exists per Firestore\n * instance.\n */\n/**\n * Returns an initialized and started Datastore for the given Firestore\n * instance. Callers must invoke removeComponents() when the Firestore\n * instance is terminated.\n */\nfunction un(t) {\n    if (t._terminated) throw new L(x, \"The client has already been terminated.\");\n    if (!on.has(t)) {\n        m(\"ComponentProvider\", \"Initializing Datastore\");\n        const i = function(t) {\n            return new wt(t, fetch.bind(null));\n        }((e = t._databaseId, n = t.app.options.appId || \"\", r = t._persistenceKey, s = t._freezeSettings(), \n        new Y(e, n, r, s.host, s.ssl, s.experimentalForceLongPolling, s.experimentalAutoDetectLongPolling, s.useFetchStreams))), o = Ze(t._databaseId), u = function(t, e, n, r) {\n            return new en(t, e, n, r);\n        }(t._authCredentials, t._appCheckCredentials, i, o);\n        on.set(t, u);\n    }\n    var e, n, r, s;\n    /**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */    return on.get(t);\n}\n\n/**\n * Removes all components associated with the provided instance. Must be called\n * when the `Firestore` instance is terminated.\n */\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied `FirestoreSettings` object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nclass cn {\n    constructor(t) {\n        var e;\n        if (void 0 === t.host) {\n            if (void 0 !== t.ssl) throw new L(A, \"Can't provide ssl option if host option is not set\");\n            this.host = \"firestore.googleapis.com\", this.ssl = true;\n        } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;\n        if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, \n        void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040; else {\n            if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new L(A, \"cacheSizeBytes must be at least 1048576\");\n            this.cacheSizeBytes = t.cacheSizeBytes;\n        }\n        this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, \n        this.useFetchStreams = !!t.useFetchStreams, function(t, e, n, r) {\n            if (!0 === e && !0 === r) throw new L(A, `${t} and ${n} cannot be used together.`);\n        }(\"experimentalForceLongPolling\", t.experimentalForceLongPolling, \"experimentalAutoDetectLongPolling\", t.experimentalAutoDetectLongPolling);\n    }\n    isEqual(t) {\n        return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The Cloud Firestore service interface.\n *\n * Do not call this constructor directly. Instead, use {@link getFirestore}.\n */ class an {\n    /** @hideconstructor */\n    constructor(t, e, n, r) {\n        this._authCredentials = t, this._appCheckCredentials = e, this._databaseId = n, \n        this._app = r, \n        /**\n         * Whether it's a Firestore or Firestore Lite instance.\n         */\n        this.type = \"firestore-lite\", this._persistenceKey = \"(lite)\", this._settings = new cn({}), \n        this._settingsFrozen = !1;\n    }\n    /**\n     * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service\n     * instance.\n     */    get app() {\n        if (!this._app) throw new L(x, \"Firestore was not initialized using the Firebase SDK. 'app' is not available\");\n        return this._app;\n    }\n    get _initialized() {\n        return this._settingsFrozen;\n    }\n    get _terminated() {\n        return void 0 !== this._terminateTask;\n    }\n    _setSettings(t) {\n        if (this._settingsFrozen) throw new L(x, \"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.\");\n        this._settings = new cn(t), void 0 !== t.credentials && (this._authCredentials = function(t) {\n            if (!t) return new j;\n            switch (t.type) {\n              case \"gapi\":\n                const e = t.client;\n                return new W(e, t.sessionIndex || \"0\", t.iamToken || null, t.authTokenFactory || null);\n\n              case \"provider\":\n                return t.client;\n\n              default:\n                throw new L(A, \"makeAuthCredentialsProvider failed due to invalid credential type\");\n            }\n        }(t.credentials));\n    }\n    _getSettings() {\n        return this._settings;\n    }\n    _freezeSettings() {\n        return this._settingsFrozen = !0, this._settings;\n    }\n    _delete() {\n        return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;\n    }\n    /** Returns a JSON-serializable representation of this `Firestore` instance. */    toJSON() {\n        return {\n            app: this._app,\n            databaseId: this._databaseId,\n            settings: this._settings\n        };\n    }\n    /**\n     * Terminates all components used by this client. Subclasses can override\n     * this method to clean up their own dependencies, but must also call this\n     * method.\n     *\n     * Only ever called once.\n     */    _terminate() {\n        return function(t) {\n            const e = on.get(t);\n            e && (m(\"ComponentProvider\", \"Removing Datastore\"), on.delete(t), e.terminate());\n        }(this), Promise.resolve();\n    }\n}\n\nfunction hn(t, e, n) {\n    n || (n = \"(default)\");\n    const r = _getProvider(t, \"firestore/lite\");\n    if (r.isInitialized(n)) throw new L(x, \"Firestore can only be initialized once per app.\");\n    return r.initialize({\n        options: e,\n        instanceIdentifier: n\n    });\n}\n\nfunction ln(e, n) {\n    const r = \"object\" == typeof e ? e : t(), s = \"string\" == typeof e ? e : n || \"(default)\";\n    return _getProvider(r, \"firestore/lite\").getImmediate({\n        identifier: s\n    });\n}\n\n/**\n * Modify this instance to communicate with the Cloud Firestore emulator.\n *\n * Note: This must be called before this instance has been used to do any\n * operations.\n *\n * @param firestore - The `Firestore` instance to configure to connect to the\n * emulator.\n * @param host - the emulator host (ex: localhost).\n * @param port - the emulator port (ex: 9000).\n * @param options.mockUserToken - the mock auth token to use for unit testing\n * Security Rules.\n */ function fn(t, e, n, r = {}) {\n    var s;\n    const i = (t = ot(t, an))._getSettings();\n    if (\"firestore.googleapis.com\" !== i.host && i.host !== e && y(\"Host has been set in both settings() and useEmulator(), emulator host will be used\"), \n    t._setSettings(Object.assign(Object.assign({}, i), {\n        host: `${e}:${n}`,\n        ssl: !1\n    })), r.mockUserToken) {\n        let e, n;\n        if (\"string\" == typeof r.mockUserToken) e = r.mockUserToken, n = l.MOCK_USER; else {\n            // Let createMockUserToken validate first (catches common mistakes like\n            // invalid field \"uid\" and missing field \"sub\" / \"user_id\".)\n            e = a(r.mockUserToken, null === (s = t._app) || void 0 === s ? void 0 : s.options.projectId);\n            const i = r.mockUserToken.sub || r.mockUserToken.user_id;\n            if (!i) throw new L(A, \"mockUserToken must contain 'sub' or 'user_id' field!\");\n            n = new l(i);\n        }\n        t._authCredentials = new B(new U(e, n));\n    }\n}\n\n/**\n * Terminates the provided `Firestore` instance.\n *\n * After calling `terminate()` only the `clearIndexedDbPersistence()` functions\n * may be used. Any other function will throw a `FirestoreError`. Termination\n * does not cancel any pending writes, and any promises that are awaiting a\n * response from the server will not be resolved.\n *\n * To restart after termination, create a new instance of `Firestore` with\n * {@link getFirestore}.\n *\n * Note: Under normal circumstances, calling `terminate()` is not required. This\n * function is useful only when you want to force this instance to release all of\n * its resources or in combination with {@link clearIndexedDbPersistence} to\n * ensure that all local state is destroyed between test runs.\n *\n * @param firestore - The `Firestore` instance to terminate.\n * @returns A `Promise` that is resolved when the instance has been successfully\n * terminated.\n */ function dn(t) {\n    return t = ot(t, an), e(t.app, \"firestore/lite\"), t._delete();\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `DocumentReference` refers to a document location in a Firestore database\n * and can be used to write, read, or listen to the location. The document at\n * the referenced location may or may not exist.\n */\nclass wn {\n    /** @hideconstructor */\n    constructor(t, \n    /**\n     * If provided, the `FirestoreDataConverter` associated with this instance.\n     */\n    e, n) {\n        this.converter = e, this._key = n, \n        /** The type of this Firestore reference. */\n        this.type = \"document\", this.firestore = t;\n    }\n    get _path() {\n        return this._key.path;\n    }\n    /**\n     * The document's identifier within its collection.\n     */    get id() {\n        return this._key.path.lastSegment();\n    }\n    /**\n     * A string representing the path of the referenced document (relative\n     * to the root of the database).\n     */    get path() {\n        return this._key.path.canonicalString();\n    }\n    /**\n     * The collection this `DocumentReference` belongs to.\n     */    get parent() {\n        return new pn(this.firestore, this.converter, this._key.path.popLast());\n    }\n    withConverter(t) {\n        return new wn(this.firestore, t, this._key);\n    }\n}\n\n/**\n * A `Query` refers to a query which you can read or listen to. You can also\n * construct refined `Query` objects by adding filters and ordering.\n */ class mn {\n    // This is the lite version of the Query class in the main SDK.\n    /** @hideconstructor protected */\n    constructor(t, \n    /**\n     * If provided, the `FirestoreDataConverter` associated with this instance.\n     */\n    e, n) {\n        this.converter = e, this._query = n, \n        /** The type of this Firestore reference. */\n        this.type = \"query\", this.firestore = t;\n    }\n    withConverter(t) {\n        return new mn(this.firestore, t, this._query);\n    }\n}\n\n/**\n * A `CollectionReference` object can be used for adding documents, getting\n * document references, and querying for documents (using {@link query}).\n */ class pn extends mn {\n    /** @hideconstructor */\n    constructor(t, e, n) {\n        super(t, e, new fe(n)), this._path = n, \n        /** The type of this Firestore reference. */\n        this.type = \"collection\";\n    }\n    /** The collection's identifier. */    get id() {\n        return this._query.path.lastSegment();\n    }\n    /**\n     * A string representing the path of the referenced collection (relative\n     * to the root of the database).\n     */    get path() {\n        return this._query.path.canonicalString();\n    }\n    /**\n     * A reference to the containing `DocumentReference` if this is a\n     * subcollection. If this isn't a subcollection, the reference is null.\n     */    get parent() {\n        const t = this._path.popLast();\n        return t.isEmpty() ? null : new wn(this.firestore, \n        /* converter= */ null, new et(t));\n    }\n    withConverter(t) {\n        return new pn(this.firestore, t, this._path);\n    }\n}\n\nfunction yn(t, e, ...n) {\n    if (t = h(t), nt(\"collection\", \"path\", e), t instanceof an) {\n        const r = X.fromString(e, ...n);\n        return st(r), new pn(t, /* converter= */ null, r);\n    }\n    {\n        if (!(t instanceof wn || t instanceof pn)) throw new L(A, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n        const r = t._path.child(X.fromString(e, ...n));\n        return st(r), new pn(t.firestore, \n        /* converter= */ null, r);\n    }\n}\n\n// TODO(firestorelite): Consider using ErrorFactory -\n// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106\n/**\n * Creates and returns a new `Query` instance that includes all documents in the\n * database that are contained in a collection or subcollection with the\n * given `collectionId`.\n *\n * @param firestore - A reference to the root `Firestore` instance.\n * @param collectionId - Identifies the collections to query over. Every\n * collection or subcollection with this ID as the last segment of its path\n * will be included. Cannot contain a slash.\n * @returns The created `Query`.\n */ function _n(t, e) {\n    if (t = ot(t, an), nt(\"collectionGroup\", \"collection id\", e), e.indexOf(\"/\") >= 0) throw new L(A, `Invalid collection ID '${e}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);\n    return new mn(t, \n    /* converter= */ null, \n    /**\n * Creates a new Query for a collection group query that matches all documents\n * within the provided collection group.\n */\n    function(t) {\n        return new fe(X.emptyPath(), t);\n    }(e));\n}\n\nfunction gn(t, e, ...n) {\n    if (t = h(t), \n    // We allow omission of 'pathString' but explicitly prohibit passing in both\n    // 'undefined' and 'null'.\n    1 === arguments.length && (e = pt.N()), nt(\"doc\", \"path\", e), t instanceof an) {\n        const r = X.fromString(e, ...n);\n        return rt(r), new wn(t, \n        /* converter= */ null, new et(r));\n    }\n    {\n        if (!(t instanceof wn || t instanceof pn)) throw new L(A, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n        const r = t._path.child(X.fromString(e, ...n));\n        return rt(r), new wn(t.firestore, t instanceof pn ? t.converter : null, new et(r));\n    }\n}\n\n/**\n * Returns true if the provided references are equal.\n *\n * @param left - A reference to compare.\n * @param right - A reference to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */ function vn(t, e) {\n    return t = h(t), e = h(e), (t instanceof wn || t instanceof pn) && (e instanceof wn || e instanceof pn) && (t.firestore === e.firestore && t.path === e.path && t.converter === e.converter);\n}\n\n/**\n * Returns true if the provided queries point to the same collection and apply\n * the same constraints.\n *\n * @param left - A `Query` to compare.\n * @param right - A `Query` to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */ function bn(t, e) {\n    return t = h(t), e = h(e), t instanceof mn && e instanceof mn && (t.firestore === e.firestore && _e(t._query, e._query) && t.converter === e.converter);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `FieldPath` refers to a field in a document. The path may consist of a\n * single field name (referring to a top-level field in the document), or a\n * list of field names (referring to a nested field in the document).\n *\n * Create a `FieldPath` by providing field names. If more than one field\n * name is provided, the path will point to a nested field in a document.\n */ class En {\n    /**\n     * Creates a `FieldPath` from the provided field names. If more than one field\n     * name is provided, the path will point to a nested field in a document.\n     *\n     * @param fieldNames - A list of field names.\n     */\n    constructor(...t) {\n        for (let e = 0; e < t.length; ++e) if (0 === t[e].length) throw new L(A, \"Invalid field name at argument $(i + 1). Field names must not be empty.\");\n        this._internalPath = new tt(t);\n    }\n    /**\n     * Returns true if this `FieldPath` is equal to the provided one.\n     *\n     * @param other - The `FieldPath` to compare against.\n     * @returns true if this `FieldPath` is equal to the provided one.\n     */    isEqual(t) {\n        return this._internalPath.isEqual(t._internalPath);\n    }\n}\n\n/**\n * Returns a special sentinel `FieldPath` to refer to the ID of a document.\n * It can be used in queries to sort or filter by the document ID.\n */ function Tn() {\n    return new En(\"__name__\");\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing an array of bytes.\n */ class In {\n    /** @hideconstructor */\n    constructor(t) {\n        this._byteString = t;\n    }\n    /**\n     * Creates a new `Bytes` object from the given Base64 string, converting it to\n     * bytes.\n     *\n     * @param base64 - The Base64 string used to create the `Bytes` object.\n     */    static fromBase64String(t) {\n        try {\n            return new In(Nt.fromBase64String(t));\n        } catch (t) {\n            throw new L(A, \"Failed to construct data from Base64 string: \" + t);\n        }\n    }\n    /**\n     * Creates a new `Bytes` object from the given Uint8Array.\n     *\n     * @param array - The Uint8Array used to create the `Bytes` object.\n     */    static fromUint8Array(t) {\n        return new In(Nt.fromUint8Array(t));\n    }\n    /**\n     * Returns the underlying bytes as a Base64-encoded string.\n     *\n     * @returns The Base64-encoded string created from the `Bytes` object.\n     */    toBase64() {\n        return this._byteString.toBase64();\n    }\n    /**\n     * Returns the underlying bytes in a new `Uint8Array`.\n     *\n     * @returns The Uint8Array created from the `Bytes` object.\n     */    toUint8Array() {\n        return this._byteString.toUint8Array();\n    }\n    /**\n     * Returns a string representation of the `Bytes` object.\n     *\n     * @returns A string representation of the `Bytes` object.\n     */    toString() {\n        return \"Bytes(base64: \" + this.toBase64() + \")\";\n    }\n    /**\n     * Returns true if this `Bytes` object is equal to the provided one.\n     *\n     * @param other - The `Bytes` object to compare against.\n     * @returns true if this `Bytes` object is equal to the provided one.\n     */    isEqual(t) {\n        return this._byteString.isEqual(t._byteString);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Sentinel values that can be used when writing document fields with `set()`\n * or `update()`.\n */ class An {\n    /**\n     * @param _methodName - The public API endpoint that returns this class.\n     * @hideconstructor\n     */\n    constructor(t) {\n        this._methodName = t;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing a geographic location in Firestore. The\n * location is represented as latitude/longitude pair.\n *\n * Latitude values are in the range of [-90, 90].\n * Longitude values are in the range of [-180, 180].\n */ class Rn {\n    /**\n     * Creates a new immutable `GeoPoint` object with the provided latitude and\n     * longitude values.\n     * @param latitude - The latitude as number between -90 and 90.\n     * @param longitude - The longitude as number between -180 and 180.\n     */\n    constructor(t, e) {\n        if (!isFinite(t) || t < -90 || t > 90) throw new L(A, \"Latitude must be a number between -90 and 90, but was: \" + t);\n        if (!isFinite(e) || e < -180 || e > 180) throw new L(A, \"Longitude must be a number between -180 and 180, but was: \" + e);\n        this._lat = t, this._long = e;\n    }\n    /**\n     * The latitude of this `GeoPoint` instance.\n     */    get latitude() {\n        return this._lat;\n    }\n    /**\n     * The longitude of this `GeoPoint` instance.\n     */    get longitude() {\n        return this._long;\n    }\n    /**\n     * Returns true if this `GeoPoint` is equal to the provided one.\n     *\n     * @param other - The `GeoPoint` to compare against.\n     * @returns true if this `GeoPoint` is equal to the provided one.\n     */    isEqual(t) {\n        return this._lat === t._lat && this._long === t._long;\n    }\n    /** Returns a JSON-serializable representation of this GeoPoint. */    toJSON() {\n        return {\n            latitude: this._lat,\n            longitude: this._long\n        };\n    }\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */    _compareTo(t) {\n        return yt(this._lat, t._lat) || yt(this._long, t._long);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const Pn = /^__.*__$/;\n\n/** The result of parsing document data (e.g. for a setData call). */ class Vn {\n    constructor(t, e, n) {\n        this.data = t, this.fieldMask = e, this.fieldTransforms = n;\n    }\n    toMutation(t, e) {\n        return null !== this.fieldMask ? new Ne(t, this.data, this.fieldMask, e, this.fieldTransforms) : new Ve(t, this.data, e, this.fieldTransforms);\n    }\n}\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */ class Nn {\n    constructor(t, \n    // The fieldMask does not include document transforms.\n    e, n) {\n        this.data = t, this.fieldMask = e, this.fieldTransforms = n;\n    }\n    toMutation(t, e) {\n        return new Ne(t, this.data, this.fieldMask, e, this.fieldTransforms);\n    }\n}\n\nfunction Dn(t) {\n    switch (t) {\n      case 0 /* Set */ :\n // fall through\n              case 2 /* MergeSet */ :\n // fall through\n              case 1 /* Update */ :\n        return !0;\n\n      case 3 /* Argument */ :\n      case 4 /* ArrayArgument */ :\n        return !1;\n\n      default:\n        throw g();\n    }\n}\n\n/** A \"context\" object passed around while parsing user data. */ class $n {\n    /**\n     * Initializes a ParseContext with the given source and path.\n     *\n     * @param settings - The settings for the parser.\n     * @param databaseId - The database ID of the Firestore instance.\n     * @param serializer - The serializer to use to generate the Value proto.\n     * @param ignoreUndefinedProperties - Whether to ignore undefined properties\n     * rather than throw.\n     * @param fieldTransforms - A mutable list of field transforms encountered\n     * while parsing the data.\n     * @param fieldMask - A mutable list of field paths encountered while parsing\n     * the data.\n     *\n     * TODO(b/34871131): We don't support array paths right now, so path can be\n     * null to indicate the context represents any location within an array (in\n     * which case certain features will not work and errors will be somewhat\n     * compromised).\n     */\n    constructor(t, e, n, r, s, i) {\n        this.settings = t, this.databaseId = e, this.C = n, this.ignoreUndefinedProperties = r, \n        // Minor hack: If fieldTransforms is undefined, we assume this is an\n        // external call and we need to validate the entire path.\n        void 0 === s && this.nt(), this.fieldTransforms = s || [], this.fieldMask = i || [];\n    }\n    get path() {\n        return this.settings.path;\n    }\n    get rt() {\n        return this.settings.rt;\n    }\n    /** Returns a new context with the specified settings overwritten. */    st(t) {\n        return new $n(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.C, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);\n    }\n    it(t) {\n        var e;\n        const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.st({\n            path: n,\n            ot: !1\n        });\n        return r.ut(t), r;\n    }\n    ct(t) {\n        var e;\n        const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.st({\n            path: n,\n            ot: !1\n        });\n        return r.nt(), r;\n    }\n    at(t) {\n        // TODO(b/34871131): We don't support array paths right now; so make path\n        // undefined.\n        return this.st({\n            path: void 0,\n            ot: !0\n        });\n    }\n    ht(t) {\n        return Jn(t, this.settings.methodName, this.settings.lt || !1, this.path, this.settings.ft);\n    }\n    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */    contains(t) {\n        return void 0 !== this.fieldMask.find((e => t.isPrefixOf(e))) || void 0 !== this.fieldTransforms.find((e => t.isPrefixOf(e.field)));\n    }\n    nt() {\n        // TODO(b/34871131): Remove null check once we have proper paths for fields\n        // within arrays.\n        if (this.path) for (let t = 0; t < this.path.length; t++) this.ut(this.path.get(t));\n    }\n    ut(t) {\n        if (0 === t.length) throw this.ht(\"Document fields must not be empty\");\n        if (Dn(this.rt) && Pn.test(t)) throw this.ht('Document fields cannot begin and end with \"__\"');\n    }\n}\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */ class xn {\n    constructor(t, e, n) {\n        this.databaseId = t, this.ignoreUndefinedProperties = e, this.C = n || Ze(t);\n    }\n    /** Creates a new top-level parse context. */    dt(t, e, n, r = !1) {\n        return new $n({\n            rt: t,\n            methodName: e,\n            ft: n,\n            path: tt.emptyPath(),\n            ot: !1,\n            lt: r\n        }, this.databaseId, this.C, this.ignoreUndefinedProperties);\n    }\n}\n\nfunction Fn(t) {\n    const e = t._freezeSettings(), n = Ze(t._databaseId);\n    return new xn(t._databaseId, !!e.ignoreUndefinedProperties, n);\n}\n\n/** Parse document data from a set() call. */ function Sn(t, e, n, r, s, i = {}) {\n    const o = t.dt(i.merge || i.mergeFields ? 2 /* MergeSet */ : 0 /* Set */ , e, n, s);\n    Kn(\"Data must be an object, but it was:\", o, r);\n    const u = Gn(r, o);\n    let c, a;\n    if (i.merge) c = new Vt(o.fieldMask), a = o.fieldTransforms; else if (i.mergeFields) {\n        const t = [];\n        for (const r of i.mergeFields) {\n            const s = Qn(e, r, n);\n            if (!o.contains(s)) throw new L(A, `Field '${s}' is specified in your field mask but missing from your input data.`);\n            Xn(t, s) || t.push(s);\n        }\n        c = new Vt(t), a = o.fieldTransforms.filter((t => c.covers(t.field)));\n    } else c = null, a = o.fieldTransforms;\n    return new Vn(new Yt(u), c, a);\n}\n\nclass qn extends An {\n    _toFieldTransform(t) {\n        if (2 /* MergeSet */ !== t.rt) throw 1 /* Update */ === t.rt ? t.ht(`${this._methodName}() can only appear at the top level of your update data`) : t.ht(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);\n        // No transform to add for a delete, but we need to add it to our\n        // fieldMask so it gets deleted.\n        return t.fieldMask.push(t.path), null;\n    }\n    isEqual(t) {\n        return t instanceof qn;\n    }\n}\n\n/**\n * Creates a child context for parsing SerializableFieldValues.\n *\n * This is different than calling `ParseContext.contextWith` because it keeps\n * the fieldTransforms and fieldMask separate.\n *\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\n * Although these values are used with writes, any elements in these FieldValues\n * are not considered writes since they cannot contain any FieldValue sentinels,\n * etc.\n *\n * @param fieldValue - The sentinel FieldValue for which to create a child\n *     context.\n * @param context - The parent context.\n * @param arrayElement - Whether or not the FieldValue has an array.\n */ function On(t, e, n) {\n    return new $n({\n        rt: 3 /* Argument */ ,\n        ft: e.settings.ft,\n        methodName: t._methodName,\n        ot: n\n    }, e.databaseId, e.C, e.ignoreUndefinedProperties);\n}\n\nclass kn extends An {\n    _toFieldTransform(t) {\n        return new Ae(t.path, new be);\n    }\n    isEqual(t) {\n        return t instanceof kn;\n    }\n}\n\nclass Cn extends An {\n    constructor(t, e) {\n        super(t), this.wt = e;\n    }\n    _toFieldTransform(t) {\n        const e = On(this, t, \n        /*array=*/ !0), n = this.wt.map((t => zn(t, e))), r = new Ee(n);\n        return new Ae(t.path, r);\n    }\n    isEqual(t) {\n        // TODO(mrschmidt): Implement isEquals\n        return this === t;\n    }\n}\n\nclass Ln extends An {\n    constructor(t, e) {\n        super(t), this.wt = e;\n    }\n    _toFieldTransform(t) {\n        const e = On(this, t, \n        /*array=*/ !0), n = this.wt.map((t => zn(t, e))), r = new Te(n);\n        return new Ae(t.path, r);\n    }\n    isEqual(t) {\n        // TODO(mrschmidt): Implement isEquals\n        return this === t;\n    }\n}\n\nclass Mn extends An {\n    constructor(t, e) {\n        super(t), this.yt = e;\n    }\n    _toFieldTransform(t) {\n        const e = new Ie(t.C, ge(t.C, this.yt));\n        return new Ae(t.path, e);\n    }\n    isEqual(t) {\n        // TODO(mrschmidt): Implement isEquals\n        return this === t;\n    }\n}\n\n/** Parse update data from an update() call. */ function Un(t, e, n, r) {\n    const s = t.dt(1 /* Update */ , e, n);\n    Kn(\"Data must be an object, but it was:\", s, r);\n    const i = [], o = Yt.empty();\n    Et(r, ((t, r) => {\n        const u = Hn(e, t, n);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                r = h(r);\n        const c = s.ct(u);\n        if (r instanceof qn) \n        // Add it to the field mask, but don't add anything to updateData.\n        i.push(u); else {\n            const t = zn(r, c);\n            null != t && (i.push(u), o.set(u, t));\n        }\n    }));\n    const u = new Vt(i);\n    return new Nn(o, u, s.fieldTransforms);\n}\n\n/** Parse update data from a list of field/value arguments. */ function jn(t, e, n, r, s, i) {\n    const o = t.dt(1 /* Update */ , e, n), u = [ Qn(e, r, n) ], c = [ s ];\n    if (i.length % 2 != 0) throw new L(A, `Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);\n    for (let t = 0; t < i.length; t += 2) u.push(Qn(e, i[t])), c.push(i[t + 1]);\n    const a = [], l = Yt.empty();\n    // We iterate in reverse order to pick the last value for a field if the\n    // user specified the field multiple times.\n    for (let t = u.length - 1; t >= 0; --t) if (!Xn(a, u[t])) {\n        const e = u[t];\n        let n = c[t];\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                n = h(n);\n        const r = o.ct(e);\n        if (n instanceof qn) \n        // Add it to the field mask, but don't add anything to updateData.\n        a.push(e); else {\n            const t = zn(n, r);\n            null != t && (a.push(e), l.set(e, t));\n        }\n    }\n    const f = new Vt(a);\n    return new Nn(l, f, o.fieldTransforms);\n}\n\n/**\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n * bound).\n *\n * @param allowArrays - Whether the query value is an array that may directly\n * contain additional arrays (e.g. the operand of an `in` query).\n */ function Bn(t, e, n, r = !1) {\n    return zn(n, t.dt(r ? 4 /* ArrayArgument */ : 3 /* Argument */ , e));\n}\n\n/**\n * Parses user data to Protobuf Values.\n *\n * @param input - Data to be parsed.\n * @param context - A context object representing the current path being parsed,\n * the source of the data being parsed, etc.\n * @returns The parsed value, or null if the value was a FieldValue sentinel\n * that should not be included in the resulting parsed data.\n */ function zn(t, e) {\n    if (Wn(\n    // Unwrap the API type from the Compat SDK. This will return the API type\n    // from firestore-exp.\n    t = h(t))) return Kn(\"Unsupported field value:\", e, t), Gn(t, e);\n    if (t instanceof An) \n    // FieldValues usually parse into transforms (except deleteField())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n    /**\n * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n * context.fieldTransforms.\n */\n    return function(t, e) {\n        // Sentinels are only supported with writes, and not within arrays.\n        if (!Dn(e.rt)) throw e.ht(`${t._methodName}() can only be used with update() and set()`);\n        if (!e.path) throw e.ht(`${t._methodName}() is not currently supported inside arrays`);\n        const n = t._toFieldTransform(e);\n        n && e.fieldTransforms.push(n);\n    }\n    /**\n * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n *\n * @returns The parsed value\n */ (t, e), null;\n    if (void 0 === t && e.ignoreUndefinedProperties) \n    // If the input is undefined it can never participate in the fieldMask, so\n    // don't handle this below. If `ignoreUndefinedProperties` is false,\n    // `parseScalarValue` will reject an undefined value.\n    return null;\n    if (\n    // If context.path is null we are inside an array and we don't support\n    // field mask paths more granular than the top-level array.\n    e.path && e.fieldMask.push(e.path), t instanceof Array) {\n        // TODO(b/34871131): Include the path containing the array in the error\n        // message.\n        // In the case of IN queries, the parsed data is an array (representing\n        // the set of values to be included for the IN query) that may directly\n        // contain additional arrays (each representing an individual field\n        // value), so we disable this validation.\n        if (e.settings.ot && 4 /* ArrayArgument */ !== e.rt) throw e.ht(\"Nested arrays are not supported\");\n        return function(t, e) {\n            const n = [];\n            let r = 0;\n            for (const s of t) {\n                let t = zn(s, e.at(r));\n                null == t && (\n                // Just include nulls in the array for fields being replaced with a\n                // sentinel.\n                t = {\n                    nullValue: \"NULL_VALUE\"\n                }), n.push(t), r++;\n            }\n            return {\n                arrayValue: {\n                    values: n\n                }\n            };\n        }(t, e);\n    }\n    return function(t, e) {\n        if (null === (t = h(t))) return {\n            nullValue: \"NULL_VALUE\"\n        };\n        if (\"number\" == typeof t) return ge(e.C, t);\n        if (\"boolean\" == typeof t) return {\n            booleanValue: t\n        };\n        if (\"string\" == typeof t) return {\n            stringValue: t\n        };\n        if (t instanceof Date) {\n            const n = gt.fromDate(t);\n            return {\n                timestampValue: qe(e.C, n)\n            };\n        }\n        if (t instanceof gt) {\n            // Firestore backend truncates precision down to microseconds. To ensure\n            // offline mode works the same with regards to truncation, perform the\n            // truncation immediately without waiting for the backend to do that.\n            const n = new gt(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));\n            return {\n                timestampValue: qe(e.C, n)\n            };\n        }\n        if (t instanceof Rn) return {\n            geoPointValue: {\n                latitude: t.latitude,\n                longitude: t.longitude\n            }\n        };\n        if (t instanceof In) return {\n            bytesValue: Oe(e.C, t._byteString)\n        };\n        if (t instanceof wn) {\n            const n = e.databaseId, r = t.firestore._databaseId;\n            if (!r.isEqual(n)) throw e.ht(`Document reference is for database ${r.projectId}/${r.database} but should be for database ${n.projectId}/${n.database}`);\n            return {\n                referenceValue: Le(t.firestore._databaseId || e.databaseId, t._key.path)\n            };\n        }\n        throw e.ht(`Unsupported field value: ${it(t)}`);\n    }\n    /**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */ (t, e);\n}\n\nfunction Gn(t, e) {\n    const n = {};\n    return !function(t) {\n        for (const e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;\n        return !0;\n    }(t) ? Et(t, ((t, r) => {\n        const s = zn(r, e.it(t));\n        null != s && (n[t] = s);\n    })) : \n    // If we encounter an empty object, we explicitly add it to the update\n    // mask to ensure that the server creates a map entry.\n    e.path && e.path.length > 0 && e.fieldMask.push(e.path), {\n        mapValue: {\n            fields: n\n        }\n    };\n}\n\nfunction Wn(t) {\n    return !(\"object\" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof gt || t instanceof Rn || t instanceof In || t instanceof wn || t instanceof An);\n}\n\nfunction Kn(t, e, n) {\n    if (!Wn(n) || !function(t) {\n        return \"object\" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));\n    }(n)) {\n        const r = it(n);\n        throw \"an object\" === r ? e.ht(t + \" a custom object\") : e.ht(t + \" \" + r);\n    }\n}\n\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */ function Qn(t, e, n) {\n    if ((\n    // If required, replace the FieldPath Compat class with with the firestore-exp\n    // FieldPath.\n    e = h(e)) instanceof En) return e._internalPath;\n    if (\"string\" == typeof e) return Hn(t, e);\n    throw Jn(\"Field path arguments must be of type string or \", t, \n    /* hasConverter= */ !1, \n    /* path= */ void 0, n);\n}\n\n/**\n * Matches any characters in a field path string that are reserved.\n */ const Yn = new RegExp(\"[~\\\\*/\\\\[\\\\]]\");\n\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName - The publicly visible method name\n * @param path - The dot-separated string form of a field path which will be\n * split on dots.\n * @param targetDoc - The document against which the field path will be\n * evaluated.\n */ function Hn(t, e, n) {\n    if (e.search(Yn) >= 0) throw Jn(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`, t, \n    /* hasConverter= */ !1, \n    /* path= */ void 0, n);\n    try {\n        return new En(...e.split(\".\"))._internalPath;\n    } catch (r) {\n        throw Jn(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t, \n        /* hasConverter= */ !1, \n        /* path= */ void 0, n);\n    }\n}\n\nfunction Jn(t, e, n, r, s) {\n    const i = r && !r.isEmpty(), o = void 0 !== s;\n    let u = `Function ${e}() called with invalid data`;\n    n && (u += \" (via `toFirestore()`)\"), u += \". \";\n    let c = \"\";\n    return (i || o) && (c += \" (found\", i && (c += ` in field ${r}`), o && (c += ` in document ${s}`), \n    c += \")\"), new L(A, u + t + c);\n}\n\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */ function Xn(t, e) {\n    return t.some((t => t.isEqual(e)));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `DocumentSnapshot` contains data read from a document in your Firestore\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\n * get a specific field.\n *\n * For a `DocumentSnapshot` that points to a non-existing document, any data\n * access will return 'undefined'. You can use the `exists()` method to\n * explicitly verify a document's existence.\n */ class Zn {\n    // Note: This class is stripped down version of the DocumentSnapshot in\n    // the legacy SDK. The changes are:\n    // - No support for SnapshotMetadata.\n    // - No support for SnapshotOptions.\n    /** @hideconstructor protected */\n    constructor(t, e, n, r, s) {\n        this._firestore = t, this._userDataWriter = e, this._key = n, this._document = r, \n        this._converter = s;\n    }\n    /** Property of the `DocumentSnapshot` that provides the document's ID. */    get id() {\n        return this._key.path.lastSegment();\n    }\n    /**\n     * The `DocumentReference` for the document included in the `DocumentSnapshot`.\n     */    get ref() {\n        return new wn(this._firestore, this._converter, this._key);\n    }\n    /**\n     * Signals whether or not the document at the snapshot's location exists.\n     *\n     * @returns true if the document exists.\n     */    exists() {\n        return null !== this._document;\n    }\n    /**\n     * Retrieves all fields in the document as an `Object`. Returns `undefined` if\n     * the document doesn't exist.\n     *\n     * @returns An `Object` containing all fields in the document or `undefined`\n     * if the document doesn't exist.\n     */    data() {\n        if (this._document) {\n            if (this._converter) {\n                // We only want to use the converter and create a new DocumentSnapshot\n                // if a converter has been provided.\n                const t = new tr(this._firestore, this._userDataWriter, this._key, this._document, \n                /* converter= */ null);\n                return this._converter.fromFirestore(t);\n            }\n            return this._userDataWriter.convertValue(this._document.data.value);\n        }\n    }\n    /**\n     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\n     * document or field doesn't exist.\n     *\n     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\n     * field.\n     * @returns The data at the specified field location or undefined if no such\n     * field exists in the document.\n     */\n    // We are using `any` here to avoid an explicit cast by our users.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    get(t) {\n        if (this._document) {\n            const e = this._document.data.field(rr(\"DocumentSnapshot.get\", t));\n            if (null !== e) return this._userDataWriter.convertValue(e);\n        }\n    }\n}\n\n/**\n * A `QueryDocumentSnapshot` contains data read from a document in your\n * Firestore database as part of a query. The document is guaranteed to exist\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\n * specific field.\n *\n * A `QueryDocumentSnapshot` offers the same API surface as a\n * `DocumentSnapshot`. Since query results contain only existing documents, the\n * `exists` property will always be true and `data()` will never return\n * 'undefined'.\n */ class tr extends Zn {\n    /**\n     * Retrieves all fields in the document as an `Object`.\n     *\n     * @override\n     * @returns An `Object` containing all fields in the document.\n     */\n    data() {\n        return super.data();\n    }\n}\n\n/**\n * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects\n * representing the results of a query. The documents can be accessed as an\n * array via the `docs` property or enumerated using the `forEach` method. The\n * number of documents can be determined via the `empty` and `size`\n * properties.\n */ class er {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._docs = e, this.query = t;\n    }\n    /** An array of all the documents in the `QuerySnapshot`. */    get docs() {\n        return [ ...this._docs ];\n    }\n    /** The number of documents in the `QuerySnapshot`. */    get size() {\n        return this.docs.length;\n    }\n    /** True if there are no documents in the `QuerySnapshot`. */    get empty() {\n        return 0 === this.docs.length;\n    }\n    /**\n     * Enumerates all of the documents in the `QuerySnapshot`.\n     *\n     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for\n     * each document in the snapshot.\n     * @param thisArg - The `this` binding for the callback.\n     */    forEach(t, e) {\n        this._docs.forEach(t, e);\n    }\n}\n\n/**\n * Returns true if the provided snapshots are equal.\n *\n * @param left - A snapshot to compare.\n * @param right - A snapshot to compare.\n * @returns true if the snapshots are equal.\n */ function nr(t, e) {\n    return t = h(t), e = h(e), t instanceof Zn && e instanceof Zn ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof er && e instanceof er && (bn(t.query, e.query) && _t(t.docs, e.docs, nr));\n}\n\n/**\n * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.\n */ function rr(t, e) {\n    return \"string\" == typeof e ? Hn(t, e) : e instanceof En ? e._internalPath : e._delegate._internalPath;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Firestore query. `QueryConstraint`s are created by invoking {@link where},\n * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link\n * endBefore:1}, {@link (endAt:1)}, {@link limit} or {@link limitToLast} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nclass sr {}\n\n/**\n * Creates a new immutable instance of {@link Query} that is extended to also include\n * additional query constraints.\n *\n * @param query - The {@link Query} instance to use as a base for the new constraints.\n * @param queryConstraints - The list of {@link QueryConstraint}s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */ function ir(t, ...e) {\n    for (const n of e) t = n._apply(t);\n    return t;\n}\n\nclass or extends sr {\n    constructor(t, e, n) {\n        super(), this._t = t, this.gt = e, this.vt = n, this.type = \"where\";\n    }\n    _apply(t) {\n        const e = Fn(t.firestore), n = function(t, e, n, r, s, i, o) {\n            let u;\n            if (s.isKeyField()) {\n                if (\"array-contains\" /* ARRAY_CONTAINS */ === i || \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ === i) throw new L(A, `Invalid Query. You can't perform '${i}' queries on documentId().`);\n                if (\"in\" /* IN */ === i || \"not-in\" /* NOT_IN */ === i) {\n                    br(o, i);\n                    const e = [];\n                    for (const n of o) e.push(vr(r, t, n));\n                    u = {\n                        arrayValue: {\n                            values: e\n                        }\n                    };\n                } else u = vr(r, t, o);\n            } else \"in\" /* IN */ !== i && \"not-in\" /* NOT_IN */ !== i && \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ !== i || br(o, i), \n            u = Bn(n, e, o, \n            /* allowArrays= */ \"in\" /* IN */ === i || \"not-in\" /* NOT_IN */ === i);\n            const c = Zt.create(s, i, u);\n            return function(t, e) {\n                if (e.S()) {\n                    const n = we(t);\n                    if (null !== n && !n.isEqual(e.field)) throw new L(A, `Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '${n.toString()}' and '${e.field.toString()}'`);\n                    const r = de(t);\n                    null !== r && Er(t, e.field, r);\n                }\n                const n = function(t, e) {\n                    for (const n of t.filters) if (e.indexOf(n.op) >= 0) return n.op;\n                    return null;\n                }(t, \n                /**\n * Given an operator, returns the set of operators that cannot be used with it.\n *\n * Operators in a query must adhere to the following set of rules:\n * 1. Only one array operator is allowed.\n * 2. Only one disjunctive operator is allowed.\n * 3. `NOT_EQUAL` cannot be used with another `NOT_EQUAL` operator.\n * 4. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.\n *\n * Array operators: `ARRAY_CONTAINS`, `ARRAY_CONTAINS_ANY`\n * Disjunctive operators: `IN`, `ARRAY_CONTAINS_ANY`, `NOT_IN`\n */\n                function(t) {\n                    switch (t) {\n                      case \"!=\" /* NOT_EQUAL */ :\n                        return [ \"!=\" /* NOT_EQUAL */ , \"not-in\" /* NOT_IN */ ];\n\n                      case \"array-contains\" /* ARRAY_CONTAINS */ :\n                        return [ \"array-contains\" /* ARRAY_CONTAINS */ , \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ , \"not-in\" /* NOT_IN */ ];\n\n                      case \"in\" /* IN */ :\n                        return [ \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ , \"in\" /* IN */ , \"not-in\" /* NOT_IN */ ];\n\n                      case \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ :\n                        return [ \"array-contains\" /* ARRAY_CONTAINS */ , \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ , \"in\" /* IN */ , \"not-in\" /* NOT_IN */ ];\n\n                      case \"not-in\" /* NOT_IN */ :\n                        return [ \"array-contains\" /* ARRAY_CONTAINS */ , \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ , \"in\" /* IN */ , \"not-in\" /* NOT_IN */ , \"!=\" /* NOT_EQUAL */ ];\n\n                      default:\n                        return [];\n                    }\n                }(e.op));\n                if (null !== n) \n                // Special case when it's a duplicate op to give a slightly clearer error message.\n                throw n === e.op ? new L(A, `Invalid query. You cannot use more than one '${e.op.toString()}' filter.`) : new L(A, `Invalid query. You cannot use '${e.op.toString()}' filters with '${n.toString()}' filters.`);\n            }(t, c), c;\n        }(t._query, \"where\", e, t.firestore._databaseId, this._t, this.gt, this.vt);\n        return new mn(t.firestore, t.converter, function(t, e) {\n            const n = t.filters.concat([ e ]);\n            return new fe(t.path, t.collectionGroup, t.explicitOrderBy.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);\n        }(t._query, n));\n    }\n}\n\n/**\n * Creates a {@link QueryConstraint} that enforces that documents must contain the\n * specified field and that the value should satisfy the relation constraint\n * provided.\n *\n * @param fieldPath - The path to compare\n * @param opStr - The operation string (e.g \"&lt;\", \"&lt;=\", \"==\", \"&lt;\",\n *   \"&lt;=\", \"!=\").\n * @param value - The value for comparison\n * @returns The created {@link Query}.\n */ function ur(t, e, n) {\n    const r = e, s = rr(\"where\", t);\n    return new or(s, r, n);\n}\n\nclass cr extends sr {\n    constructor(t, e) {\n        super(), this._t = t, this.bt = e, this.type = \"orderBy\";\n    }\n    _apply(t) {\n        const e = function(t, e, n) {\n            if (null !== t.startAt) throw new L(A, \"Invalid query. You must not call startAt() or startAfter() before calling orderBy().\");\n            if (null !== t.endAt) throw new L(A, \"Invalid query. You must not call endAt() or endBefore() before calling orderBy().\");\n            const r = new ae(e, n);\n            return function(t, e) {\n                if (null === de(t)) {\n                    // This is the first order by. It must match any inequality.\n                    const n = we(t);\n                    null !== n && Er(t, n, e.field);\n                }\n            }(t, r), r;\n        }\n        /**\n * Create a `Bound` from a query and a document.\n *\n * Note that the `Bound` will always include the key of the document\n * and so only the provided document will compare equal to the returned\n * position.\n *\n * Will throw if the document does not contain all fields of the order by\n * of the query or if any of the fields in the order by are an uncommitted\n * server timestamp.\n */ (t._query, this._t, this.bt);\n        return new mn(t.firestore, t.converter, function(t, e) {\n            // TODO(dimond): validate that orderBy does not list the same key twice.\n            const n = t.explicitOrderBy.concat([ e ]);\n            return new fe(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);\n        }(t._query, e));\n    }\n}\n\n/**\n * Creates a {@link QueryConstraint} that sorts the query result by the\n * specified field, optionally in descending order instead of ascending.\n *\n * @param fieldPath - The field to sort by.\n * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If\n * not specified, order will be ascending.\n * @returns The created {@link Query}.\n */ function ar(t, e = \"asc\") {\n    const n = e, r = rr(\"orderBy\", t);\n    return new cr(r, n);\n}\n\nclass hr extends sr {\n    constructor(t, e, n) {\n        super(), this.type = t, this.Et = e, this.Tt = n;\n    }\n    _apply(t) {\n        return new mn(t.firestore, t.converter, function(t, e, n) {\n            return new fe(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);\n        }(t._query, this.Et, this.Tt));\n    }\n}\n\n/**\n * Creates a {@link QueryConstraint} that only returns the first matching documents.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link Query}.\n */ function lr(t) {\n    return ut(\"limit\", t), new hr(\"limit\", t, \"F\" /* First */);\n}\n\n/**\n * Creates a {@link QueryConstraint} that only returns the last matching documents.\n *\n * You must specify at least one `orderBy` clause for `limitToLast` queries,\n * otherwise an exception will be thrown during execution.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link Query}.\n */ function fr(t) {\n    return ut(\"limitToLast\", t), new hr(\"limitToLast\", t, \"L\" /* Last */);\n}\n\nclass dr extends sr {\n    constructor(t, e, n) {\n        super(), this.type = t, this.It = e, this.At = n;\n    }\n    _apply(t) {\n        const e = gr(t, this.type, this.It, this.At);\n        return new mn(t.firestore, t.converter, function(t, e) {\n            return new fe(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);\n        }(t._query, e));\n    }\n}\n\nfunction wr(...t) {\n    return new dr(\"startAt\", t, \n    /*inclusive=*/ !0);\n}\n\nfunction mr(...t) {\n    return new dr(\"startAfter\", t, \n    /*inclusive=*/ !1);\n}\n\nclass pr extends sr {\n    constructor(t, e, n) {\n        super(), this.type = t, this.It = e, this.At = n;\n    }\n    _apply(t) {\n        const e = gr(t, this.type, this.It, this.At);\n        return new mn(t.firestore, t.converter, function(t, e) {\n            return new fe(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);\n        }(t._query, e));\n    }\n}\n\nfunction yr(...t) {\n    return new pr(\"endBefore\", t, \n    /*inclusive=*/ !1);\n}\n\nfunction _r(...t) {\n    return new pr(\"endAt\", t, /*inclusive=*/ !0);\n}\n\n/** Helper function to create a bound from a document or fields */ function gr(t, e, n, r) {\n    if (n[0] = h(n[0]), n[0] instanceof Zn) return function(t, e, n, r, s) {\n        if (!r) throw new L(P, `Can't use a DocumentSnapshot that doesn't exist for ${n}().`);\n        const i = [];\n        // Because people expect to continue/end a query at the exact document\n        // provided, we need to use the implicit sort order rather than the explicit\n        // sort order, because it's guaranteed to contain the document key. That way\n        // the position becomes unambiguous and the query continues/ends exactly at\n        // the provided document. Without the key (by using the explicit sort\n        // orders), multiple documents could match the position, yielding duplicate\n        // results.\n                for (const n of pe(t)) if (n.field.isKeyField()) i.push(Bt(e, r.key)); else {\n            const t = r.data.field(n.field);\n            if (St(t)) throw new L(A, 'Invalid query. You are trying to start or end a query using a document for which the field \"' + n.field + '\" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');\n            if (null === t) {\n                const t = n.field.canonicalString();\n                throw new L(A, `Invalid query. You are trying to start or end a query using a document for which the field '${t}' (used as the orderBy) does not exist.`);\n            }\n            i.push(t);\n        }\n        return new ce(i, s);\n    }\n    /**\n * Converts a list of field values to a `Bound` for the given query.\n */ (t._query, t.firestore._databaseId, e, n[0]._document, r);\n    {\n        const s = Fn(t.firestore);\n        return function(t, e, n, r, s, i) {\n            // Use explicit order by's because it has to match the query the user made\n            const o = t.explicitOrderBy;\n            if (s.length > o.length) throw new L(A, `Too many arguments provided to ${r}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);\n            const u = [];\n            for (let i = 0; i < s.length; i++) {\n                const c = s[i];\n                if (o[i].field.isKeyField()) {\n                    if (\"string\" != typeof c) throw new L(A, `Invalid query. Expected a string for document ID in ${r}(), but got a ${typeof c}`);\n                    if (!me(t) && -1 !== c.indexOf(\"/\")) throw new L(A, `Invalid query. When querying a collection and ordering by documentId(), the value passed to ${r}() must be a plain document ID, but '${c}' contains a slash.`);\n                    const n = t.path.child(X.fromString(c));\n                    if (!et.isDocumentKey(n)) throw new L(A, `Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${r}() must result in a valid document path, but '${n}' is not because it contains an odd number of segments.`);\n                    const s = new et(n);\n                    u.push(Bt(e, s));\n                } else {\n                    const t = Bn(n, r, c);\n                    u.push(t);\n                }\n            }\n            return new ce(u, i);\n        }\n        /**\n * Parses the given `documentIdValue` into a `ReferenceValue`, throwing\n * appropriate errors if the value is anything other than a `DocumentReference`\n * or `string`, or if the string is malformed.\n */ (t._query, t.firestore._databaseId, s, e, n, r);\n    }\n}\n\nfunction vr(t, e, n) {\n    if (\"string\" == typeof (n = h(n))) {\n        if (\"\" === n) throw new L(A, \"Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.\");\n        if (!me(e) && -1 !== n.indexOf(\"/\")) throw new L(A, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${n}' contains a '/' character.`);\n        const r = e.path.child(X.fromString(n));\n        if (!et.isDocumentKey(r)) throw new L(A, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${r}' is not because it has an odd number of segments (${r.length}).`);\n        return Bt(t, new et(r));\n    }\n    if (n instanceof wn) return Bt(t, n._key);\n    throw new L(A, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${it(n)}.`);\n}\n\n/**\n * Validates that the value passed into a disjunctive filter satisfies all\n * array requirements.\n */ function br(t, e) {\n    if (!Array.isArray(t) || 0 === t.length) throw new L(A, `Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);\n    if (t.length > 10) throw new L(A, `Invalid Query. '${e.toString()}' filters support a maximum of 10 elements in the value array.`);\n}\n\nfunction Er(t, e, n) {\n    if (!n.isEqual(e)) throw new L(A, `Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '${e.toString()}' and so you must also use '${e.toString()}' as your first argument to orderBy(), but your first orderBy() is on field '${n.toString()}' instead.`);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Converts Firestore's internal types to the JavaScript types that we expose\n * to the user.\n *\n * @internal\n */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Converts custom model object of type T into `DocumentData` by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to `DocumentData`\n * because we want to provide the user with a more specific error message if\n * their `set()` or fails due to invalid data originating from a `toFirestore()`\n * call.\n */\nfunction Tr(t, e, n) {\n    let r;\n    // Cast to `any` in order to satisfy the union type constraint on\n    // toFirestore().\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return r = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, \n    r;\n}\n\nclass Ir extends class {\n    convertValue(t, e = \"none\") {\n        switch (Ct(t)) {\n          case 0 /* NullValue */ :\n            return null;\n\n          case 1 /* BooleanValue */ :\n            return t.booleanValue;\n\n          case 2 /* NumberValue */ :\n            return xt(t.integerValue || t.doubleValue);\n\n          case 3 /* TimestampValue */ :\n            return this.convertTimestamp(t.timestampValue);\n\n          case 4 /* ServerTimestampValue */ :\n            return this.convertServerTimestamp(t, e);\n\n          case 5 /* StringValue */ :\n            return t.stringValue;\n\n          case 6 /* BlobValue */ :\n            return this.convertBytes(Ft(t.bytesValue));\n\n          case 7 /* RefValue */ :\n            return this.convertReference(t.referenceValue);\n\n          case 8 /* GeoPointValue */ :\n            return this.convertGeoPoint(t.geoPointValue);\n\n          case 9 /* ArrayValue */ :\n            return this.convertArray(t.arrayValue, e);\n\n          case 10 /* ObjectValue */ :\n            return this.convertObject(t.mapValue, e);\n\n          default:\n            throw g();\n        }\n    }\n    convertObject(t, e) {\n        const n = {};\n        return Et(t.fields, ((t, r) => {\n            n[t] = this.convertValue(r, e);\n        })), n;\n    }\n    convertGeoPoint(t) {\n        return new Rn(xt(t.latitude), xt(t.longitude));\n    }\n    convertArray(t, e) {\n        return (t.values || []).map((t => this.convertValue(t, e)));\n    }\n    convertServerTimestamp(t, e) {\n        switch (e) {\n          case \"previous\":\n            const n = qt(t);\n            return null == n ? null : this.convertValue(n, e);\n\n          case \"estimate\":\n            return this.convertTimestamp(Ot(t));\n\n          default:\n            return null;\n        }\n    }\n    convertTimestamp(t) {\n        const e = $t(t);\n        return new gt(e.seconds, e.nanos);\n    }\n    convertDocumentKey(t, e) {\n        const n = X.fromString(t);\n        v(Xe(n));\n        const r = new H(n.get(1), n.get(3)), s = new et(n.popFirst(5));\n        return r.isEqual(e) || \n        // TODO(b/64130202): Somehow support foreign references.\n        p(`Document ${s} contains a document reference within a different database (${r.projectId}/${r.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`), \n        s;\n    }\n} {\n    constructor(t) {\n        super(), this.firestore = t;\n    }\n    convertBytes(t) {\n        return new In(t);\n    }\n    convertReference(t) {\n        const e = this.convertDocumentKey(t, this.firestore._databaseId);\n        return new wn(this.firestore, /* converter= */ null, e);\n    }\n}\n\n/**\n * Reads the document referred to by the specified document reference.\n *\n * All documents are directly fetched from the server, even if the document was\n * previously read or modified. Recent modifications are only reflected in the\n * retrieved `DocumentSnapshot` if they have already been applied by the\n * backend. If the client is offline, the read fails. If you like to use\n * caching or see local modifications, please use the full Firestore SDK.\n *\n * @param reference - The reference of the document to fetch.\n * @returns A Promise resolved with a `DocumentSnapshot` containing the current\n * document contents.\n */ function Ar(t) {\n    const e = un((t = ot(t, wn)).firestore), n = new Ir(t.firestore);\n    return rn(e, [ t._key ]).then((e => {\n        v(1 === e.length);\n        const r = e[0];\n        return new Zn(t.firestore, n, t._key, r.isFoundDocument() ? r : null, t.converter);\n    }));\n}\n\n/**\n * Executes the query and returns the results as a {@link QuerySnapshot}.\n *\n * All queries are executed directly by the server, even if the the query was\n * previously executed. Recent modifications are only reflected in the retrieved\n * results if they have already been applied by the backend. If the client is\n * offline, the operation fails. To see previously cached result and local\n * modifications, use the full Firestore SDK.\n *\n * @param query - The `Query` to execute.\n * @returns A Promise that will be resolved with the results of the query.\n */ function Rr(t) {\n    !function(t) {\n        if (\"L\" /* Last */ === t.limitType && 0 === t.explicitOrderBy.length) throw new L(q, \"limitToLast() queries require specifying at least one orderBy() clause\");\n    }((t = ot(t, mn))._query);\n    const e = un(t.firestore), n = new Ir(t.firestore);\n    return sn(e, t._query).then((e => {\n        const r = e.map((e => new tr(t.firestore, n, e.key, e, t.converter)));\n        return \"L\" /* Last */ === t._query.limitType && \n        // Limit to last queries reverse the orderBy constraint that was\n        // specified by the user. As such, we need to reverse the order of the\n        // results to return the documents in the expected order.\n        r.reverse(), new er(t, r);\n    }));\n}\n\nfunction Pr(t, e, n) {\n    const r = Tr((t = ot(t, wn)).converter, e, n), s = Sn(Fn(t.firestore), \"setDoc\", t._key, r, null !== t.converter, n);\n    return nn(un(t.firestore), [ s.toMutation(t._key, Re.none()) ]);\n}\n\nfunction Vr(t, e, n, ...r) {\n    const s = Fn((t = ot(t, wn)).firestore);\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n        let i;\n    i = \"string\" == typeof (e = h(e)) || e instanceof En ? jn(s, \"updateDoc\", t._key, e, n, r) : Un(s, \"updateDoc\", t._key, e);\n    return nn(un(t.firestore), [ i.toMutation(t._key, Re.exists(!0)) ]);\n}\n\n/**\n * Deletes the document referred to by the specified `DocumentReference`.\n *\n * The deletion will only be reflected in document reads that occur after the\n * returned promise resolves. If the client is offline, the\n * delete fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the document to delete.\n * @returns A `Promise` resolved once the document has been successfully\n * deleted from the backend.\n */ function Nr(t) {\n    return nn(un((t = ot(t, wn)).firestore), [ new De(t._key, Re.none()) ]);\n}\n\n/**\n * Add a new document to specified `CollectionReference` with the given data,\n * assigning it a document ID automatically.\n *\n * The result of this write will only be reflected in document reads that occur\n * after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the collection to add this document to.\n * @param data - An Object containing the data for the new document.\n * @throws Error - If the provided input is not a valid Firestore document.\n * @returns A `Promise` resolved with a `DocumentReference` pointing to the\n * newly created document after it has been written to the backend.\n */ function Dr(t, e) {\n    const n = gn(t = ot(t, pn)), r = Tr(t.converter, e), s = Sn(Fn(t.firestore), \"addDoc\", n._key, r, null !== n.converter, {});\n    return nn(un(t.firestore), [ s.toMutation(n._key, Re.exists(!1)) ]).then((() => n));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or\n * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.\n */ function $r() {\n    return new qn(\"deleteField\");\n}\n\n/**\n * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to\n * include a server-generated timestamp in the written data.\n */ function xr() {\n    return new kn(\"serverTimestamp\");\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array\n * value that already exists on the server. Each specified element that doesn't\n * already exist in the array will be added to the end. If the field being\n * modified is not already an array it will be overwritten with an array\n * containing exactly the specified elements.\n *\n * @param elements - The elements to union into the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`.\n */ function Fr(...t) {\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new Cn(\"arrayUnion\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link (setDoc:1)} or {@link\n * updateDoc:1} that tells the server to remove the given elements from any\n * array value that already exists on the server. All instances of each element\n * specified will be removed from the array. If the field being modified is not\n * already an array it will be overwritten with an empty array.\n *\n * @param elements - The elements to remove from the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */ function Sr(...t) {\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new Ln(\"arrayRemove\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by\n * the given value.\n *\n * If either the operand or the current field value uses floating point\n * precision, all arithmetic follows IEEE 754 semantics. If both values are\n * integers, values outside of JavaScript's safe number range\n * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to\n * precision loss. Furthermore, once processed by the Firestore backend, all\n * integer operations are capped between -2^63 and 2^63-1.\n *\n * If the current field value is not of type `number`, or if the field does not\n * yet exist, the transformation sets the field to the given value.\n *\n * @param n - The value to increment by.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */ function qr(t) {\n    return new Mn(\"increment\", t);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A write batch, used to perform multiple writes as a single atomic unit.\n *\n * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It\n * provides methods for adding writes to the write batch. None of the writes\n * will be committed (or visible locally) until {@link WriteBatch.commit} is\n * called.\n */ class Or {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = !1, \n        this._dataReader = Fn(t);\n    }\n    set(t, e, n) {\n        this._verifyNotCommitted();\n        const r = kr(t, this._firestore), s = Tr(r.converter, e, n), i = Sn(this._dataReader, \"WriteBatch.set\", r._key, s, null !== r.converter, n);\n        return this._mutations.push(i.toMutation(r._key, Re.none())), this;\n    }\n    update(t, e, n, ...r) {\n        this._verifyNotCommitted();\n        const s = kr(t, this._firestore);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                let i;\n        return i = \"string\" == typeof (e = h(e)) || e instanceof En ? jn(this._dataReader, \"WriteBatch.update\", s._key, e, n, r) : Un(this._dataReader, \"WriteBatch.update\", s._key, e), \n        this._mutations.push(i.toMutation(s._key, Re.exists(!0))), this;\n    }\n    /**\n     * Deletes the document referred to by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be deleted.\n     * @returns This `WriteBatch` instance. Used for chaining method calls.\n     */    delete(t) {\n        this._verifyNotCommitted();\n        const e = kr(t, this._firestore);\n        return this._mutations = this._mutations.concat(new De(e._key, Re.none())), this;\n    }\n    /**\n     * Commits all of the writes in this write batch as a single atomic unit.\n     *\n     * The result of these writes will only be reflected in document reads that\n     * occur after the returned promise resolves. If the client is offline, the\n     * write fails. If you would like to see local modifications or buffer writes\n     * until the client is online, use the full Firestore SDK.\n     *\n     * @returns A `Promise` resolved once all of the writes in the batch have been\n     * successfully written to the backend as an atomic unit (note that it won't\n     * resolve while you're offline).\n     */    commit() {\n        return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();\n    }\n    _verifyNotCommitted() {\n        if (this._committed) throw new L(x, \"A write batch can no longer be used after commit() has been called.\");\n    }\n}\n\nfunction kr(t, e) {\n    if ((t = h(t)).firestore !== e) throw new L(A, \"Provided document reference is from a different Firestore instance.\");\n    return t;\n}\n\n/**\n * Creates a write batch, used for performing multiple writes as a single\n * atomic operation. The maximum number of writes allowed in a single WriteBatch\n * is 500.\n *\n * The result of these writes will only be reflected in document reads that\n * occur after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @returns A `WriteBatch` that can be used to atomically execute multiple\n * writes.\n */ function Cr(t) {\n    const e = un(t = ot(t, an));\n    return new Or(t, (t => nn(e, t)));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */ class Lr {\n    constructor(t) {\n        this.datastore = t, \n        // The version of each document that was read during this transaction.\n        this.readVersions = new Map, this.mutations = [], this.committed = !1, \n        /**\n         * A deferred usage error that occurred previously in this transaction that\n         * will cause the transaction to fail once it actually commits.\n         */\n        this.lastWriteError = null, \n        /**\n         * Set of documents that have been written in the transaction.\n         *\n         * When there's more than one write to the same key in a transaction, any\n         * writes after the first are handled differently.\n         */\n        this.writtenDocs = new Set;\n    }\n    async lookup(t) {\n        if (this.ensureCommitNotCalled(), this.mutations.length > 0) throw new L(A, \"Firestore transactions require all reads to be executed before all writes.\");\n        const e = await rn(this.datastore, t);\n        return e.forEach((t => this.recordVersion(t))), e;\n    }\n    set(t, e) {\n        this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n    }\n    update(t, e) {\n        try {\n            this.write(e.toMutation(t, this.preconditionForUpdate(t)));\n        } catch (t) {\n            this.lastWriteError = t;\n        }\n        this.writtenDocs.add(t.toString());\n    }\n    delete(t) {\n        this.write(new De(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n    }\n    async commit() {\n        if (this.ensureCommitNotCalled(), this.lastWriteError) throw this.lastWriteError;\n        const t = this.readVersions;\n        // For each mutation, note that the doc was written.\n                this.mutations.forEach((e => {\n            t.delete(e.key.toString());\n        })), \n        // For each document that was read but not written to, we want to perform\n        // a `verify` operation.\n        t.forEach(((t, e) => {\n            const n = et.fromPath(e);\n            this.mutations.push(new $e(n, this.precondition(n)));\n        })), await nn(this.datastore, this.mutations), this.committed = !0;\n    }\n    recordVersion(t) {\n        let e;\n        if (t.isFoundDocument()) e = t.version; else {\n            if (!t.isNoDocument()) throw g();\n            // Represent a deleted doc using SnapshotVersion.min().\n            e = vt.min();\n        }\n        const n = this.readVersions.get(t.key.toString());\n        if (n) {\n            if (!e.isEqual(n)) \n            // This transaction will fail no matter what.\n            throw new L(F, \"Document version changed between two reads.\");\n        } else this.readVersions.set(t.key.toString(), e);\n    }\n    /**\n     * Returns the version of this document when it was read in this transaction,\n     * as a precondition, or no precondition if it was not read.\n     */    precondition(t) {\n        const e = this.readVersions.get(t.toString());\n        return !this.writtenDocs.has(t.toString()) && e ? e.isEqual(vt.min()) ? Re.exists(!1) : Re.updateTime(e) : Re.none();\n    }\n    /**\n     * Returns the precondition for a document if the operation is an update.\n     */    preconditionForUpdate(t) {\n        const e = this.readVersions.get(t.toString());\n        // The first time a document is written, we want to take into account the\n        // read time and existence\n                if (!this.writtenDocs.has(t.toString()) && e) {\n            if (e.isEqual(vt.min())) \n            // The document doesn't exist, so fail the transaction.\n            // This has to be validated locally because you can't send a\n            // precondition that a document does not exist without changing the\n            // semantics of the backend write to be an insert. This is the reverse\n            // of what we want, since we want to assert that the document doesn't\n            // exist but then send the update and have it fail. Since we can't\n            // express that to the backend, we have to validate locally.\n            // Note: this can change once we can send separate verify writes in the\n            // transaction.\n            throw new L(A, \"Can't update a document that doesn't exist.\");\n            // Document exists, base precondition on document update time.\n                        return Re.updateTime(e);\n        }\n        // Document was not read, so we just use the preconditions for a blind\n        // update.\n        return Re.exists(!0);\n    }\n    write(t) {\n        this.ensureCommitNotCalled(), this.mutations.push(t);\n    }\n    ensureCommitNotCalled() {}\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const Mr = {\n    maxAttempts: 5\n};\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\nclass Ur {\n    constructor(t, e, n, r, s) {\n        this.asyncQueue = t, this.datastore = e, this.options = n, this.updateFunction = r, \n        this.deferred = s, this.Rt = n.maxAttempts, this.Pt = new tn(this.asyncQueue, \"transaction_retry\" /* TransactionRetry */);\n    }\n    /** Runs the transaction and sets the result on deferred. */    run() {\n        this.Rt -= 1, this.Vt();\n    }\n    Vt() {\n        this.Pt.H((async () => {\n            const t = new Lr(this.datastore), e = this.Nt(t);\n            e && e.then((e => {\n                this.asyncQueue.enqueueAndForget((() => t.commit().then((() => {\n                    this.deferred.resolve(e);\n                })).catch((t => {\n                    this.Dt(t);\n                }))));\n            })).catch((t => {\n                this.Dt(t);\n            }));\n        }));\n    }\n    Nt(t) {\n        try {\n            const e = this.updateFunction(t);\n            return !ct(e) && e.catch && e.then ? e : (this.deferred.reject(Error(\"Transaction callback must return a Promise\")), \n            null);\n        } catch (t) {\n            // Do not retry errors thrown by user provided updateFunction.\n            return this.deferred.reject(t), null;\n        }\n    }\n    Dt(t) {\n        this.Rt > 0 && this.$t(t) ? (this.Rt -= 1, this.asyncQueue.enqueueAndForget((() => (this.Vt(), \n        Promise.resolve())))) : this.deferred.reject(t);\n    }\n    $t(t) {\n        if (\"FirebaseError\" === t.name) {\n            // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n            // non-matching document versions with ABORTED. These errors should be retried.\n            const e = t.code;\n            return \"aborted\" === e || \"failed-precondition\" === e || !\n            /**\n * Determines whether an error code represents a permanent error when received\n * in response to a non-write operation.\n *\n * See isPermanentWriteError for classifying write errors.\n */\n            function(t) {\n                switch (t) {\n                  default:\n                    return g();\n\n                  case T:\n                  case I:\n                  case R:\n                  case $:\n                  case O:\n                  case k:\n // Unauthenticated means something went wrong with our token and we need\n                    // to retry with new credentials which will happen automatically.\n                                      case D:\n                    return !1;\n\n                  case A:\n                  case P:\n                  case V:\n                  case N:\n                  case x:\n // Aborted might be retried in some scenarios, but that is dependant on\n                    // the context and should handled individually by the calling code.\n                    // See https://cloud.google.com/apis/design/errors.\n                                      case F:\n                  case S:\n                  case q:\n                  case C:\n                    return !0;\n                }\n            }(e);\n        }\n        return !1;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The Platform's 'document' implementation or null if not available. */ function jr() {\n    // `document` is not always available, e.g. in ReactNative and WebWorkers.\n    // eslint-disable-next-line no-restricted-globals\n    return \"undefined\" != typeof document ? document : null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n *\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\n * in newer versions of TypeScript defines `finally`, which is not available in\n * IE.\n */ class Br {\n    constructor(t, e, n, r, s) {\n        this.asyncQueue = t, this.timerId = e, this.targetTimeMs = n, this.op = r, this.removalCallback = s, \n        this.deferred = new M, this.then = this.deferred.promise.then.bind(this.deferred.promise), \n        // It's normal for the deferred promise to be canceled (due to cancellation)\n        // and so we attach a dummy catch callback to avoid\n        // 'UnhandledPromiseRejectionWarning' log spam.\n        this.deferred.promise.catch((t => {}));\n    }\n    /**\n     * Creates and returns a DelayedOperation that has been scheduled to be\n     * executed on the provided asyncQueue after the provided delayMs.\n     *\n     * @param asyncQueue - The queue to schedule the operation on.\n     * @param id - A Timer ID identifying the type of operation this is.\n     * @param delayMs - The delay (ms) before the operation should be scheduled.\n     * @param op - The operation to run.\n     * @param removalCallback - A callback to be called synchronously once the\n     *   operation is executed or canceled, notifying the AsyncQueue to remove it\n     *   from its delayedOperations list.\n     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n     *   the DelayedOperation class public.\n     */    static createAndSchedule(t, e, n, r, s) {\n        const i = Date.now() + n, o = new Br(t, e, i, r, s);\n        return o.start(n), o;\n    }\n    /**\n     * Starts the timer. This is called immediately after construction by\n     * createAndSchedule().\n     */    start(t) {\n        this.timerHandle = setTimeout((() => this.handleDelayElapsed()), t);\n    }\n    /**\n     * Queues the operation to run immediately (if it hasn't already been run or\n     * canceled).\n     */    skipDelay() {\n        return this.handleDelayElapsed();\n    }\n    /**\n     * Cancels the operation if it hasn't already been executed or canceled. The\n     * promise will be rejected.\n     *\n     * As long as the operation has not yet been run, calling cancel() provides a\n     * guarantee that the operation will not be run.\n     */    cancel(t) {\n        null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new L(T, \"Operation cancelled\" + (t ? \": \" + t : \"\"))));\n    }\n    handleDelayElapsed() {\n        this.asyncQueue.enqueueAndForget((() => null !== this.timerHandle ? (this.clearTimeout(), \n        this.op().then((t => this.deferred.resolve(t)))) : Promise.resolve()));\n    }\n    clearTimeout() {\n        null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), \n        this.timerHandle = null);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class zr {\n    constructor() {\n        // The last promise in the queue.\n        this.xt = Promise.resolve(), \n        // A list of retryable operations. Retryable operations are run in order and\n        // retried with backoff.\n        this.Ft = [], \n        // Is this AsyncQueue being shut down? Once it is set to true, it will not\n        // be changed again.\n        this.St = !1, \n        // Operations scheduled to be queued in the future. Operations are\n        // automatically removed after they are run or canceled.\n        this.qt = [], \n        // visible for testing\n        this.Ot = null, \n        // Flag set while there's an outstanding AsyncQueue operation, used for\n        // assertion sanity-checks.\n        this.kt = !1, \n        // Enabled during shutdown on Safari to prevent future access to IndexedDB.\n        this.Ct = !1, \n        // List of TimerIds to fast-forward delays for.\n        this.Lt = [], \n        // Backoff timer used to schedule retries for retryable operations\n        this.Pt = new tn(this, \"async_queue_retry\" /* AsyncQueueRetry */), \n        // Visibility handler that triggers an immediate retry of all retryable\n        // operations. Meant to speed up recovery when we regain file system access\n        // after page comes into foreground.\n        this.Mt = () => {\n            const t = jr();\n            t && m(\"AsyncQueue\", \"Visibility state changed to \" + t.visibilityState), this.Pt.X();\n        };\n        const t = jr();\n        t && \"function\" == typeof t.addEventListener && t.addEventListener(\"visibilitychange\", this.Mt);\n    }\n    get isShuttingDown() {\n        return this.St;\n    }\n    /**\n     * Adds a new operation to the queue without waiting for it to complete (i.e.\n     * we ignore the Promise result).\n     */    enqueueAndForget(t) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.enqueue(t);\n    }\n    enqueueAndForgetEvenWhileRestricted(t) {\n        this.Ut(), \n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.jt(t);\n    }\n    enterRestrictedMode(t) {\n        if (!this.St) {\n            this.St = !0, this.Ct = t || !1;\n            const e = jr();\n            e && \"function\" == typeof e.removeEventListener && e.removeEventListener(\"visibilitychange\", this.Mt);\n        }\n    }\n    enqueue(t) {\n        if (this.Ut(), this.St) \n        // Return a Promise which never resolves.\n        return new Promise((() => {}));\n        // Create a deferred Promise that we can return to the callee. This\n        // allows us to return a \"hanging Promise\" only to the callee and still\n        // advance the queue even when the operation is not run.\n                const e = new M;\n        return this.jt((() => this.St && this.Ct ? Promise.resolve() : (t().then(e.resolve, e.reject), \n        e.promise))).then((() => e.promise));\n    }\n    enqueueRetryable(t) {\n        this.enqueueAndForget((() => (this.Ft.push(t), this.Bt())));\n    }\n    /**\n     * Runs the next operation from the retryable queue. If the operation fails,\n     * reschedules with backoff.\n     */    async Bt() {\n        if (0 !== this.Ft.length) {\n            try {\n                await this.Ft[0](), this.Ft.shift(), this.Pt.reset();\n            } catch (t) {\n                if (!\n                /**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n                /** Verifies whether `e` is an IndexedDbTransactionError. */\n                function(t) {\n                    // Use name equality, as instanceof checks on errors don't work with errors\n                    // that wrap other errors.\n                    return \"IndexedDbTransactionError\" === t.name;\n                }\n                /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (t)) throw t;\n // Failure will be handled by AsyncQueue\n                                m(\"AsyncQueue\", \"Operation failed with retryable error: \" + t);\n            }\n            this.Ft.length > 0 && \n            // If there are additional operations, we re-schedule `retryNextOp()`.\n            // This is necessary to run retryable operations that failed during\n            // their initial attempt since we don't know whether they are already\n            // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\n            // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\n            // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\n            // call scheduled here.\n            // Since `backoffAndRun()` cancels an existing backoff and schedules a\n            // new backoff on every call, there is only ever a single additional\n            // operation in the queue.\n            this.Pt.H((() => this.Bt()));\n        }\n    }\n    jt(t) {\n        const e = this.xt.then((() => (this.kt = !0, t().catch((t => {\n            this.Ot = t, this.kt = !1;\n            const e = \n            /**\n * Chrome includes Error.message in Error.stack. Other browsers do not.\n * This returns expected output of message + stack when available.\n * @param error - Error or FirestoreError\n */\n            function(t) {\n                let e = t.message || \"\";\n                t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + \"\\n\" + t.stack);\n                return e;\n            }\n            /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n            // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the\n            // legacy SDK.\n            /**\n * A reference to a transaction.\n *\n * The `Transaction` object passed to a transaction's `updateFunction` provides\n * the methods to read and write data within the transaction context. See\n * {@link runTransaction}.\n */ (t);\n            // Re-throw the error so that this.tail becomes a rejected Promise and\n            // all further attempts to chain (via .then) will just short-circuit\n            // and return the rejected Promise.\n            throw p(\"INTERNAL UNHANDLED ERROR: \", e), t;\n        })).then((t => (this.kt = !1, t))))));\n        return this.xt = e, e;\n    }\n    enqueueAfterDelay(t, e, n) {\n        this.Ut(), \n        // Fast-forward delays for timerIds that have been overriden.\n        this.Lt.indexOf(t) > -1 && (e = 0);\n        const r = Br.createAndSchedule(this, t, e, n, (t => this.zt(t)));\n        return this.qt.push(r), r;\n    }\n    Ut() {\n        this.Ot && g();\n    }\n    verifyOperationInProgress() {}\n    /**\n     * Waits until all currently queued tasks are finished executing. Delayed\n     * operations are not run.\n     */    async Gt() {\n        // Operations in the queue prior to draining may have enqueued additional\n        // operations. Keep draining the queue until the tail is no longer advanced,\n        // which indicates that no more new operations were enqueued and that all\n        // operations were executed.\n        let t;\n        do {\n            t = this.xt, await t;\n        } while (t !== this.xt);\n    }\n    /**\n     * For Tests: Determine if a delayed operation with a particular TimerId\n     * exists.\n     */    Wt(t) {\n        for (const e of this.qt) if (e.timerId === t) return !0;\n        return !1;\n    }\n    /**\n     * For Tests: Runs some or all delayed operations early.\n     *\n     * @param lastTimerId - Delayed operations up to and including this TimerId\n     * will be drained. Pass TimerId.All to run all delayed operations.\n     * @returns a Promise that resolves once all operations have been run.\n     */    Kt(t) {\n        // Note that draining may generate more delayed ops, so we do that first.\n        return this.Gt().then((() => {\n            // Run ops in the same order they'd run if they ran naturally.\n            this.qt.sort(((t, e) => t.targetTimeMs - e.targetTimeMs));\n            for (const e of this.qt) if (e.skipDelay(), \"all\" /* All */ !== t && e.timerId === t) break;\n            return this.Gt();\n        }));\n    }\n    /**\n     * For Tests: Skip all subsequent delays for a timer id.\n     */    Qt(t) {\n        this.Lt.push(t);\n    }\n    /** Called once a DelayedOperation is run or canceled. */    zt(t) {\n        // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n        const e = this.qt.indexOf(t);\n        this.qt.splice(e, 1);\n    }\n}\n\nclass Gr {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._firestore = t, this._transaction = e, this._dataReader = Fn(t);\n    }\n    /**\n     * Reads the document referenced by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be read.\n     * @returns A `DocumentSnapshot` with the read data.\n     */    get(t) {\n        const e = kr(t, this._firestore), n = new Ir(this._firestore);\n        return this._transaction.lookup([ e._key ]).then((t => {\n            if (!t || 1 !== t.length) return g();\n            const r = t[0];\n            if (r.isFoundDocument()) return new Zn(this._firestore, n, r.key, r, e.converter);\n            if (r.isNoDocument()) return new Zn(this._firestore, n, e._key, null, e.converter);\n            throw g();\n        }));\n    }\n    set(t, e, n) {\n        const r = kr(t, this._firestore), s = Tr(r.converter, e, n), i = Sn(this._dataReader, \"Transaction.set\", r._key, s, null !== r.converter, n);\n        return this._transaction.set(r._key, i), this;\n    }\n    update(t, e, n, ...r) {\n        const s = kr(t, this._firestore);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                let i;\n        return i = \"string\" == typeof (e = h(e)) || e instanceof En ? jn(this._dataReader, \"Transaction.update\", s._key, e, n, r) : Un(this._dataReader, \"Transaction.update\", s._key, e), \n        this._transaction.update(s._key, i), this;\n    }\n    /**\n     * Deletes the document referred to by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be deleted.\n     * @returns This `Transaction` instance. Used for chaining method calls.\n     */    delete(t) {\n        const e = kr(t, this._firestore);\n        return this._transaction.delete(e._key), this;\n    }\n}\n\n/**\n * Executes the given `updateFunction` and then attempts to commit the changes\n * applied within the transaction. If any document read within the transaction\n * has changed, Cloud Firestore retries the `updateFunction`. If it fails to\n * commit after 5 attempts, the transaction fails.\n *\n * The maximum number of writes allowed in a single transaction is 500.\n *\n * @param firestore - A reference to the Firestore database to run this\n * transaction against.\n * @param updateFunction - The function to execute within the transaction\n * context.\n * @param options - An options object to configure maximum number of attempts to\n * commit.\n * @returns If the transaction completed successfully or was explicitly aborted\n * (the `updateFunction` returned a failed promise), the promise returned by the\n * `updateFunction `is returned here. Otherwise, if the transaction failed, a\n * rejected promise with the corresponding failure error is returned.\n */ function Wr(t, e, n) {\n    const r = un(t = ot(t, an)), s = Object.assign(Object.assign({}, Mr), n);\n    !function(t) {\n        if (t.maxAttempts < 1) throw new L(A, \"Max attempts must be at least 1\");\n    }(s);\n    const i = new M;\n    return new Ur(new zr, r, s, (n => e(new Gr(t, n))), i).run(), i.promise;\n}\n\n/**\n * Firestore Lite\n *\n * @remarks Firestore Lite is a small online-only SDK that allows read\n * and write access to your Firestore database. All operations connect\n * directly to the backend, and `onSnapshot()` APIs are not supported.\n * @packageDocumentation\n */ !function(t) {\n    f = t;\n}(`${s}_lite`), n(new i(\"firestore/lite\", ((t, {instanceIdentifier: e, options: n}) => {\n    const r = t.getProvider(\"app\").getImmediate(), s = new an(new z(t.getProvider(\"auth-internal\")), new Q(t.getProvider(\"app-check-internal\")), function(t, e) {\n        if (!Object.prototype.hasOwnProperty.apply(t.options, [ \"projectId\" ])) throw new L(A, '\"projectId\" not provided in firebase.initializeApp.');\n        return new H(t.options.projectId, e);\n    }\n    /**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (r, e), r);\n    return n && s._setSettings(n), s;\n}), \"PUBLIC\").setMultipleInstances(!0)), \n// RUNTIME_ENV and BUILD_TARGET are replaced by real values during the compilation\nr(\"firestore-lite\", \"3.5.0\", \"\"), r(\"firestore-lite\", \"3.5.0\", \"__BUILD_TARGET__\");\n\nexport { In as Bytes, pn as CollectionReference, wn as DocumentReference, Zn as DocumentSnapshot, En as FieldPath, An as FieldValue, an as Firestore, L as FirestoreError, Rn as GeoPoint, mn as Query, sr as QueryConstraint, tr as QueryDocumentSnapshot, er as QuerySnapshot, gt as Timestamp, Gr as Transaction, Or as WriteBatch, Dr as addDoc, Sr as arrayRemove, Fr as arrayUnion, yn as collection, _n as collectionGroup, fn as connectFirestoreEmulator, Nr as deleteDoc, $r as deleteField, gn as doc, Tn as documentId, _r as endAt, yr as endBefore, Ar as getDoc, Rr as getDocs, ln as getFirestore, qr as increment, hn as initializeFirestore, lr as limit, fr as limitToLast, ar as orderBy, ir as query, bn as queryEqual, vn as refEqual, Wr as runTransaction, xr as serverTimestamp, Pr as setDoc, w as setLogLevel, nr as snapshotEqual, mr as startAfter, wr as startAt, dn as terminate, Vr as updateDoc, ur as where, Cr as writeBatch };\n//# sourceMappingURL=index.browser.esm2017.js.map\n"],"names":["$25RCP","parcelRequire","$eba07af7d5564af0$var$ERROR_DESCRIPTION_MAP","$eba07af7d5564af0$var$ERROR_FACTORY","$ffjl9","ErrorFactory","$eba07af7d5564af0$var$isServerError","error","FirebaseError","code","includes","$eba07af7d5564af0$var$getInstallationsEndpoint","projectId","$eba07af7d5564af0$var$extractAuthTokenInfoFromResponse","response","token","requestStatus","expiresIn","responseExpiresIn","Number","replace","creationTime","Date","now","$eba07af7d5564af0$var$getErrorFromResponse","requestName","json","create","serverCode","errorData","serverMessage","message","serverStatus","status","$eba07af7d5564af0$var$getHeaders","apiKey","Headers","Accept","appConfig","refreshToken","append","$eba07af7d5564af0$var$getAuthorizationHeader","headers","$eba07af7d5564af0$var$retryIfServerError","fn","result","$eba07af7d5564af0$var$sleep","ms","Promise","resolve","$eba07af7d5564af0$var$VALID_FID_PATTERN","$eba07af7d5564af0$var$generateFid","fidByteArray","Uint8Array","self","crypto","msCrypto","getRandomValues","fid","substr","$eba07af7d5564af0$var$encode","test","_a","$eba07af7d5564af0$var$getKey","appName","appId","$eba07af7d5564af0$var$fidChangeCallbacks","Map","$eba07af7d5564af0$var$fidChanged","key","$eba07af7d5564af0$var$callFidChangeCallbacks","callbacks","get","callback","$eba07af7d5564af0$var$getBroadcastChannel","$eba07af7d5564af0$var$broadcastChannel","BroadcastChannel","onmessage","e","$eba07af7d5564af0$var$closeBroadcastChannel","size","close","$eba07af7d5564af0$var$getDbPromise","$eba07af7d5564af0$var$dbPromise","$cCiiD","openDB","upgrade","db","oldVersion","createObjectStore","async","$eba07af7d5564af0$var$set","value","tx","transaction","objectStore","oldValue","put","done","$eba07af7d5564af0$var$remove","$eba07af7d5564af0$var$update","updateFn","store","newValue","$eba07af7d5564af0$var$getInstallationEntry","installations","registrationPromise","installationEntry1","oldEntry","installationEntry","$eba07af7d5564af0$var$clearTimedOutRequest","registrationStatus","$eba07af7d5564af0$var$updateOrCreateInstallationEntry","entryWithPromise","navigator","onLine","reject","inProgressEntry","registrationTime","registeredInstallationEntry","endpoint","heartbeatService","heartbeatServiceProvider","getImmediate","optional","heartbeatsHeader","getHeartbeatsHeader","body","sdkVersion","request","method","JSON","stringify","fetch","ok","responseValue","authToken","$eba07af7d5564af0$var$createInstallationRequest","customData","$eba07af7d5564af0$var$registerInstallation","$eba07af7d5564af0$var$waitUntilFidRegistration","$eba07af7d5564af0$var$triggerRegistrationIfNecessary","entry","$eba07af7d5564af0$var$updateInstallationRequest","$eba07af7d5564af0$var$generateAuthTokenRequest","$eba07af7d5564af0$var$getGenerateAuthTokenEndpoint","$eba07af7d5564af0$var$getHeadersWithAuth","installation","$7vF8m","Logger","$6abf5f471d8ed3f5$var$promiseAllSettled","promises","$6abf5f471d8ed3f5$var$wrapGtag","gtagCore","initializationPromisesMap3","command","idOrNameOrParams","gtagParams","initializationPromisesMap2","dynamicConfigPromisesList2","measurementId","initializationPromisesToWaitFor","gaSendToList","Array","isArray","dynamicConfigResults","sendToId","foundConfig","find","config","initializationPromise","push","length","Object","values","all","$6abf5f471d8ed3f5$var$logger","$6abf5f471d8ed3f5$var$gtagOnEvent","dynamicConfigPromisesList3","measurementIdToAppId1","correspondingAppId","initializationPromisesMap1","dynamicConfigPromisesList1","$6abf5f471d8ed3f5$var$gtagOnConfig","measurementIdToAppId2","$6abf5f471d8ed3f5$var$ERRORS","$6abf5f471d8ed3f5$var$defaultRetryData","getThrottleMetadata","this","throttleMetadata","setThrottleMetadata","metadata","intervalMillis","$6abf5f471d8ed3f5$var$getHeaders","$6abf5f471d8ed3f5$var$fetchDynamicConfigWithRetry","app","timeoutMillis","options","$6abf5f471d8ed3f5$var$ERROR_FACTORY","retryData","backoffCount","throttleEndTimeMillis","signal","$6abf5f471d8ed3f5$var$AnalyticsAbortSignal","abort","undefined","$6abf5f471d8ed3f5$var$attemptFetchDynamicConfigWithRetry","appFields","backoffMillis","Math","max","timeout","setTimeout","addEventListener","clearTimeout","$6abf5f471d8ed3f5$var$setAbortableTimeout","warn","appUrl","errorMessage","jsonResponse","_ignored","httpStatus","responseMessage","$6abf5f471d8ed3f5$var$fetchDynamicConfig","deleteThrottleMetadata","e1","_b","calculateBackoffMillis","debug","listener","listeners","forEach","$6abf5f471d8ed3f5$var$defaultEventParametersForInit","scriptTags","window","document","getElementsByTagName","tag","src","dataLayerName1","head","appendChild","script","dataLayerName2","dataLayer","initializationPromisesMap4","dynamicConfigPromisesList4","measurementIdToAppId3","dataLayerName3","gtagFunctionName","gtagFunction","eventName","eventParams","global","assign","send_to","$135e783d297c6b1e$var$l","isAuthenticated","uid","toKey","isEqual","t","constructor","UNAUTHENTICATED","GOOGLE_CREDENTIALS","FIRST_PARTY","MOCK_USER","$135e783d297c6b1e$var$f","$135e783d297c6b1e$var$d","o","$135e783d297c6b1e$var$m","logLevel","u","DEBUG","n","map","$135e783d297c6b1e$var$_","$135e783d297c6b1e$var$p","ERROR","$135e783d297c6b1e$var$y","WARN","$135e783d297c6b1e$var$g","Error","$135e783d297c6b1e$var$v","$135e783d297c6b1e$var$b","$135e783d297c6b1e$export$8fada0bf726bf278","c","super","toString","name","$135e783d297c6b1e$var$U","user","type","set","$135e783d297c6b1e$var$j","getToken","invalidateToken","start","enqueueRetryable","shutdown","$135e783d297c6b1e$var$z","auth","then","accessToken","getUid","t1","onInit","$135e783d297c6b1e$var$G","l","getAuthHeaderValueForFirstParty","h","i","r","$135e783d297c6b1e$var$W","$135e783d297c6b1e$var$K","$135e783d297c6b1e$var$Q","appCheck","t2","m","$135e783d297c6b1e$var$Y","s","databaseId","persistenceKey","host","ssl","forceLongPolling","autoDetectLongPolling","useFetchStreams","$135e783d297c6b1e$var$H","static","isDefaultDatabase","database","$135e783d297c6b1e$var$J","len","comparator","child","t3","segments","slice","offset","limit","construct","popFirst","popLast","firstSegment","lastSegment","isEmpty","isPrefixOf","isImmediateParentOf","toArray","min","$135e783d297c6b1e$var$X","canonicalString","join","t4","indexOf","split","filter","$135e783d297c6b1e$var$Z","$135e783d297c6b1e$var$tt","isValidIdentifier","isKeyField","$135e783d297c6b1e$var$et","fromString","emptyPath","collectionGroup","path","hasCollectionId","getCollectionGroup","getCollectionPath","$135e783d297c6b1e$var$nt","$135e783d297c6b1e$var$rt","isDocumentKey","$135e783d297c6b1e$var$st","$135e783d297c6b1e$var$it","t5","substring","$135e783d297c6b1e$var$ot","_delegate","$135e783d297c6b1e$var$ct","$135e783d297c6b1e$var$at","$135e783d297c6b1e$var$ht","BatchGetDocuments","Commit","RunQuery","$135e783d297c6b1e$var$lt","$135e783d297c6b1e$var$ft","$135e783d297c6b1e$var$dt","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","$135e783d297c6b1e$var$wt","v","t7","e2","T","I","A","R","e3","n1","databaseInfo","p","g","V","P","t6","statusText","$135e783d297c6b1e$var$mt","e4","floor","random","$135e783d297c6b1e$var$pt","charAt","$135e783d297c6b1e$var$yt","$135e783d297c6b1e$var$_t","t8","every","$135e783d297c6b1e$export$d9bcbd5e1ff81430","fromMillis","getTime","toDate","toMillis","seconds","nanoseconds","_compareTo","toJSON","valueOf","String","padStart","$135e783d297c6b1e$var$vt","compareTo","timestamp","toMicroseconds","toTimestamp","$135e783d297c6b1e$var$bt","prototype","hasOwnProperty","call","$135e783d297c6b1e$var$Et","$135e783d297c6b1e$var$Tt","insert","root","copy","$135e783d297c6b1e$var$At","BLACK","remove","left","right","minKey","maxKey","inorderTraversal","reverseTraversal","getIterator","$135e783d297c6b1e$var$It","getIteratorFrom","getReverseIterator","getReverseIteratorFrom","EMPTY","getNext","nodeStack","pop","isReverse","hasNext","peek","color","fixUp","removeMin","isRed","moveRedLeft","rotateRight","moveRedRight","rotateLeft","colorFlip","RED","checkMaxDepth","check","pow","$135e783d297c6b1e$var$Rt","has","data","first","last","forEachInRange","forEachWhile","firstAfterOrEqual","$135e783d297c6b1e$var$Pt","add","delete","unionWith","t9","iter","$135e783d297c6b1e$var$Vt","t10","fields","covers","t11","sort","$135e783d297c6b1e$var$_iterator","Symbol","iterator","$135e783d297c6b1e$var$Nt","atob","t12","e5","fromCharCode","next","binaryString","charCodeAt","toBase64","btoa","toUint8Array","approximateByteSize","EMPTY_BYTE_STRING","$135e783d297c6b1e$var$Dt","RegExp","$135e783d297c6b1e$var$$t","exec","nanos","$135e783d297c6b1e$var$xt","$135e783d297c6b1e$var$Ft","fromBase64String","fromUint8Array","$135e783d297c6b1e$var$St","mapValue","__type__","stringValue","$135e783d297c6b1e$var$qt","__previous_value__","$135e783d297c6b1e$var$Ot","__local_write_time__","timestampValue","$135e783d297c6b1e$var$Ct","t13","$135e783d297c6b1e$var$Lt","t14","e6","n2","booleanValue","bytesValue","referenceValue","geoPointValue","latitude","longitude","integerValue","doubleValue","isNaN","arrayValue","t15","$135e783d297c6b1e$var$Gt","$135e783d297c6b1e$var$Wt","$135e783d297c6b1e$var$Kt","$135e783d297c6b1e$var$Qt","t21","$135e783d297c6b1e$var$Yt","field","getFieldsMap","setAll","t22","applyChanges","s1","e9","n4","e8","clone","$135e783d297c6b1e$var$Ht","empty","convertToFoundDocument","version","documentType","documentState","convertToNoDocument","convertToUnknownDocument","setHasCommittedMutations","setHasLocalMutations","setReadTime","readTime","hasLocalMutations","hasCommittedMutations","hasPendingWrites","isValidDocument","isFoundDocument","isNoDocument","isUnknownDocument","mutableCopy","$135e783d297c6b1e$var$Jt","orderBy","filters","startAt","endAt","D","$135e783d297c6b1e$var$Xt","$135e783d297c6b1e$var$ce","position","inclusive","$135e783d297c6b1e$var$ae","dir","$135e783d297c6b1e$var$fe","explicitOrderBy","limitType","q","O","$135e783d297c6b1e$var$de","$135e783d297c6b1e$var$we","S","$135e783d297c6b1e$var$pe","keyField","$135e783d297c6b1e$var$ye","n5","$135e783d297c6b1e$var$ge","t26","e11","isInteger","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","k","$135e783d297c6b1e$var$ve","_","$135e783d297c6b1e$var$be","$135e783d297c6b1e$var$Ee","elements","$135e783d297c6b1e$var$Te","$135e783d297c6b1e$var$Ie","C","L","$135e783d297c6b1e$var$Re","isNone","updateTime","exists","$135e783d297c6b1e$var$Pe","$135e783d297c6b1e$var$Ve","getFieldMask","precondition","fieldTransforms","$135e783d297c6b1e$var$Ne","fieldMask","$135e783d297c6b1e$var$De","$135e783d297c6b1e$var$$e","$135e783d297c6b1e$var$xe","asc","desc","$135e783d297c6b1e$var$Fe","in","$135e783d297c6b1e$var$Se","$135e783d297c6b1e$var$qe","toISOString","$135e783d297c6b1e$var$Oe","$135e783d297c6b1e$var$ke","$135e783d297c6b1e$var$Ce","t27","fromTimestamp","$135e783d297c6b1e$var$Le","t28","$135e783d297c6b1e$var$Me","$135e783d297c6b1e$var$Ue","t29","e12","$135e783d297c6b1e$var$Xe","$135e783d297c6b1e$var$je","$135e783d297c6b1e$var$Be","$135e783d297c6b1e$var$ze","$135e783d297c6b1e$var$Qe","$135e783d297c6b1e$var$Ye","$135e783d297c6b1e$var$He","fieldPath","$135e783d297c6b1e$var$Je","t37","fieldPaths","$135e783d297c6b1e$var$Ze","$135e783d297c6b1e$var$en","et","tt","t38","authCredentials","appCheckCredentials","Z","catch","t39","terminate","$135e783d297c6b1e$var$nn","t40","writes","t31","e14","n7","update","updateMask","verify","updateTransforms","transform","setToServerValue","appendMissingElements","removeAllFromArray","increment","currentDocument","$135e783d297c6b1e$var$We","$135e783d297c6b1e$var$sn","t42","e17","n8","r2","t32","e15","structuredQuery","parent","from","collectionId","allDescendants","t33","t34","op","unaryFilter","fieldFilter","compositeFilter","where","t35","t36","direction","before","$135e783d297c6b1e$var$Ke","t43","newFoundDocument","$135e783d297c6b1e$var$on","$135e783d297c6b1e$var$un","t44","_terminated","e18","_databaseId","n9","r3","_persistenceKey","_freezeSettings","experimentalForceLongPolling","experimentalAutoDetectLongPolling","bind","_authCredentials","_appCheckCredentials","$135e783d297c6b1e$var$cn","credentials","cacheSizeBytes","ignoreUndefinedProperties","t45","e19","$135e783d297c6b1e$export$d0e2b3272814ce82","_app","_initialized","_settingsFrozen","_terminateTask","_setSettings","t46","_settings","client","sessionIndex","iamToken","authTokenFactory","_getSettings","_delete","_terminate","settings","$135e783d297c6b1e$export$6be62b059fb12175","_path","_key","id","$135e783d297c6b1e$export$ab5a1a47940a200e","firestore","converter","withConverter","$135e783d297c6b1e$export$62297b13309008b2","_query","$135e783d297c6b1e$export$bf5175b0c24981cd","$135e783d297c6b1e$export$a1a8fea822d17659","_internalPath","$135e783d297c6b1e$export$9f55f2e2bf8c2fc1","t48","_byteString","$135e783d297c6b1e$export$c58bc8ee7ecc248d","_methodName","$135e783d297c6b1e$export$f9f719d1b6419c4","_lat","_long","isFinite","$135e783d297c6b1e$var$Pn","$135e783d297c6b1e$var$Vn","toMutation","$135e783d297c6b1e$var$Dn","$135e783d297c6b1e$var$$n","rt","st","it","ot","ut","ct","nt","at","ht","$135e783d297c6b1e$var$Jn","methodName","lt","ft","contains","$135e783d297c6b1e$var$xn","dt","$135e783d297c6b1e$var$Fn","$135e783d297c6b1e$var$Sn","t50","merge","mergeFields","$135e783d297c6b1e$var$Kn","$135e783d297c6b1e$var$Gn","a","t49","$135e783d297c6b1e$var$Qn","$135e783d297c6b1e$var$Xn","$135e783d297c6b1e$var$zn","t55","e20","$135e783d297c6b1e$var$Wn","_toFieldTransform","nullValue","fromDate","t56","e21","t57","getPrototypeOf","$135e783d297c6b1e$var$Hn","$135e783d297c6b1e$var$Yn","search","t58","some","$135e783d297c6b1e$export$acab0e6ef25eb301","ref","_firestore","_converter","_document","$135e783d297c6b1e$export$6d4d04e42af6b03c","_userDataWriter","fromFirestore","convertValue","$135e783d297c6b1e$var$rr","$135e783d297c6b1e$export$8f21149d8133945c","docs","_docs","query","$135e783d297c6b1e$var$Tr","toFirestore","$135e783d297c6b1e$var$Ir","convertTimestamp","convertServerTimestamp","convertBytes","convertReference","convertGeoPoint","convertArray","convertObject","t68","t69","convertDocumentKey","$135e783d297c6b1e$export$81d3477bd73c86ef","t70","e31","e32","reverse","$135e783d297c6b1e$export$a13890143fb1c2dd","arguments","N","$135e783d297c6b1e$export$2a111da947c407d2","t86","instanceIdentifier","e37","getProvider","apply","setMultipleInstances","$1ac6e48565c64d78$var$app","initializeApp","authDomain","storageBucket","messagingSenderId","$1ac6e48565c64d78$var$db","$ix4Jr","_getProvider","identifier","$1ac6e48565c64d78$var$colWatchedRef","snapshot","queue","doc1","console","log","err","watched","doc2","querySelector","preventDefault","target","poster_path","$fN00N","filmArray","original_title","genres","release_date","getFullYear"],"version":3,"file":"films.b4e67526.js.map"}