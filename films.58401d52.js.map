{"mappings":"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","sources":["node_modules/@firebase/firestore/dist/lite/index.browser.esm2017.js","src/js/firebase.js","node_modules/@firebase/installations/src/functions/common.ts","node_modules/@firebase/installations/src/functions/create-installation-request.ts","node_modules/@firebase/installations/src/helpers/fid-changed.ts","node_modules/@firebase/installations/src/util/sleep.ts","node_modules/@firebase/installations/src/helpers/buffer-to-base64-url-safe.ts","node_modules/@firebase/installations/src/helpers/generate-fid.ts","node_modules/@firebase/installations/src/util/get-key.ts","node_modules/@firebase/installations/src/helpers/idb-manager.ts","node_modules/@firebase/installations/src/helpers/get-installation-entry.ts","node_modules/@firebase/installations/src/functions/generate-auth-token-request.ts","node_modules/@firebase/installations/src/helpers/refresh-auth-token.ts","node_modules/@firebase/installations/src/api/get-id.ts","node_modules/@firebase/installations/src/api/get-token.ts","node_modules/@firebase/installations/src/functions/delete-installation-request.ts","node_modules/@firebase/installations/src/api/delete-installations.ts","node_modules/@firebase/installations/src/functions/config.ts","node_modules/@firebase/installations/src/api/on-id-change.ts","node_modules/@firebase/installations/src/api/get-installations.ts","node_modules/@firebase/installations/src/helpers/extract-app-config.ts","node_modules/@firebase/analytics/src/helpers.ts","node_modules/@firebase/analytics/src/get-config.ts","node_modules/@firebase/analytics/src/errors.ts","node_modules/@firebase/analytics/src/functions.ts","node_modules/@firebase/analytics/src/initialize-analytics.ts","node_modules/@firebase/analytics/src/api.ts","node_modules/@firebase/analytics/src/index.ts"],"sourcesContent":["import { _getProvider, getApp as t, _removeServiceInstance as e, _registerComponent as n, registerVersion as r, SDK_VERSION as s } from \"@firebase/app\";\n\nimport { Component as i } from \"@firebase/component\";\n\nimport { Logger as o, LogLevel as u } from \"@firebase/logger\";\n\nimport { FirebaseError as c, createMockUserToken as a, getModularInstance as h } from \"@firebase/util\";\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nclass l {\n    constructor(t) {\n        this.uid = t;\n    }\n    isAuthenticated() {\n        return null != this.uid;\n    }\n    /**\n     * Returns a key representing this user, suitable for inclusion in a\n     * dictionary.\n     */    toKey() {\n        return this.isAuthenticated() ? \"uid:\" + this.uid : \"anonymous-user\";\n    }\n    isEqual(t) {\n        return t.uid === this.uid;\n    }\n}\n\n/** A user with a null UID. */ l.UNAUTHENTICATED = new l(null), \n// TODO(mikelehen): Look into getting a proper uid-equivalent for\n// non-FirebaseAuth providers.\nl.GOOGLE_CREDENTIALS = new l(\"google-credentials-uid\"), l.FIRST_PARTY = new l(\"first-party-uid\"), \nl.MOCK_USER = new l(\"mock-user\");\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet f = \"9.10.0\";\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst d = new o(\"@firebase/firestore\");\n\n/**\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\n *\n * @param logLevel - The verbosity you set for activity and error logging. Can\n *   be any of the following values:\n *\n *   <ul>\n *     <li>`debug` for the most verbose logging level, primarily for\n *     debugging.</li>\n *     <li>`error` to log errors only.</li>\n *     <li><code>`silent` to turn off logging.</li>\n *   </ul>\n */ function w(t) {\n    d.setLogLevel(t);\n}\n\nfunction m(t, ...e) {\n    if (d.logLevel <= u.DEBUG) {\n        const n = e.map(_);\n        d.debug(`Firestore (${f}): ${t}`, ...n);\n    }\n}\n\nfunction p(t, ...e) {\n    if (d.logLevel <= u.ERROR) {\n        const n = e.map(_);\n        d.error(`Firestore (${f}): ${t}`, ...n);\n    }\n}\n\n/**\n * @internal\n */ function y(t, ...e) {\n    if (d.logLevel <= u.WARN) {\n        const n = e.map(_);\n        d.warn(`Firestore (${f}): ${t}`, ...n);\n    }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */ function _(t) {\n    if (\"string\" == typeof t) return t;\n    try {\n        return e = t, JSON.stringify(e);\n    } catch (e) {\n        // Converting to JSON failed, just log the object directly\n        return t;\n    }\n    /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n    /** Formats an object as a JSON string, suitable for logging. */\n    var e;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */ function g(t = \"Unexpected state\") {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    const e = `FIRESTORE (${f}) INTERNAL ASSERTION FAILED: ` + t;\n    // NOTE: We don't use FirestoreError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw p(e), new Error(e);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */ function v(t, e) {\n    t || g();\n}\n\n/**\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\n * instance of `T` before casting.\n */ function b(t, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n    return t;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const E = \"ok\", T = \"cancelled\", I = \"unknown\", A = \"invalid-argument\", R = \"deadline-exceeded\", P = \"not-found\", V = \"already-exists\", N = \"permission-denied\", D = \"unauthenticated\", $ = \"resource-exhausted\", x = \"failed-precondition\", F = \"aborted\", S = \"out-of-range\", q = \"unimplemented\", O = \"internal\", k = \"unavailable\", C = \"data-loss\";\n\n/** An error returned by a Firestore operation. */ class L extends c {\n    /** @hideconstructor */\n    constructor(\n    /**\n     * The backend error code associated with this error.\n     */\n    t, \n    /**\n     * A custom error description.\n     */\n    e) {\n        super(t, e), this.code = t, this.message = e, \n        // HACK: We write a toString property directly because Error is not a real\n        // class and so inheritance does not work correctly. We could alternatively\n        // do the same \"back-door inheritance\" trick that FirebaseError does.\n        this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class M {\n    constructor() {\n        this.promise = new Promise(((t, e) => {\n            this.resolve = t, this.reject = e;\n        }));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class U {\n    constructor(t, e) {\n        this.user = e, this.type = \"OAuth\", this.headers = new Map, this.headers.set(\"Authorization\", `Bearer ${t}`);\n    }\n}\n\n/**\n * A CredentialsProvider that always yields an empty token.\n * @internal\n */ class j {\n    getToken() {\n        return Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {\n        // Fire with initial user.\n        t.enqueueRetryable((() => e(l.UNAUTHENTICATED)));\n    }\n    shutdown() {}\n}\n\n/**\n * A CredentialsProvider that always returns a constant token. Used for\n * emulator token mocking.\n */ class B {\n    constructor(t) {\n        this.token = t, \n        /**\n         * Stores the listener registered with setChangeListener()\n         * This isn't actually necessary since the UID never changes, but we use this\n         * to verify the listen contract is adhered to in tests.\n         */\n        this.changeListener = null;\n    }\n    getToken() {\n        return Promise.resolve(this.token);\n    }\n    invalidateToken() {}\n    start(t, e) {\n        this.changeListener = e, \n        // Fire with initial user.\n        t.enqueueRetryable((() => e(this.token.user)));\n    }\n    shutdown() {\n        this.changeListener = null;\n    }\n}\n\n/** Credential provider for the Lite SDK. */ class z {\n    constructor(t) {\n        this.auth = null, t.onInit((t => {\n            this.auth = t;\n        }));\n    }\n    getToken() {\n        return this.auth ? this.auth.getToken().then((t => t ? (v(\"string\" == typeof t.accessToken), \n        new U(t.accessToken, new l(this.auth.getUid()))) : null)) : Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {}\n    shutdown() {}\n}\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */ class G {\n    constructor(t, e, n, r) {\n        this.t = t, this.i = e, this.o = n, this.u = r, this.type = \"FirstParty\", this.user = l.FIRST_PARTY, \n        this.h = new Map;\n    }\n    /** Gets an authorization token, using a provided factory function, or falling back to First Party GAPI. */    l() {\n        return this.u ? this.u() : (\n        // Make sure this really is a Gapi client.\n        v(!(\"object\" != typeof this.t || null === this.t || !this.t.auth || !this.t.auth.getAuthHeaderValueForFirstParty)), \n        this.t.auth.getAuthHeaderValueForFirstParty([]));\n    }\n    get headers() {\n        this.h.set(\"X-Goog-AuthUser\", this.i);\n        // Use array notation to prevent minification\n        const t = this.l();\n        return t && this.h.set(\"Authorization\", t), this.o && this.h.set(\"X-Goog-Iam-Authorization-Token\", this.o), \n        this.h;\n    }\n}\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */ class W {\n    constructor(t, e, n, r) {\n        this.t = t, this.i = e, this.o = n, this.u = r;\n    }\n    getToken() {\n        return Promise.resolve(new G(this.t, this.i, this.o, this.u));\n    }\n    start(t, e) {\n        // Fire with initial uid.\n        t.enqueueRetryable((() => e(l.FIRST_PARTY)));\n    }\n    shutdown() {}\n    invalidateToken() {}\n}\n\nclass K {\n    constructor(t) {\n        this.value = t, this.type = \"AppCheck\", this.headers = new Map, t && t.length > 0 && this.headers.set(\"x-firebase-appcheck\", this.value);\n    }\n}\n\n/** AppCheck token provider for the Lite SDK. */ class Q {\n    constructor(t) {\n        this.m = t, this.appCheck = null, t.onInit((t => {\n            this.appCheck = t;\n        }));\n    }\n    getToken() {\n        return this.appCheck ? this.appCheck.getToken().then((t => t ? (v(\"string\" == typeof t.token), \n        new K(t.token)) : null)) : Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {}\n    shutdown() {}\n}\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Y {\n    /**\n     * Constructs a DatabaseInfo using the provided host, databaseId and\n     * persistenceKey.\n     *\n     * @param databaseId - The database to use.\n     * @param appId - The Firebase App Id.\n     * @param persistenceKey - A unique identifier for this Firestore's local\n     * storage (used in conjunction with the databaseId).\n     * @param host - The Firestore backend host to connect to.\n     * @param ssl - Whether to use SSL when connecting.\n     * @param forceLongPolling - Whether to use the forceLongPolling option\n     * when using WebChannel as the network transport.\n     * @param autoDetectLongPolling - Whether to use the detectBufferingProxy\n     * option when using WebChannel as the network transport.\n     * @param useFetchStreams Whether to use the Fetch API instead of\n     * XMLHTTPRequest\n     */\n    constructor(t, e, n, r, s, i, o, u) {\n        this.databaseId = t, this.appId = e, this.persistenceKey = n, this.host = r, this.ssl = s, \n        this.forceLongPolling = i, this.autoDetectLongPolling = o, this.useFetchStreams = u;\n    }\n}\n\n/** The default database name for a project. */\n/**\n * Represents the database ID a Firestore client is associated with.\n * @internal\n */\nclass H {\n    constructor(t, e) {\n        this.projectId = t, this.database = e || \"(default)\";\n    }\n    static empty() {\n        return new H(\"\", \"\");\n    }\n    get isDefaultDatabase() {\n        return \"(default)\" === this.database;\n    }\n    isEqual(t) {\n        return t instanceof H && t.projectId === this.projectId && t.database === this.database;\n    }\n}\n\n/**\n * Path represents an ordered sequence of string segments.\n */\nclass J {\n    constructor(t, e, n) {\n        void 0 === e ? e = 0 : e > t.length && g(), void 0 === n ? n = t.length - e : n > t.length - e && g(), \n        this.segments = t, this.offset = e, this.len = n;\n    }\n    get length() {\n        return this.len;\n    }\n    isEqual(t) {\n        return 0 === J.comparator(this, t);\n    }\n    child(t) {\n        const e = this.segments.slice(this.offset, this.limit());\n        return t instanceof J ? t.forEach((t => {\n            e.push(t);\n        })) : e.push(t), this.construct(e);\n    }\n    /** The index of one past the last segment of the path. */    limit() {\n        return this.offset + this.length;\n    }\n    popFirst(t) {\n        return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);\n    }\n    popLast() {\n        return this.construct(this.segments, this.offset, this.length - 1);\n    }\n    firstSegment() {\n        return this.segments[this.offset];\n    }\n    lastSegment() {\n        return this.get(this.length - 1);\n    }\n    get(t) {\n        return this.segments[this.offset + t];\n    }\n    isEmpty() {\n        return 0 === this.length;\n    }\n    isPrefixOf(t) {\n        if (t.length < this.length) return !1;\n        for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n        return !0;\n    }\n    isImmediateParentOf(t) {\n        if (this.length + 1 !== t.length) return !1;\n        for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n        return !0;\n    }\n    forEach(t) {\n        for (let e = this.offset, n = this.limit(); e < n; e++) t(this.segments[e]);\n    }\n    toArray() {\n        return this.segments.slice(this.offset, this.limit());\n    }\n    static comparator(t, e) {\n        const n = Math.min(t.length, e.length);\n        for (let r = 0; r < n; r++) {\n            const n = t.get(r), s = e.get(r);\n            if (n < s) return -1;\n            if (n > s) return 1;\n        }\n        return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;\n    }\n}\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n *\n * @internal\n */ class X extends J {\n    construct(t, e, n) {\n        return new X(t, e, n);\n    }\n    canonicalString() {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        return this.toArray().join(\"/\");\n    }\n    toString() {\n        return this.canonicalString();\n    }\n    /**\n     * Creates a resource path from the given slash-delimited string. If multiple\n     * arguments are provided, all components are combined. Leading and trailing\n     * slashes from all components are ignored.\n     */    static fromString(...t) {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        const e = [];\n        for (const n of t) {\n            if (n.indexOf(\"//\") >= 0) throw new L(A, `Invalid segment (${n}). Paths must not contain // in them.`);\n            // Strip leading and traling slashed.\n                        e.push(...n.split(\"/\").filter((t => t.length > 0)));\n        }\n        return new X(e);\n    }\n    static emptyPath() {\n        return new X([]);\n    }\n}\n\nconst Z = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/**\n * A dot-separated path for navigating sub-objects within a document.\n * @internal\n */ class tt extends J {\n    construct(t, e, n) {\n        return new tt(t, e, n);\n    }\n    /**\n     * Returns true if the string could be used as a segment in a field path\n     * without escaping.\n     */    static isValidIdentifier(t) {\n        return Z.test(t);\n    }\n    canonicalString() {\n        return this.toArray().map((t => (t = t.replace(/\\\\/g, \"\\\\\\\\\").replace(/`/g, \"\\\\`\"), \n        tt.isValidIdentifier(t) || (t = \"`\" + t + \"`\"), t))).join(\".\");\n    }\n    toString() {\n        return this.canonicalString();\n    }\n    /**\n     * Returns true if this field references the key of a document.\n     */    isKeyField() {\n        return 1 === this.length && \"__name__\" === this.get(0);\n    }\n    /**\n     * The field designating the key of a document.\n     */    static keyField() {\n        return new tt([ \"__name__\" ]);\n    }\n    /**\n     * Parses a field string from the given server-formatted string.\n     *\n     * - Splitting the empty string is not allowed (for now at least).\n     * - Empty segments within the string (e.g. if there are two consecutive\n     *   separators) are not allowed.\n     *\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\n     * non-identifier path components, even if they aren't escaped.\n     */    static fromServerFormat(t) {\n        const e = [];\n        let n = \"\", r = 0;\n        const s = () => {\n            if (0 === n.length) throw new L(A, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);\n            e.push(n), n = \"\";\n        };\n        let i = !1;\n        for (;r < t.length; ) {\n            const e = t[r];\n            if (\"\\\\\" === e) {\n                if (r + 1 === t.length) throw new L(A, \"Path has trailing escape character: \" + t);\n                const e = t[r + 1];\n                if (\"\\\\\" !== e && \".\" !== e && \"`\" !== e) throw new L(A, \"Path has invalid escape sequence: \" + t);\n                n += e, r += 2;\n            } else \"`\" === e ? (i = !i, r++) : \".\" !== e || i ? (n += e, r++) : (s(), r++);\n        }\n        if (s(), i) throw new L(A, \"Unterminated ` in path: \" + t);\n        return new tt(e);\n    }\n    static emptyPath() {\n        return new tt([]);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n */ class et {\n    constructor(t) {\n        this.path = t;\n    }\n    static fromPath(t) {\n        return new et(X.fromString(t));\n    }\n    static fromName(t) {\n        return new et(X.fromString(t).popFirst(5));\n    }\n    static empty() {\n        return new et(X.emptyPath());\n    }\n    get collectionGroup() {\n        return this.path.popLast().lastSegment();\n    }\n    /** Returns true if the document is in the specified collectionId. */    hasCollectionId(t) {\n        return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;\n    }\n    /** Returns the collection group (i.e. the name of the parent collection) for this key. */    getCollectionGroup() {\n        return this.path.get(this.path.length - 2);\n    }\n    /** Returns the fully qualified path to the parent collection. */    getCollectionPath() {\n        return this.path.popLast();\n    }\n    isEqual(t) {\n        return null !== t && 0 === X.comparator(this.path, t.path);\n    }\n    toString() {\n        return this.path.toString();\n    }\n    static comparator(t, e) {\n        return X.comparator(t.path, e.path);\n    }\n    static isDocumentKey(t) {\n        return t.length % 2 == 0;\n    }\n    /**\n     * Creates and returns a new document key with the given segments.\n     *\n     * @param segments - The segments of the path to the document\n     * @returns A new instance of DocumentKey\n     */    static fromSegments(t) {\n        return new et(new X(t.slice()));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function nt(t, e, n) {\n    if (!n) throw new L(A, `Function ${t}() cannot be called with an empty ${e}.`);\n}\n\n/**\n * Validates that two boolean options are not set at the same time.\n * @internal\n */\n/**\n * Validates that `path` refers to a document (indicated by the fact it contains\n * an even numbers of segments).\n */\nfunction rt(t) {\n    if (!et.isDocumentKey(t)) throw new L(A, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);\n}\n\n/**\n * Validates that `path` refers to a collection (indicated by the fact it\n * contains an odd numbers of segments).\n */ function st(t) {\n    if (et.isDocumentKey(t)) throw new L(A, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);\n}\n\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\n/** Returns a string describing the type / value of the provided input. */\nfunction it(t) {\n    if (void 0 === t) return \"undefined\";\n    if (null === t) return \"null\";\n    if (\"string\" == typeof t) return t.length > 20 && (t = `${t.substring(0, 20)}...`), \n    JSON.stringify(t);\n    if (\"number\" == typeof t || \"boolean\" == typeof t) return \"\" + t;\n    if (\"object\" == typeof t) {\n        if (t instanceof Array) return \"an array\";\n        {\n            const e = \n            /** try to get the constructor name for an object. */\n            function(t) {\n                if (t.constructor) return t.constructor.name;\n                return null;\n            }\n            /**\n * Casts `obj` to `T`, optionally unwrapping Compat types to expose the\n * underlying instance. Throws if  `obj` is not an instance of `T`.\n *\n * This cast is used in the Lite and Full SDK to verify instance types for\n * arguments passed to the public API.\n * @internal\n */ (t);\n            return e ? `a custom ${e} object` : \"an object\";\n        }\n    }\n    return \"function\" == typeof t ? \"a function\" : g();\n}\n\nfunction ot(t, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n    if (\"_delegate\" in t && (\n    // Unwrap Compat types\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    t = t._delegate), !(t instanceof e)) {\n        if (e.name === t.constructor.name) throw new L(A, \"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?\");\n        {\n            const n = it(t);\n            throw new L(A, `Expected type '${e.name}', but it was: ${n}`);\n        }\n    }\n    return t;\n}\n\nfunction ut(t, e) {\n    if (e <= 0) throw new L(A, `Function ${t}() requires a positive number, but it was: ${e}.`);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns whether a variable is either undefined or null.\n */ function ct(t) {\n    return null == t;\n}\n\n/** Returns whether the value represents -0. */ function at(t) {\n    // Detect if the value is -0.0. Based on polyfill from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n    return 0 === t && 1 / t == -1 / 0;\n}\n\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value - The value to test for being an integer and in the safe range\n */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst ht = {\n    BatchGetDocuments: \"batchGet\",\n    Commit: \"commit\",\n    RunQuery: \"runQuery\"\n};\n\n/**\n * Maps RPC names to the corresponding REST endpoint name.\n *\n * We use array notation to avoid mangling.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\nvar lt, ft;\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status - An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nfunction dt(t) {\n    if (void 0 === t) return p(\"RPC_ERROR\", \"HTTP error has no status\"), I;\n    // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n    // status codes but the mapping is not bijective. In each case of ambiguity\n    // this function chooses a primary error.\n    \n    // [1]\n    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n        switch (t) {\n      case 200:\n        // OK\n        return E;\n\n      case 400:\n        // Bad Request\n        return x;\n\n        // Other possibilities based on the forward mapping\n        // return Code.INVALID_ARGUMENT;\n        // return Code.OUT_OF_RANGE;\n              case 401:\n        // Unauthorized\n        return D;\n\n      case 403:\n        // Forbidden\n        return N;\n\n      case 404:\n        // Not Found\n        return P;\n\n      case 409:\n        // Conflict\n        return F;\n\n        // Other possibilities:\n        // return Code.ALREADY_EXISTS;\n              case 416:\n        // Range Not Satisfiable\n        return S;\n\n      case 429:\n        // Too Many Requests\n        return $;\n\n      case 499:\n        // Client Closed Request\n        return T;\n\n      case 500:\n        // Internal Server Error\n        return I;\n\n        // Other possibilities:\n        // return Code.INTERNAL;\n        // return Code.DATA_LOSS;\n              case 501:\n        // Unimplemented\n        return q;\n\n      case 503:\n        // Service Unavailable\n        return k;\n\n      case 504:\n        // Gateway Timeout\n        return R;\n\n      default:\n        return t >= 200 && t < 300 ? E : t >= 400 && t < 500 ? x : t >= 500 && t < 600 ? O : I;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A Rest-based connection that relies on the native HTTP stack\n * (e.g. `fetch` or a polyfill).\n */ (ft = lt || (lt = {}))[ft.OK = 0] = \"OK\", ft[ft.CANCELLED = 1] = \"CANCELLED\", \nft[ft.UNKNOWN = 2] = \"UNKNOWN\", ft[ft.INVALID_ARGUMENT = 3] = \"INVALID_ARGUMENT\", \nft[ft.DEADLINE_EXCEEDED = 4] = \"DEADLINE_EXCEEDED\", ft[ft.NOT_FOUND = 5] = \"NOT_FOUND\", \nft[ft.ALREADY_EXISTS = 6] = \"ALREADY_EXISTS\", ft[ft.PERMISSION_DENIED = 7] = \"PERMISSION_DENIED\", \nft[ft.UNAUTHENTICATED = 16] = \"UNAUTHENTICATED\", ft[ft.RESOURCE_EXHAUSTED = 8] = \"RESOURCE_EXHAUSTED\", \nft[ft.FAILED_PRECONDITION = 9] = \"FAILED_PRECONDITION\", ft[ft.ABORTED = 10] = \"ABORTED\", \nft[ft.OUT_OF_RANGE = 11] = \"OUT_OF_RANGE\", ft[ft.UNIMPLEMENTED = 12] = \"UNIMPLEMENTED\", \nft[ft.INTERNAL = 13] = \"INTERNAL\", ft[ft.UNAVAILABLE = 14] = \"UNAVAILABLE\", ft[ft.DATA_LOSS = 15] = \"DATA_LOSS\";\n\nclass wt extends \n/**\n * Base class for all Rest-based connections to the backend (WebChannel and\n * HTTP).\n */\nclass {\n    constructor(t) {\n        this.databaseInfo = t, this.databaseId = t.databaseId;\n        const e = t.ssl ? \"https\" : \"http\";\n        this.p = e + \"://\" + t.host, this.g = \"projects/\" + this.databaseId.projectId + \"/databases/\" + this.databaseId.database + \"/documents\";\n    }\n    v(t, e, n, r, s) {\n        const i = this.T(t, e);\n        m(\"RestConnection\", \"Sending: \", i, n);\n        const o = {};\n        return this.I(o, r, s), this.A(t, i, o, n).then((t => (m(\"RestConnection\", \"Received: \", t), \n        t)), (e => {\n            throw y(\"RestConnection\", `${t} failed with error: `, e, \"url: \", i, \"request:\", n), \n            e;\n        }));\n    }\n    R(t, e, n, r, s, i) {\n        // The REST API automatically aggregates all of the streamed results, so we\n        // can just use the normal invoke() method.\n        return this.v(t, e, n, r, s);\n    }\n    /**\n     * Modifies the headers for a request, adding any authorization token if\n     * present and any additional headers for the request.\n     */    I(t, e, n) {\n        t[\"X-Goog-Api-Client\"] = \"gl-js/ fire/\" + f, \n        // Content-Type: text/plain will avoid preflight requests which might\n        // mess with CORS and redirects by proxies. If we add custom headers\n        // we will need to change this code to potentially use the $httpOverwrite\n        // parameter supported by ESF to avoid triggering preflight requests.\n        t[\"Content-Type\"] = \"text/plain\", this.databaseInfo.appId && (t[\"X-Firebase-GMPID\"] = this.databaseInfo.appId), \n        e && e.headers.forEach(((e, n) => t[n] = e)), n && n.headers.forEach(((e, n) => t[n] = e));\n    }\n    T(t, e) {\n        const n = ht[t];\n        return `${this.p}/v1/${e}:${n}`;\n    }\n} {\n    /**\n     * @param databaseInfo - The connection info.\n     * @param fetchImpl - `fetch` or a Polyfill that implements the fetch API.\n     */\n    constructor(t, e) {\n        super(t), this.P = e;\n    }\n    V(t, e) {\n        throw new Error(\"Not supported by FetchConnection\");\n    }\n    async A(t, e, n, r) {\n        const s = JSON.stringify(r);\n        let i;\n        try {\n            i = await this.P(e, {\n                method: \"POST\",\n                headers: n,\n                body: s\n            });\n        } catch (t) {\n            throw new L(dt(t.status), \"Request failed with error: \" + t.statusText);\n        }\n        if (!i.ok) throw new L(dt(i.status), \"Request failed with error: \" + i.statusText);\n        return i.json();\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Initializes the HTTP connection for the REST API. */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Generates `nBytes` of random bytes.\n *\n * If `nBytes < 0` , an error will be thrown.\n */\nfunction mt(t) {\n    // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.\n    const e = \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    \"undefined\" != typeof self && (self.crypto || self.msCrypto), n = new Uint8Array(t);\n    if (e && \"function\" == typeof e.getRandomValues) e.getRandomValues(n); else \n    // Falls back to Math.random\n    for (let e = 0; e < t; e++) n[e] = Math.floor(256 * Math.random());\n    return n;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class pt {\n    static N() {\n        // Alphanumeric characters\n        const t = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\", e = Math.floor(256 / t.length) * t.length;\n        // The largest byte value that is a multiple of `char.length`.\n                let n = \"\";\n        for (;n.length < 20; ) {\n            const r = mt(40);\n            for (let s = 0; s < r.length; ++s) \n            // Only accept values that are [0, maxMultiple), this ensures they can\n            // be evenly mapped to indices of `chars` via a modulo operation.\n            n.length < 20 && r[s] < e && (n += t.charAt(r[s] % t.length));\n        }\n        return n;\n    }\n}\n\nfunction yt(t, e) {\n    return t < e ? -1 : t > e ? 1 : 0;\n}\n\n/** Helper to compare arrays using isEqual(). */ function _t(t, e, n) {\n    return t.length === e.length && t.every(((t, r) => n(t, e[r])));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).\n/**\n * A `Timestamp` represents a point in time independent of any time zone or\n * calendar, represented as seconds and fractions of seconds at nanosecond\n * resolution in UTC Epoch time.\n *\n * It is encoded using the Proleptic Gregorian Calendar which extends the\n * Gregorian calendar backwards to year one. It is encoded assuming all minutes\n * are 60 seconds long, i.e. leap seconds are \"smeared\" so that no leap second\n * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to\n * 9999-12-31T23:59:59.999999999Z.\n *\n * For examples and further specifications, refer to the\n * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.\n */\nclass gt {\n    /**\n     * Creates a new timestamp.\n     *\n     * @param seconds - The number of seconds of UTC time since Unix epoch\n     *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n     *     9999-12-31T23:59:59Z inclusive.\n     * @param nanoseconds - The non-negative fractions of a second at nanosecond\n     *     resolution. Negative second values with fractions must still have\n     *     non-negative nanoseconds values that count forward in time. Must be\n     *     from 0 to 999,999,999 inclusive.\n     */\n    constructor(\n    /**\n     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.\n     */\n    t, \n    /**\n     * The fractions of a second at nanosecond resolution.*\n     */\n    e) {\n        if (this.seconds = t, this.nanoseconds = e, e < 0) throw new L(A, \"Timestamp nanoseconds out of range: \" + e);\n        if (e >= 1e9) throw new L(A, \"Timestamp nanoseconds out of range: \" + e);\n        if (t < -62135596800) throw new L(A, \"Timestamp seconds out of range: \" + t);\n        // This will break in the year 10,000.\n                if (t >= 253402300800) throw new L(A, \"Timestamp seconds out of range: \" + t);\n    }\n    /**\n     * Creates a new timestamp with the current date, with millisecond precision.\n     *\n     * @returns a new timestamp representing the current date.\n     */    static now() {\n        return gt.fromMillis(Date.now());\n    }\n    /**\n     * Creates a new timestamp from the given date.\n     *\n     * @param date - The date to initialize the `Timestamp` from.\n     * @returns A new `Timestamp` representing the same point in time as the given\n     *     date.\n     */    static fromDate(t) {\n        return gt.fromMillis(t.getTime());\n    }\n    /**\n     * Creates a new timestamp from the given number of milliseconds.\n     *\n     * @param milliseconds - Number of milliseconds since Unix epoch\n     *     1970-01-01T00:00:00Z.\n     * @returns A new `Timestamp` representing the same point in time as the given\n     *     number of milliseconds.\n     */    static fromMillis(t) {\n        const e = Math.floor(t / 1e3), n = Math.floor(1e6 * (t - 1e3 * e));\n        return new gt(e, n);\n    }\n    /**\n     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion\n     * causes a loss of precision since `Date` objects only support millisecond\n     * precision.\n     *\n     * @returns JavaScript `Date` object representing the same point in time as\n     *     this `Timestamp`, with millisecond precision.\n     */    toDate() {\n        return new Date(this.toMillis());\n    }\n    /**\n     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since\n     * epoch). This operation causes a loss of precision.\n     *\n     * @returns The point in time corresponding to this timestamp, represented as\n     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\n     */    toMillis() {\n        return 1e3 * this.seconds + this.nanoseconds / 1e6;\n    }\n    _compareTo(t) {\n        return this.seconds === t.seconds ? yt(this.nanoseconds, t.nanoseconds) : yt(this.seconds, t.seconds);\n    }\n    /**\n     * Returns true if this `Timestamp` is equal to the provided one.\n     *\n     * @param other - The `Timestamp` to compare against.\n     * @returns true if this `Timestamp` is equal to the provided one.\n     */    isEqual(t) {\n        return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;\n    }\n    /** Returns a textual representation of this `Timestamp`. */    toString() {\n        return \"Timestamp(seconds=\" + this.seconds + \", nanoseconds=\" + this.nanoseconds + \")\";\n    }\n    /** Returns a JSON-serializable representation of this `Timestamp`. */    toJSON() {\n        return {\n            seconds: this.seconds,\n            nanoseconds: this.nanoseconds\n        };\n    }\n    /**\n     * Converts this object to a primitive string, which allows `Timestamp` objects\n     * to be compared using the `>`, `<=`, `>=` and `>` operators.\n     */    valueOf() {\n        // This method returns a string of the form <seconds>.<nanoseconds> where\n        // <seconds> is translated to have a non-negative value and both <seconds>\n        // and <nanoseconds> are left-padded with zeroes to be a consistent length.\n        // Strings with this format then have a lexiographical ordering that matches\n        // the expected ordering. The <seconds> translation is done to avoid having\n        // a leading negative sign (i.e. a leading '-' character) in its string\n        // representation, which would affect its lexiographical ordering.\n        const t = this.seconds - -62135596800;\n        // Note: Up to 12 decimal digits are required to represent all valid\n        // 'seconds' values.\n                return String(t).padStart(12, \"0\") + \".\" + String(this.nanoseconds).padStart(9, \"0\");\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */ class vt {\n    constructor(t) {\n        this.timestamp = t;\n    }\n    static fromTimestamp(t) {\n        return new vt(t);\n    }\n    static min() {\n        return new vt(new gt(0, 0));\n    }\n    static max() {\n        return new vt(new gt(253402300799, 999999999));\n    }\n    compareTo(t) {\n        return this.timestamp._compareTo(t.timestamp);\n    }\n    isEqual(t) {\n        return this.timestamp.isEqual(t.timestamp);\n    }\n    /** Returns a number representation of the version for use in spec tests. */    toMicroseconds() {\n        // Convert to microseconds.\n        return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;\n    }\n    toString() {\n        return \"SnapshotVersion(\" + this.timestamp.toString() + \")\";\n    }\n    toTimestamp() {\n        return this.timestamp;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function bt(t) {\n    let e = 0;\n    for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e++;\n    return e;\n}\n\nfunction Et(t, e) {\n    for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nclass Tt {\n    constructor(t, e) {\n        this.comparator = t, this.root = e || At.EMPTY;\n    }\n    // Returns a copy of the map, with the specified key/value added or replaced.\n    insert(t, e) {\n        return new Tt(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, At.BLACK, null, null));\n    }\n    // Returns a copy of the map, with the specified key removed.\n    remove(t) {\n        return new Tt(this.comparator, this.root.remove(t, this.comparator).copy(null, null, At.BLACK, null, null));\n    }\n    // Returns the value of the node with the given key, or null.\n    get(t) {\n        let e = this.root;\n        for (;!e.isEmpty(); ) {\n            const n = this.comparator(t, e.key);\n            if (0 === n) return e.value;\n            n < 0 ? e = e.left : n > 0 && (e = e.right);\n        }\n        return null;\n    }\n    // Returns the index of the element in this sorted map, or -1 if it doesn't\n    // exist.\n    indexOf(t) {\n        // Number of nodes that were pruned when descending right\n        let e = 0, n = this.root;\n        for (;!n.isEmpty(); ) {\n            const r = this.comparator(t, n.key);\n            if (0 === r) return e + n.left.size;\n            r < 0 ? n = n.left : (\n            // Count all nodes left of the node plus the node itself\n            e += n.left.size + 1, n = n.right);\n        }\n        // Node not found\n                return -1;\n    }\n    isEmpty() {\n        return this.root.isEmpty();\n    }\n    // Returns the total number of nodes in the map.\n    get size() {\n        return this.root.size;\n    }\n    // Returns the minimum key in the map.\n    minKey() {\n        return this.root.minKey();\n    }\n    // Returns the maximum key in the map.\n    maxKey() {\n        return this.root.maxKey();\n    }\n    // Traverses the map in key order and calls the specified action function\n    // for each key/value pair. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    inorderTraversal(t) {\n        return this.root.inorderTraversal(t);\n    }\n    forEach(t) {\n        this.inorderTraversal(((e, n) => (t(e, n), !1)));\n    }\n    toString() {\n        const t = [];\n        return this.inorderTraversal(((e, n) => (t.push(`${e}:${n}`), !1))), `{${t.join(\", \")}}`;\n    }\n    // Traverses the map in reverse key order and calls the specified action\n    // function for each key/value pair. If action returns true, traversal is\n    // aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    reverseTraversal(t) {\n        return this.root.reverseTraversal(t);\n    }\n    // Returns an iterator over the SortedMap.\n    getIterator() {\n        return new It(this.root, null, this.comparator, !1);\n    }\n    getIteratorFrom(t) {\n        return new It(this.root, t, this.comparator, !1);\n    }\n    getReverseIterator() {\n        return new It(this.root, null, this.comparator, !0);\n    }\n    getReverseIteratorFrom(t) {\n        return new It(this.root, t, this.comparator, !0);\n    }\n}\n\n // end SortedMap\n// An iterator over an LLRBNode.\nclass It {\n    constructor(t, e, n, r) {\n        this.isReverse = r, this.nodeStack = [];\n        let s = 1;\n        for (;!t.isEmpty(); ) if (s = e ? n(t.key, e) : 1, \n        // flip the comparison if we're going in reverse\n        e && r && (s *= -1), s < 0) \n        // This node is less than our start key. ignore it\n        t = this.isReverse ? t.left : t.right; else {\n            if (0 === s) {\n                // This node is exactly equal to our start key. Push it on the stack,\n                // but stop iterating;\n                this.nodeStack.push(t);\n                break;\n            }\n            // This node is greater than our start key, add it to the stack and move\n            // to the next one\n            this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;\n        }\n    }\n    getNext() {\n        let t = this.nodeStack.pop();\n        const e = {\n            key: t.key,\n            value: t.value\n        };\n        if (this.isReverse) for (t = t.left; !t.isEmpty(); ) this.nodeStack.push(t), t = t.right; else for (t = t.right; !t.isEmpty(); ) this.nodeStack.push(t), \n        t = t.left;\n        return e;\n    }\n    hasNext() {\n        return this.nodeStack.length > 0;\n    }\n    peek() {\n        if (0 === this.nodeStack.length) return null;\n        const t = this.nodeStack[this.nodeStack.length - 1];\n        return {\n            key: t.key,\n            value: t.value\n        };\n    }\n}\n\n // end SortedMapIterator\n// Represents a node in a Left-leaning Red-Black tree.\nclass At {\n    constructor(t, e, n, r, s) {\n        this.key = t, this.value = e, this.color = null != n ? n : At.RED, this.left = null != r ? r : At.EMPTY, \n        this.right = null != s ? s : At.EMPTY, this.size = this.left.size + 1 + this.right.size;\n    }\n    // Returns a copy of the current node, optionally replacing pieces of it.\n    copy(t, e, n, r, s) {\n        return new At(null != t ? t : this.key, null != e ? e : this.value, null != n ? n : this.color, null != r ? r : this.left, null != s ? s : this.right);\n    }\n    isEmpty() {\n        return !1;\n    }\n    // Traverses the tree in key order and calls the specified action function\n    // for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    inorderTraversal(t) {\n        return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);\n    }\n    // Traverses the tree in reverse key order and calls the specified action\n    // function for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    reverseTraversal(t) {\n        return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);\n    }\n    // Returns the minimum node in the tree.\n    min() {\n        return this.left.isEmpty() ? this : this.left.min();\n    }\n    // Returns the maximum key in the tree.\n    minKey() {\n        return this.min().key;\n    }\n    // Returns the maximum key in the tree.\n    maxKey() {\n        return this.right.isEmpty() ? this.key : this.right.maxKey();\n    }\n    // Returns new tree, with the key/value added.\n    insert(t, e, n) {\n        let r = this;\n        const s = n(t, r.key);\n        return r = s < 0 ? r.copy(null, null, null, r.left.insert(t, e, n), null) : 0 === s ? r.copy(null, e, null, null, null) : r.copy(null, null, null, null, r.right.insert(t, e, n)), \n        r.fixUp();\n    }\n    removeMin() {\n        if (this.left.isEmpty()) return At.EMPTY;\n        let t = this;\n        return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), \n        t.fixUp();\n    }\n    // Returns new tree, with the specified item removed.\n    remove(t, e) {\n        let n, r = this;\n        if (e(t, r.key) < 0) r.left.isEmpty() || r.left.isRed() || r.left.left.isRed() || (r = r.moveRedLeft()), \n        r = r.copy(null, null, null, r.left.remove(t, e), null); else {\n            if (r.left.isRed() && (r = r.rotateRight()), r.right.isEmpty() || r.right.isRed() || r.right.left.isRed() || (r = r.moveRedRight()), \n            0 === e(t, r.key)) {\n                if (r.right.isEmpty()) return At.EMPTY;\n                n = r.right.min(), r = r.copy(n.key, n.value, null, null, r.right.removeMin());\n            }\n            r = r.copy(null, null, null, null, r.right.remove(t, e));\n        }\n        return r.fixUp();\n    }\n    isRed() {\n        return this.color;\n    }\n    // Returns new tree after performing any needed rotations.\n    fixUp() {\n        let t = this;\n        return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), \n        t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;\n    }\n    moveRedLeft() {\n        let t = this.colorFlip();\n        return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), \n        t = t.rotateLeft(), t = t.colorFlip()), t;\n    }\n    moveRedRight() {\n        let t = this.colorFlip();\n        return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;\n    }\n    rotateLeft() {\n        const t = this.copy(null, null, At.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, t, null);\n    }\n    rotateRight() {\n        const t = this.copy(null, null, At.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, t);\n    }\n    colorFlip() {\n        const t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, t, e);\n    }\n    // For testing.\n    checkMaxDepth() {\n        const t = this.check();\n        return Math.pow(2, t) <= this.size + 1;\n    }\n    // In a balanced RB tree, the black-depth (number of black nodes) from root to\n    // leaves is equal on both sides.  This function verifies that or asserts.\n    check() {\n        if (this.isRed() && this.left.isRed()) throw g();\n        if (this.right.isRed()) throw g();\n        const t = this.left.check();\n        if (t !== this.right.check()) throw g();\n        return t + (this.isRed() ? 0 : 1);\n    }\n}\n\n // end LLRBNode\n// Empty node is shared between all LLRB trees.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nAt.EMPTY = null, At.RED = !0, At.BLACK = !1;\n\n// end LLRBEmptyNode\nAt.EMPTY = new \n// Represents an empty node (a leaf node in the Red-Black Tree).\nclass {\n    constructor() {\n        this.size = 0;\n    }\n    get key() {\n        throw g();\n    }\n    get value() {\n        throw g();\n    }\n    get color() {\n        throw g();\n    }\n    get left() {\n        throw g();\n    }\n    get right() {\n        throw g();\n    }\n    // Returns a copy of the current node.\n    copy(t, e, n, r, s) {\n        return this;\n    }\n    // Returns a copy of the tree, with the specified key/value added.\n    insert(t, e, n) {\n        return new At(t, e);\n    }\n    // Returns a copy of the tree, with the specified key removed.\n    remove(t, e) {\n        return this;\n    }\n    isEmpty() {\n        return !0;\n    }\n    inorderTraversal(t) {\n        return !1;\n    }\n    reverseTraversal(t) {\n        return !1;\n    }\n    minKey() {\n        return null;\n    }\n    maxKey() {\n        return null;\n    }\n    isRed() {\n        return !1;\n    }\n    // For testing.\n    checkMaxDepth() {\n        return !0;\n    }\n    check() {\n        return 0;\n    }\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nclass Rt {\n    constructor(t) {\n        this.comparator = t, this.data = new Tt(this.comparator);\n    }\n    has(t) {\n        return null !== this.data.get(t);\n    }\n    first() {\n        return this.data.minKey();\n    }\n    last() {\n        return this.data.maxKey();\n    }\n    get size() {\n        return this.data.size;\n    }\n    indexOf(t) {\n        return this.data.indexOf(t);\n    }\n    /** Iterates elements in order defined by \"comparator\" */    forEach(t) {\n        this.data.inorderTraversal(((e, n) => (t(e), !1)));\n    }\n    /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */    forEachInRange(t, e) {\n        const n = this.data.getIteratorFrom(t[0]);\n        for (;n.hasNext(); ) {\n            const r = n.getNext();\n            if (this.comparator(r.key, t[1]) >= 0) return;\n            e(r.key);\n        }\n    }\n    /**\n     * Iterates over `elem`s such that: start &lt;= elem until false is returned.\n     */    forEachWhile(t, e) {\n        let n;\n        for (n = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); n.hasNext(); ) {\n            if (!t(n.getNext().key)) return;\n        }\n    }\n    /** Finds the least element greater than or equal to `elem`. */    firstAfterOrEqual(t) {\n        const e = this.data.getIteratorFrom(t);\n        return e.hasNext() ? e.getNext().key : null;\n    }\n    getIterator() {\n        return new Pt(this.data.getIterator());\n    }\n    getIteratorFrom(t) {\n        return new Pt(this.data.getIteratorFrom(t));\n    }\n    /** Inserts or updates an element */    add(t) {\n        return this.copy(this.data.remove(t).insert(t, !0));\n    }\n    /** Deletes an element */    delete(t) {\n        return this.has(t) ? this.copy(this.data.remove(t)) : this;\n    }\n    isEmpty() {\n        return this.data.isEmpty();\n    }\n    unionWith(t) {\n        let e = this;\n        // Make sure `result` always refers to the larger one of the two sets.\n                return e.size < t.size && (e = t, t = this), t.forEach((t => {\n            e = e.add(t);\n        })), e;\n    }\n    isEqual(t) {\n        if (!(t instanceof Rt)) return !1;\n        if (this.size !== t.size) return !1;\n        const e = this.data.getIterator(), n = t.data.getIterator();\n        for (;e.hasNext(); ) {\n            const t = e.getNext().key, r = n.getNext().key;\n            if (0 !== this.comparator(t, r)) return !1;\n        }\n        return !0;\n    }\n    toArray() {\n        const t = [];\n        return this.forEach((e => {\n            t.push(e);\n        })), t;\n    }\n    toString() {\n        const t = [];\n        return this.forEach((e => t.push(e))), \"SortedSet(\" + t.toString() + \")\";\n    }\n    copy(t) {\n        const e = new Rt(this.comparator);\n        return e.data = t, e;\n    }\n}\n\nclass Pt {\n    constructor(t) {\n        this.iter = t;\n    }\n    getNext() {\n        return this.iter.getNext().key;\n    }\n    hasNext() {\n        return this.iter.hasNext();\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */ class Vt {\n    constructor(t) {\n        this.fields = t, \n        // TODO(dimond): validation of FieldMask\n        // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n        t.sort(tt.comparator);\n    }\n    static empty() {\n        return new Vt([]);\n    }\n    /**\n     * Returns a new FieldMask object that is the result of adding all the given\n     * fields paths to this field mask.\n     */    unionWith(t) {\n        let e = new Rt(tt.comparator);\n        for (const t of this.fields) e = e.add(t);\n        for (const n of t) e = e.add(n);\n        return new Vt(e.toArray());\n    }\n    /**\n     * Verifies that `fieldPath` is included by at least one field in this field\n     * mask.\n     *\n     * This is an O(n) operation, where `n` is the size of the field mask.\n     */    covers(t) {\n        for (const e of this.fields) if (e.isPrefixOf(t)) return !0;\n        return !1;\n    }\n    isEqual(t) {\n        return _t(this.fields, t.fields, ((t, e) => t.isEqual(e)));\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Converts a Base64 encoded string to a binary string. */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n * @internal\n */\nclass Nt {\n    constructor(t) {\n        this.binaryString = t;\n    }\n    static fromBase64String(t) {\n        const e = atob(t);\n        return new Nt(e);\n    }\n    static fromUint8Array(t) {\n        // TODO(indexing); Remove the copy of the byte string here as this method\n        // is frequently called during indexing.\n        const e = \n        /**\n * Helper function to convert an Uint8array to a binary string.\n */\n        function(t) {\n            let e = \"\";\n            for (let n = 0; n < t.length; ++n) e += String.fromCharCode(t[n]);\n            return e;\n        }\n        /**\n * Helper function to convert a binary string to an Uint8Array.\n */ (t);\n        return new Nt(e);\n    }\n    [Symbol.iterator]() {\n        let t = 0;\n        return {\n            next: () => t < this.binaryString.length ? {\n                value: this.binaryString.charCodeAt(t++),\n                done: !1\n            } : {\n                value: void 0,\n                done: !0\n            }\n        };\n    }\n    toBase64() {\n        return t = this.binaryString, btoa(t);\n        /** Converts a binary string to a Base64 encoded string. */\n        var t;\n    }\n    toUint8Array() {\n        return function(t) {\n            const e = new Uint8Array(t.length);\n            for (let n = 0; n < t.length; n++) e[n] = t.charCodeAt(n);\n            return e;\n        }\n        /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n        // A RegExp matching ISO 8601 UTC timestamps with optional fraction.\n        (this.binaryString);\n    }\n    approximateByteSize() {\n        return 2 * this.binaryString.length;\n    }\n    compareTo(t) {\n        return yt(this.binaryString, t.binaryString);\n    }\n    isEqual(t) {\n        return this.binaryString === t.binaryString;\n    }\n}\n\nNt.EMPTY_BYTE_STRING = new Nt(\"\");\n\nconst Dt = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\n\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */ function $t(t) {\n    // The json interface (for the browser) will return an iso timestamp string,\n    // while the proto js library (for node) will return a\n    // google.protobuf.Timestamp instance.\n    if (v(!!t), \"string\" == typeof t) {\n        // The date string can have higher precision (nanos) than the Date class\n        // (millis), so we do some custom parsing here.\n        // Parse the nanos right out of the string.\n        let e = 0;\n        const n = Dt.exec(t);\n        if (v(!!n), n[1]) {\n            // Pad the fraction out to 9 digits (nanos).\n            let t = n[1];\n            t = (t + \"000000000\").substr(0, 9), e = Number(t);\n        }\n        // Parse the date to get the seconds.\n                const r = new Date(t);\n        return {\n            seconds: Math.floor(r.getTime() / 1e3),\n            nanos: e\n        };\n    }\n    return {\n        seconds: xt(t.seconds),\n        nanos: xt(t.nanos)\n    };\n}\n\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */ function xt(t) {\n    // TODO(bjornick): Handle int64 greater than 53 bits.\n    return \"number\" == typeof t ? t : \"string\" == typeof t ? Number(t) : 0;\n}\n\n/** Converts the possible Proto types for Blobs into a ByteString. */ function Ft(t) {\n    return \"string\" == typeof t ? Nt.fromBase64String(t) : Nt.fromUint8Array(t);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   transform. They can only exist in the local view of a document. Therefore\n *   they do not need to be parsed or serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */ function St(t) {\n    var e, n;\n    return \"server_timestamp\" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);\n}\n\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */ function qt(t) {\n    const e = t.mapValue.fields.__previous_value__;\n    return St(e) ? qt(e) : e;\n}\n\n/**\n * Returns the local time at which this timestamp was first set.\n */ function Ot(t) {\n    const e = $t(t.mapValue.fields.__local_write_time__.timestampValue);\n    return new gt(e.seconds, e.nanos);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const kt = {\n    fields: {\n        __type__: {\n            stringValue: \"__max__\"\n        }\n    }\n};\n\n/** Extracts the backend's type order for the provided value. */\nfunction Ct(t) {\n    return \"nullValue\" in t ? 0 /* NullValue */ : \"booleanValue\" in t ? 1 /* BooleanValue */ : \"integerValue\" in t || \"doubleValue\" in t ? 2 /* NumberValue */ : \"timestampValue\" in t ? 3 /* TimestampValue */ : \"stringValue\" in t ? 5 /* StringValue */ : \"bytesValue\" in t ? 6 /* BlobValue */ : \"referenceValue\" in t ? 7 /* RefValue */ : \"geoPointValue\" in t ? 8 /* GeoPointValue */ : \"arrayValue\" in t ? 9 /* ArrayValue */ : \"mapValue\" in t ? St(t) ? 4 /* ServerTimestampValue */ : \n    /** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */\n    function(t) {\n        return \"__max__\" === (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue;\n    }\n    /**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n    /**\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n * ability to add and remove fields (via the ObjectValueBuilder).\n */ (t) ? 9007199254740991 /* MaxValue */ : 10 /* ObjectValue */ : g();\n}\n\n/** Tests `left` and `right` for equality based on the backend semantics. */ function Lt(t, e) {\n    if (t === e) return !0;\n    const n = Ct(t);\n    if (n !== Ct(e)) return !1;\n    switch (n) {\n      case 0 /* NullValue */ :\n      case 9007199254740991 /* MaxValue */ :\n        return !0;\n\n      case 1 /* BooleanValue */ :\n        return t.booleanValue === e.booleanValue;\n\n      case 4 /* ServerTimestampValue */ :\n        return Ot(t).isEqual(Ot(e));\n\n      case 3 /* TimestampValue */ :\n        return function(t, e) {\n            if (\"string\" == typeof t.timestampValue && \"string\" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) \n            // Use string equality for ISO 8601 timestamps\n            return t.timestampValue === e.timestampValue;\n            const n = $t(t.timestampValue), r = $t(e.timestampValue);\n            return n.seconds === r.seconds && n.nanos === r.nanos;\n        }(t, e);\n\n      case 5 /* StringValue */ :\n        return t.stringValue === e.stringValue;\n\n      case 6 /* BlobValue */ :\n        return function(t, e) {\n            return Ft(t.bytesValue).isEqual(Ft(e.bytesValue));\n        }(t, e);\n\n      case 7 /* RefValue */ :\n        return t.referenceValue === e.referenceValue;\n\n      case 8 /* GeoPointValue */ :\n        return function(t, e) {\n            return xt(t.geoPointValue.latitude) === xt(e.geoPointValue.latitude) && xt(t.geoPointValue.longitude) === xt(e.geoPointValue.longitude);\n        }(t, e);\n\n      case 2 /* NumberValue */ :\n        return function(t, e) {\n            if (\"integerValue\" in t && \"integerValue\" in e) return xt(t.integerValue) === xt(e.integerValue);\n            if (\"doubleValue\" in t && \"doubleValue\" in e) {\n                const n = xt(t.doubleValue), r = xt(e.doubleValue);\n                return n === r ? at(n) === at(r) : isNaN(n) && isNaN(r);\n            }\n            return !1;\n        }(t, e);\n\n      case 9 /* ArrayValue */ :\n        return _t(t.arrayValue.values || [], e.arrayValue.values || [], Lt);\n\n      case 10 /* ObjectValue */ :\n        return function(t, e) {\n            const n = t.mapValue.fields || {}, r = e.mapValue.fields || {};\n            if (bt(n) !== bt(r)) return !1;\n            for (const t in n) if (n.hasOwnProperty(t) && (void 0 === r[t] || !Lt(n[t], r[t]))) return !1;\n            return !0;\n        }\n        /** Returns true if the ArrayValue contains the specified element. */ (t, e);\n\n      default:\n        return g();\n    }\n}\n\nfunction Mt(t, e) {\n    return void 0 !== (t.values || []).find((t => Lt(t, e)));\n}\n\nfunction Ut(t, e) {\n    if (t === e) return 0;\n    const n = Ct(t), r = Ct(e);\n    if (n !== r) return yt(n, r);\n    switch (n) {\n      case 0 /* NullValue */ :\n      case 9007199254740991 /* MaxValue */ :\n        return 0;\n\n      case 1 /* BooleanValue */ :\n        return yt(t.booleanValue, e.booleanValue);\n\n      case 2 /* NumberValue */ :\n        return function(t, e) {\n            const n = xt(t.integerValue || t.doubleValue), r = xt(e.integerValue || e.doubleValue);\n            return n < r ? -1 : n > r ? 1 : n === r ? 0 : \n            // one or both are NaN.\n            isNaN(n) ? isNaN(r) ? 0 : -1 : 1;\n        }(t, e);\n\n      case 3 /* TimestampValue */ :\n        return jt(t.timestampValue, e.timestampValue);\n\n      case 4 /* ServerTimestampValue */ :\n        return jt(Ot(t), Ot(e));\n\n      case 5 /* StringValue */ :\n        return yt(t.stringValue, e.stringValue);\n\n      case 6 /* BlobValue */ :\n        return function(t, e) {\n            const n = Ft(t), r = Ft(e);\n            return n.compareTo(r);\n        }(t.bytesValue, e.bytesValue);\n\n      case 7 /* RefValue */ :\n        return function(t, e) {\n            const n = t.split(\"/\"), r = e.split(\"/\");\n            for (let t = 0; t < n.length && t < r.length; t++) {\n                const e = yt(n[t], r[t]);\n                if (0 !== e) return e;\n            }\n            return yt(n.length, r.length);\n        }(t.referenceValue, e.referenceValue);\n\n      case 8 /* GeoPointValue */ :\n        return function(t, e) {\n            const n = yt(xt(t.latitude), xt(e.latitude));\n            if (0 !== n) return n;\n            return yt(xt(t.longitude), xt(e.longitude));\n        }(t.geoPointValue, e.geoPointValue);\n\n      case 9 /* ArrayValue */ :\n        return function(t, e) {\n            const n = t.values || [], r = e.values || [];\n            for (let t = 0; t < n.length && t < r.length; ++t) {\n                const e = Ut(n[t], r[t]);\n                if (e) return e;\n            }\n            return yt(n.length, r.length);\n        }(t.arrayValue, e.arrayValue);\n\n      case 10 /* ObjectValue */ :\n        return function(t, e) {\n            if (t === kt && e === kt) return 0;\n            if (t === kt) return 1;\n            if (e === kt) return -1;\n            const n = t.fields || {}, r = Object.keys(n), s = e.fields || {}, i = Object.keys(s);\n            // Even though MapValues are likely sorted correctly based on their insertion\n            // order (e.g. when received from the backend), local modifications can bring\n            // elements out of order. We need to re-sort the elements to ensure that\n            // canonical IDs are independent of insertion order.\n            r.sort(), i.sort();\n            for (let t = 0; t < r.length && t < i.length; ++t) {\n                const e = yt(r[t], i[t]);\n                if (0 !== e) return e;\n                const o = Ut(n[r[t]], s[i[t]]);\n                if (0 !== o) return o;\n            }\n            return yt(r.length, i.length);\n        }\n        /** Returns a reference value for the provided database and key. */ (t.mapValue, e.mapValue);\n\n      default:\n        throw g();\n    }\n}\n\nfunction jt(t, e) {\n    if (\"string\" == typeof t && \"string\" == typeof e && t.length === e.length) return yt(t, e);\n    const n = $t(t), r = $t(e), s = yt(n.seconds, r.seconds);\n    return 0 !== s ? s : yt(n.nanos, r.nanos);\n}\n\nfunction Bt(t, e) {\n    return {\n        referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${e.path.canonicalString()}`\n    };\n}\n\n/** Returns true if `value` is an ArrayValue. */ function zt(t) {\n    return !!t && \"arrayValue\" in t;\n}\n\n/** Returns true if `value` is a NullValue. */ function Gt(t) {\n    return !!t && \"nullValue\" in t;\n}\n\n/** Returns true if `value` is NaN. */ function Wt(t) {\n    return !!t && \"doubleValue\" in t && isNaN(Number(t.doubleValue));\n}\n\n/** Returns true if `value` is a MapValue. */ function Kt(t) {\n    return !!t && \"mapValue\" in t;\n}\n\n/** Creates a deep copy of `source`. */ function Qt(t) {\n    if (t.geoPointValue) return {\n        geoPointValue: Object.assign({}, t.geoPointValue)\n    };\n    if (t.timestampValue && \"object\" == typeof t.timestampValue) return {\n        timestampValue: Object.assign({}, t.timestampValue)\n    };\n    if (t.mapValue) {\n        const e = {\n            mapValue: {\n                fields: {}\n            }\n        };\n        return Et(t.mapValue.fields, ((t, n) => e.mapValue.fields[t] = Qt(n))), e;\n    }\n    if (t.arrayValue) {\n        const e = {\n            arrayValue: {\n                values: []\n            }\n        };\n        for (let n = 0; n < (t.arrayValue.values || []).length; ++n) e.arrayValue.values[n] = Qt(t.arrayValue.values[n]);\n        return e;\n    }\n    return Object.assign({}, t);\n}\n\nclass Yt {\n    constructor(t) {\n        this.value = t;\n    }\n    static empty() {\n        return new Yt({\n            mapValue: {}\n        });\n    }\n    /**\n     * Returns the value at the given path or null.\n     *\n     * @param path - the path to search\n     * @returns The value at the path or null if the path is not set.\n     */    field(t) {\n        if (t.isEmpty()) return this.value;\n        {\n            let e = this.value;\n            for (let n = 0; n < t.length - 1; ++n) if (e = (e.mapValue.fields || {})[t.get(n)], \n            !Kt(e)) return null;\n            return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;\n        }\n    }\n    /**\n     * Sets the field to the provided value.\n     *\n     * @param path - The field path to set.\n     * @param value - The value to set.\n     */    set(t, e) {\n        this.getFieldsMap(t.popLast())[t.lastSegment()] = Qt(e);\n    }\n    /**\n     * Sets the provided fields to the provided values.\n     *\n     * @param data - A map of fields to values (or null for deletes).\n     */    setAll(t) {\n        let e = tt.emptyPath(), n = {}, r = [];\n        t.forEach(((t, s) => {\n            if (!e.isImmediateParentOf(s)) {\n                // Insert the accumulated changes at this parent location\n                const t = this.getFieldsMap(e);\n                this.applyChanges(t, n, r), n = {}, r = [], e = s.popLast();\n            }\n            t ? n[s.lastSegment()] = Qt(t) : r.push(s.lastSegment());\n        }));\n        const s = this.getFieldsMap(e);\n        this.applyChanges(s, n, r);\n    }\n    /**\n     * Removes the field at the specified path. If there is no field at the\n     * specified path, nothing is changed.\n     *\n     * @param path - The field path to remove.\n     */    delete(t) {\n        const e = this.field(t.popLast());\n        Kt(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];\n    }\n    isEqual(t) {\n        return Lt(this.value, t.value);\n    }\n    /**\n     * Returns the map that contains the leaf element of `path`. If the parent\n     * entry does not yet exist, or if it is not a map, a new map will be created.\n     */    getFieldsMap(t) {\n        let e = this.value;\n        e.mapValue.fields || (e.mapValue = {\n            fields: {}\n        });\n        for (let n = 0; n < t.length; ++n) {\n            let r = e.mapValue.fields[t.get(n)];\n            Kt(r) && r.mapValue.fields || (r = {\n                mapValue: {\n                    fields: {}\n                }\n            }, e.mapValue.fields[t.get(n)] = r), e = r;\n        }\n        return e.mapValue.fields;\n    }\n    /**\n     * Modifies `fieldsMap` by adding, replacing or deleting the specified\n     * entries.\n     */    applyChanges(t, e, n) {\n        Et(e, ((e, n) => t[e] = n));\n        for (const e of n) delete t[e];\n    }\n    clone() {\n        return new Yt(Qt(this.value));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a document in Firestore with a key, version, data and whether it\n * has local mutations applied to it.\n *\n * Documents can transition between states via `convertToFoundDocument()`,\n * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does\n * not transition to one of these states even after all mutations have been\n * applied, `isValidDocument()` returns false and the document should be removed\n * from all views.\n */ class Ht {\n    constructor(t, e, n, r, s, i) {\n        this.key = t, this.documentType = e, this.version = n, this.readTime = r, this.data = s, \n        this.documentState = i;\n    }\n    /**\n     * Creates a document with no known version or data, but which can serve as\n     * base document for mutations.\n     */    static newInvalidDocument(t) {\n        return new Ht(t, 0 /* INVALID */ , vt.min(), vt.min(), Yt.empty(), 0 /* SYNCED */);\n    }\n    /**\n     * Creates a new document that is known to exist with the given data at the\n     * given version.\n     */    static newFoundDocument(t, e, n) {\n        return new Ht(t, 1 /* FOUND_DOCUMENT */ , e, vt.min(), n, 0 /* SYNCED */);\n    }\n    /** Creates a new document that is known to not exist at the given version. */    static newNoDocument(t, e) {\n        return new Ht(t, 2 /* NO_DOCUMENT */ , e, vt.min(), Yt.empty(), 0 /* SYNCED */);\n    }\n    /**\n     * Creates a new document that is known to exist at the given version but\n     * whose data is not known (e.g. a document that was updated without a known\n     * base document).\n     */    static newUnknownDocument(t, e) {\n        return new Ht(t, 3 /* UNKNOWN_DOCUMENT */ , e, vt.min(), Yt.empty(), 2 /* HAS_COMMITTED_MUTATIONS */);\n    }\n    /**\n     * Changes the document type to indicate that it exists and that its version\n     * and data are known.\n     */    convertToFoundDocument(t, e) {\n        return this.version = t, this.documentType = 1 /* FOUND_DOCUMENT */ , this.data = e, \n        this.documentState = 0 /* SYNCED */ , this;\n    }\n    /**\n     * Changes the document type to indicate that it doesn't exist at the given\n     * version.\n     */    convertToNoDocument(t) {\n        return this.version = t, this.documentType = 2 /* NO_DOCUMENT */ , this.data = Yt.empty(), \n        this.documentState = 0 /* SYNCED */ , this;\n    }\n    /**\n     * Changes the document type to indicate that it exists at a given version but\n     * that its data is not known (e.g. a document that was updated without a known\n     * base document).\n     */    convertToUnknownDocument(t) {\n        return this.version = t, this.documentType = 3 /* UNKNOWN_DOCUMENT */ , this.data = Yt.empty(), \n        this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;\n    }\n    setHasCommittedMutations() {\n        return this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;\n    }\n    setHasLocalMutations() {\n        return this.documentState = 1 /* HAS_LOCAL_MUTATIONS */ , this.version = vt.min(), \n        this;\n    }\n    setReadTime(t) {\n        return this.readTime = t, this;\n    }\n    get hasLocalMutations() {\n        return 1 /* HAS_LOCAL_MUTATIONS */ === this.documentState;\n    }\n    get hasCommittedMutations() {\n        return 2 /* HAS_COMMITTED_MUTATIONS */ === this.documentState;\n    }\n    get hasPendingWrites() {\n        return this.hasLocalMutations || this.hasCommittedMutations;\n    }\n    isValidDocument() {\n        return 0 /* INVALID */ !== this.documentType;\n    }\n    isFoundDocument() {\n        return 1 /* FOUND_DOCUMENT */ === this.documentType;\n    }\n    isNoDocument() {\n        return 2 /* NO_DOCUMENT */ === this.documentType;\n    }\n    isUnknownDocument() {\n        return 3 /* UNKNOWN_DOCUMENT */ === this.documentType;\n    }\n    isEqual(t) {\n        return t instanceof Ht && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);\n    }\n    mutableCopy() {\n        return new Ht(this.key, this.documentType, this.version, this.readTime, this.data.clone(), this.documentState);\n    }\n    toString() {\n        return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Visible for testing\nclass Jt {\n    constructor(t, e = null, n = [], r = [], s = null, i = null, o = null) {\n        this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = r, this.limit = s, \n        this.startAt = i, this.endAt = o, this.D = null;\n    }\n}\n\n/**\n * Initializes a Target with a path and optional additional query constraints.\n * Path must currently be empty if this is a collection group query.\n *\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n * using this factory method, because `Query` provides an implicit `orderBy`\n * property.\n */ function Xt(t, e = null, n = [], r = [], s = null, i = null, o = null) {\n    return new Jt(t, e, n, r, s, i, o);\n}\n\nclass Zt extends class {} {\n    constructor(t, e, n) {\n        super(), this.field = t, this.op = e, this.value = n;\n    }\n    /**\n     * Creates a filter based on the provided arguments.\n     */    static create(t, e, n) {\n        return t.isKeyField() ? \"in\" /* IN */ === e || \"not-in\" /* NOT_IN */ === e ? this.$(t, e, n) : new te(t, e, n) : \"array-contains\" /* ARRAY_CONTAINS */ === e ? new se(t, n) : \"in\" /* IN */ === e ? new ie(t, n) : \"not-in\" /* NOT_IN */ === e ? new oe(t, n) : \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ === e ? new ue(t, n) : new Zt(t, e, n);\n    }\n    static $(t, e, n) {\n        return \"in\" /* IN */ === e ? new ee(t, n) : new ne(t, n);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        // Types do not have to match in NOT_EQUAL filters.\n                return \"!=\" /* NOT_EQUAL */ === this.op ? null !== e && this.F(Ut(e, this.value)) : null !== e && Ct(this.value) === Ct(e) && this.F(Ut(e, this.value));\n        // Only compare types with matching backend order (such as double and int).\n        }\n    F(t) {\n        switch (this.op) {\n          case \"<\" /* LESS_THAN */ :\n            return t < 0;\n\n          case \"<=\" /* LESS_THAN_OR_EQUAL */ :\n            return t <= 0;\n\n          case \"==\" /* EQUAL */ :\n            return 0 === t;\n\n          case \"!=\" /* NOT_EQUAL */ :\n            return 0 !== t;\n\n          case \">\" /* GREATER_THAN */ :\n            return t > 0;\n\n          case \">=\" /* GREATER_THAN_OR_EQUAL */ :\n            return t >= 0;\n\n          default:\n            return g();\n        }\n    }\n    S() {\n        return [ \"<\" /* LESS_THAN */ , \"<=\" /* LESS_THAN_OR_EQUAL */ , \">\" /* GREATER_THAN */ , \">=\" /* GREATER_THAN_OR_EQUAL */ , \"!=\" /* NOT_EQUAL */ , \"not-in\" /* NOT_IN */ ].indexOf(this.op) >= 0;\n    }\n}\n\n/** Filter that matches on key fields (i.e. '__name__'). */\nclass te extends Zt {\n    constructor(t, e, n) {\n        super(t, e, n), this.key = et.fromName(n.referenceValue);\n    }\n    matches(t) {\n        const e = et.comparator(t.key, this.key);\n        return this.F(e);\n    }\n}\n\n/** Filter that matches on key fields within an array. */ class ee extends Zt {\n    constructor(t, e) {\n        super(t, \"in\" /* IN */ , e), this.keys = re(\"in\" /* IN */ , e);\n    }\n    matches(t) {\n        return this.keys.some((e => e.isEqual(t.key)));\n    }\n}\n\n/** Filter that matches on key fields not present within an array. */ class ne extends Zt {\n    constructor(t, e) {\n        super(t, \"not-in\" /* NOT_IN */ , e), this.keys = re(\"not-in\" /* NOT_IN */ , e);\n    }\n    matches(t) {\n        return !this.keys.some((e => e.isEqual(t.key)));\n    }\n}\n\nfunction re(t, e) {\n    var n;\n    return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map((t => et.fromName(t.referenceValue)));\n}\n\n/** A Filter that implements the array-contains operator. */ class se extends Zt {\n    constructor(t, e) {\n        super(t, \"array-contains\" /* ARRAY_CONTAINS */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return zt(e) && Mt(e.arrayValue, this.value);\n    }\n}\n\n/** A Filter that implements the IN operator. */ class ie extends Zt {\n    constructor(t, e) {\n        super(t, \"in\" /* IN */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return null !== e && Mt(this.value.arrayValue, e);\n    }\n}\n\n/** A Filter that implements the not-in operator. */ class oe extends Zt {\n    constructor(t, e) {\n        super(t, \"not-in\" /* NOT_IN */ , e);\n    }\n    matches(t) {\n        if (Mt(this.value.arrayValue, {\n            nullValue: \"NULL_VALUE\"\n        })) return !1;\n        const e = t.data.field(this.field);\n        return null !== e && !Mt(this.value.arrayValue, e);\n    }\n}\n\n/** A Filter that implements the array-contains-any operator. */ class ue extends Zt {\n    constructor(t, e) {\n        super(t, \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return !(!zt(e) || !e.arrayValue.values) && e.arrayValue.values.some((t => Mt(this.value.arrayValue, t)));\n    }\n}\n\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */ class ce {\n    constructor(t, e) {\n        this.position = t, this.inclusive = e;\n    }\n}\n\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */ class ae {\n    constructor(t, e = \"asc\" /* ASCENDING */) {\n        this.field = t, this.dir = e;\n    }\n}\n\nfunction he(t, e) {\n    return t.dir === e.dir && t.field.isEqual(e.field);\n}\n\nfunction le(t, e) {\n    if (null === t) return null === e;\n    if (null === e) return !1;\n    if (t.inclusive !== e.inclusive || t.position.length !== e.position.length) return !1;\n    for (let n = 0; n < t.position.length; n++) {\n        if (!Lt(t.position[n], e.position[n])) return !1;\n    }\n    return !0;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n *\n * Visible for testing.\n */ class fe {\n    /**\n     * Initializes a Query with a path and optional additional query constraints.\n     * Path must currently be empty if this is a collection group query.\n     */\n    constructor(t, e = null, n = [], r = [], s = null, i = \"F\" /* First */ , o = null, u = null) {\n        this.path = t, this.collectionGroup = e, this.explicitOrderBy = n, this.filters = r, \n        this.limit = s, this.limitType = i, this.startAt = o, this.endAt = u, this.q = null, \n        // The corresponding `Target` of this `Query` instance.\n        this.O = null, this.startAt, this.endAt;\n    }\n}\n\n/** Creates a new Query for a query that matches all documents at `path` */ function de(t) {\n    return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;\n}\n\nfunction we(t) {\n    for (const e of t.filters) if (e.S()) return e.field;\n    return null;\n}\n\n/**\n * Checks if any of the provided Operators are included in the query and\n * returns the first one that is, or null if none are.\n */\n/**\n * Returns whether the query matches a collection group rather than a specific\n * collection.\n */\nfunction me(t) {\n    return null !== t.collectionGroup;\n}\n\n/**\n * Returns the implicit order by constraint that is used to execute the Query,\n * which can be different from the order by constraints the user provided (e.g.\n * the SDK and backend always orders by `__name__`).\n */ function pe(t) {\n    const e = b(t);\n    if (null === e.q) {\n        e.q = [];\n        const t = we(e), n = de(e);\n        if (null !== t && null === n) \n        // In order to implicitly add key ordering, we must also add the\n        // inequality filter field for it to be a valid query.\n        // Note that the default inequality field and key ordering is ascending.\n        t.isKeyField() || e.q.push(new ae(t)), e.q.push(new ae(tt.keyField(), \"asc\" /* ASCENDING */)); else {\n            let t = !1;\n            for (const n of e.explicitOrderBy) e.q.push(n), n.field.isKeyField() && (t = !0);\n            if (!t) {\n                // The order of the implicit key ordering always matches the last\n                // explicit order by\n                const t = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : \"asc\" /* ASCENDING */;\n                e.q.push(new ae(tt.keyField(), t));\n            }\n        }\n    }\n    return e.q;\n}\n\n/**\n * Converts this `Query` instance to it's corresponding `Target` representation.\n */ function ye(t) {\n    const e = b(t);\n    if (!e.O) if (\"F\" /* First */ === e.limitType) e.O = Xt(e.path, e.collectionGroup, pe(e), e.filters, e.limit, e.startAt, e.endAt); else {\n        // Flip the orderBy directions since we want the last results\n        const t = [];\n        for (const n of pe(e)) {\n            const e = \"desc\" /* DESCENDING */ === n.dir ? \"asc\" /* ASCENDING */ : \"desc\" /* DESCENDING */;\n            t.push(new ae(n.field, e));\n        }\n        // We need to swap the cursors to match the now-flipped query ordering.\n                const n = e.endAt ? new ce(e.endAt.position, e.endAt.inclusive) : null, r = e.startAt ? new ce(e.startAt.position, e.startAt.inclusive) : null;\n        // Now return as a LimitType.First query.\n        e.O = Xt(e.path, e.collectionGroup, t, e.filters, e.limit, n, r);\n    }\n    return e.O;\n}\n\nfunction _e(t, e) {\n    return function(t, e) {\n        if (t.limit !== e.limit) return !1;\n        if (t.orderBy.length !== e.orderBy.length) return !1;\n        for (let n = 0; n < t.orderBy.length; n++) if (!he(t.orderBy[n], e.orderBy[n])) return !1;\n        if (t.filters.length !== e.filters.length) return !1;\n        for (let s = 0; s < t.filters.length; s++) if (n = t.filters[s], r = e.filters[s], \n        n.op !== r.op || !n.field.isEqual(r.field) || !Lt(n.value, r.value)) return !1;\n        var n, r;\n        return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!le(t.startAt, e.startAt) && le(t.endAt, e.endAt);\n    }(ye(t), ye(e)) && t.limitType === e.limitType;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns an DoubleValue for `value` that is encoded based the serializer's\n * `useProto3Json` setting.\n */\n/**\n * Returns a value for a number that's appropriate to put into a proto.\n * The return value is an IntegerValue if it can safely represent the value,\n * otherwise a DoubleValue is returned.\n */\nfunction ge(t, e) {\n    return function(t) {\n        return \"number\" == typeof t && Number.isInteger(t) && !at(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;\n    }(e) ? \n    /**\n * Returns an IntegerValue for `value`.\n */\n    function(t) {\n        return {\n            integerValue: \"\" + t\n        };\n    }(e) : function(t, e) {\n        if (t.k) {\n            if (isNaN(e)) return {\n                doubleValue: \"NaN\"\n            };\n            if (e === 1 / 0) return {\n                doubleValue: \"Infinity\"\n            };\n            if (e === -1 / 0) return {\n                doubleValue: \"-Infinity\"\n            };\n        }\n        return {\n            doubleValue: at(e) ? \"-0\" : e\n        };\n    }(t, e);\n}\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Used to represent a field transform on a mutation. */ class ve {\n    constructor() {\n        // Make sure that the structural type of `TransformOperation` is unique.\n        // See https://github.com/microsoft/TypeScript/issues/5451\n        this._ = void 0;\n    }\n}\n\n/** Transforms a value into a server-generated timestamp. */ class be extends ve {}\n\n/** Transforms an array value via a union operation. */ class Ee extends ve {\n    constructor(t) {\n        super(), this.elements = t;\n    }\n}\n\n/** Transforms an array value via a remove operation. */ class Te extends ve {\n    constructor(t) {\n        super(), this.elements = t;\n    }\n}\n\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */ class Ie extends ve {\n    constructor(t, e) {\n        super(), this.C = t, this.L = e;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** A field path and the TransformOperation to perform upon it. */ class Ae {\n    constructor(t, e) {\n        this.field = t, this.transform = e;\n    }\n}\n\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */ class Re {\n    constructor(t, e) {\n        this.updateTime = t, this.exists = e;\n    }\n    /** Creates a new empty Precondition. */    static none() {\n        return new Re;\n    }\n    /** Creates a new Precondition with an exists flag. */    static exists(t) {\n        return new Re(void 0, t);\n    }\n    /** Creates a new Precondition based on a version a document exists at. */    static updateTime(t) {\n        return new Re(t);\n    }\n    /** Returns whether this Precondition is empty. */    get isNone() {\n        return void 0 === this.updateTime && void 0 === this.exists;\n    }\n    isEqual(t) {\n        return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);\n    }\n}\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set and Patch mutations. For Delete mutations, we\n * reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        InvalidDocument(v0)   Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set and Patch mutations. As deletes have no\n * explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we transition to an `UnknownDocument` and rely on Watch to send us\n * the updated version.\n *\n * Field transforms are used only with Patch and Set Mutations. We use the\n * `updateTransforms` message to store transforms, rather than the `transforms`s\n * messages.\n *\n * ## Subclassing Notes\n *\n * Every type of mutation needs to implement its own applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document (see `setMutationApplyToRemoteDocument()` for an\n * example).\n */ class Pe {}\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */ class Ve extends Pe {\n    constructor(t, e, n, r = []) {\n        super(), this.key = t, this.value = e, this.precondition = n, this.fieldTransforms = r, \n        this.type = 0 /* Set */;\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */ class Ne extends Pe {\n    constructor(t, e, n, r, s = []) {\n        super(), this.key = t, this.data = e, this.fieldMask = n, this.precondition = r, \n        this.fieldTransforms = s, this.type = 1 /* Patch */;\n    }\n    getFieldMask() {\n        return this.fieldMask;\n    }\n}\n\n/** A mutation that deletes the document at the given key. */ class De extends Pe {\n    constructor(t, e) {\n        super(), this.key = t, this.precondition = e, this.type = 2 /* Delete */ , this.fieldTransforms = [];\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */ class $e extends Pe {\n    constructor(t, e) {\n        super(), this.key = t, this.precondition = e, this.type = 3 /* Verify */ , this.fieldTransforms = [];\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const xe = (() => {\n    const t = {\n        asc: \"ASCENDING\",\n        desc: \"DESCENDING\"\n    };\n    return t;\n})(), Fe = (() => {\n    const t = {\n        \"<\": \"LESS_THAN\",\n        \"<=\": \"LESS_THAN_OR_EQUAL\",\n        \">\": \"GREATER_THAN\",\n        \">=\": \"GREATER_THAN_OR_EQUAL\",\n        \"==\": \"EQUAL\",\n        \"!=\": \"NOT_EQUAL\",\n        \"array-contains\": \"ARRAY_CONTAINS\",\n        in: \"IN\",\n        \"not-in\": \"NOT_IN\",\n        \"array-contains-any\": \"ARRAY_CONTAINS_ANY\"\n    };\n    return t;\n})();\n\n/**\n * This class generates JsonObject values for the Datastore API suitable for\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\n *\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\n * format.\n *\n * For a description of the Proto3 JSON format check\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n *\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nclass Se {\n    constructor(t, e) {\n        this.databaseId = t, this.k = e;\n    }\n}\n\n/**\n * Returns a value for a number (or null) that's appropriate to put into\n * a google.protobuf.Int32Value proto.\n * DO NOT USE THIS FOR ANYTHING ELSE.\n * This method cheats. It's typed as returning \"number\" because that's what\n * our generated proto interfaces say Int32Value must be. But GRPC actually\n * expects a { value: <number> } struct.\n */\n/**\n * Returns a value for a Date that's appropriate to put into a proto.\n */\nfunction qe(t, e) {\n    if (t.k) {\n        return `${new Date(1e3 * e.seconds).toISOString().replace(/\\.\\d*/, \"\").replace(\"Z\", \"\")}.${(\"000000000\" + e.nanoseconds).slice(-9)}Z`;\n    }\n    return {\n        seconds: \"\" + e.seconds,\n        nanos: e.nanoseconds\n    };\n}\n\n/**\n * Returns a value for bytes that's appropriate to put in a proto.\n *\n * Visible for testing.\n */\nfunction Oe(t, e) {\n    return t.k ? e.toBase64() : e.toUint8Array();\n}\n\nfunction ke(t, e) {\n    return qe(t, e.toTimestamp());\n}\n\nfunction Ce(t) {\n    return v(!!t), vt.fromTimestamp(function(t) {\n        const e = $t(t);\n        return new gt(e.seconds, e.nanos);\n    }(t));\n}\n\nfunction Le(t, e) {\n    return function(t) {\n        return new X([ \"projects\", t.projectId, \"databases\", t.database ]);\n    }(t).child(\"documents\").child(e).canonicalString();\n}\n\nfunction Me(t, e) {\n    return Le(t.databaseId, e.path);\n}\n\nfunction Ue(t, e) {\n    const n = function(t) {\n        const e = X.fromString(t);\n        return v(Xe(e)), e;\n    }(e);\n    if (n.get(1) !== t.databaseId.projectId) throw new L(A, \"Tried to deserialize key from different project: \" + n.get(1) + \" vs \" + t.databaseId.projectId);\n    if (n.get(3) !== t.databaseId.database) throw new L(A, \"Tried to deserialize key from different database: \" + n.get(3) + \" vs \" + t.databaseId.database);\n    return new et((v((r = n).length > 4 && \"documents\" === r.get(4)), r.popFirst(5)));\n    var r;\n    /** Creates a Document proto from key and fields (but no create/update time) */}\n\nfunction je(t, e) {\n    return Le(t.databaseId, e);\n}\n\nfunction Be(t) {\n    return new X([ \"projects\", t.databaseId.projectId, \"databases\", t.databaseId.database ]).canonicalString();\n}\n\nfunction ze(t, e, n) {\n    return {\n        name: Me(t, e),\n        fields: n.value.mapValue.fields\n    };\n}\n\nfunction Ge(t, e) {\n    return \"found\" in e ? function(t, e) {\n        v(!!e.found), e.found.name, e.found.updateTime;\n        const n = Ue(t, e.found.name), r = Ce(e.found.updateTime), s = new Yt({\n            mapValue: {\n                fields: e.found.fields\n            }\n        });\n        return Ht.newFoundDocument(n, r, s);\n    }(t, e) : \"missing\" in e ? function(t, e) {\n        v(!!e.missing), v(!!e.readTime);\n        const n = Ue(t, e.missing), r = Ce(e.readTime);\n        return Ht.newNoDocument(n, r);\n    }(t, e) : g();\n}\n\nfunction We(t, e) {\n    let n;\n    if (e instanceof Ve) n = {\n        update: ze(t, e.key, e.value)\n    }; else if (e instanceof De) n = {\n        delete: Me(t, e.key)\n    }; else if (e instanceof Ne) n = {\n        update: ze(t, e.key, e.data),\n        updateMask: Je(e.fieldMask)\n    }; else {\n        if (!(e instanceof $e)) return g();\n        n = {\n            verify: Me(t, e.key)\n        };\n    }\n    return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map((t => function(t, e) {\n        const n = e.transform;\n        if (n instanceof be) return {\n            fieldPath: e.field.canonicalString(),\n            setToServerValue: \"REQUEST_TIME\"\n        };\n        if (n instanceof Ee) return {\n            fieldPath: e.field.canonicalString(),\n            appendMissingElements: {\n                values: n.elements\n            }\n        };\n        if (n instanceof Te) return {\n            fieldPath: e.field.canonicalString(),\n            removeAllFromArray: {\n                values: n.elements\n            }\n        };\n        if (n instanceof Ie) return {\n            fieldPath: e.field.canonicalString(),\n            increment: n.L\n        };\n        throw g();\n    }(0, t)))), e.precondition.isNone || (n.currentDocument = function(t, e) {\n        return void 0 !== e.updateTime ? {\n            updateTime: ke(t, e.updateTime)\n        } : void 0 !== e.exists ? {\n            exists: e.exists\n        } : g();\n    }(t, e.precondition)), n;\n}\n\nfunction Ke(t, e) {\n    // Dissect the path into parent, collectionId, and optional key filter.\n    const n = {\n        structuredQuery: {}\n    }, r = e.path;\n    null !== e.collectionGroup ? (n.parent = je(t, r), n.structuredQuery.from = [ {\n        collectionId: e.collectionGroup,\n        allDescendants: !0\n    } ]) : (n.parent = je(t, r.popLast()), n.structuredQuery.from = [ {\n        collectionId: r.lastSegment()\n    } ]);\n    const s = function(t) {\n        if (0 === t.length) return;\n        const e = t.map((t => \n        // visible for testing\n        function(t) {\n            if (\"==\" /* EQUAL */ === t.op) {\n                if (Wt(t.value)) return {\n                    unaryFilter: {\n                        field: He(t.field),\n                        op: \"IS_NAN\"\n                    }\n                };\n                if (Gt(t.value)) return {\n                    unaryFilter: {\n                        field: He(t.field),\n                        op: \"IS_NULL\"\n                    }\n                };\n            } else if (\"!=\" /* NOT_EQUAL */ === t.op) {\n                if (Wt(t.value)) return {\n                    unaryFilter: {\n                        field: He(t.field),\n                        op: \"IS_NOT_NAN\"\n                    }\n                };\n                if (Gt(t.value)) return {\n                    unaryFilter: {\n                        field: He(t.field),\n                        op: \"IS_NOT_NULL\"\n                    }\n                };\n            }\n            return {\n                fieldFilter: {\n                    field: He(t.field),\n                    op: Ye(t.op),\n                    value: t.value\n                }\n            };\n        }(t)));\n        if (1 === e.length) return e[0];\n        return {\n            compositeFilter: {\n                op: \"AND\",\n                filters: e\n            }\n        };\n    }(e.filters);\n    s && (n.structuredQuery.where = s);\n    const i = function(t) {\n        if (0 === t.length) return;\n        return t.map((t => \n        // visible for testing\n        function(t) {\n            return {\n                field: He(t.field),\n                direction: Qe(t.dir)\n            };\n        }(t)));\n    }(e.orderBy);\n    i && (n.structuredQuery.orderBy = i);\n    const o = function(t, e) {\n        return t.k || ct(e) ? e : {\n            value: e\n        };\n    }(t, e.limit);\n    var u;\n    return null !== o && (n.structuredQuery.limit = o), e.startAt && (n.structuredQuery.startAt = {\n        before: (u = e.startAt).inclusive,\n        values: u.position\n    }), e.endAt && (n.structuredQuery.endAt = function(t) {\n        return {\n            before: !t.inclusive,\n            values: t.position\n        };\n    }\n    // visible for testing\n    (e.endAt)), n;\n}\n\nfunction Qe(t) {\n    return xe[t];\n}\n\n// visible for testing\nfunction Ye(t) {\n    return Fe[t];\n}\n\nfunction He(t) {\n    return {\n        fieldPath: t.canonicalString()\n    };\n}\n\nfunction Je(t) {\n    const e = [];\n    return t.fields.forEach((t => e.push(t.canonicalString()))), {\n        fieldPaths: e\n    };\n}\n\nfunction Xe(t) {\n    // Resource names have at least 4 components (project ID, database ID)\n    return t.length >= 4 && \"projects\" === t.get(0) && \"databases\" === t.get(2);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function Ze(t) {\n    return new Se(t, /* useProto3Json= */ !0);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nclass tn {\n    constructor(\n    /**\n     * The AsyncQueue to run backoff operations on.\n     */\n    t, \n    /**\n     * The ID to use when scheduling backoff operations on the AsyncQueue.\n     */\n    e, \n    /**\n     * The initial delay (used as the base delay on the first retry attempt).\n     * Note that jitter will still be applied, so the actual delay could be as\n     * little as 0.5*initialDelayMs.\n     */\n    n = 1e3\n    /**\n     * The multiplier to use to determine the extended base delay after each\n     * attempt.\n     */ , r = 1.5\n    /**\n     * The maximum base delay after which no further backoff is performed.\n     * Note that jitter will still be applied, so the actual delay could be as\n     * much as 1.5*maxDelayMs.\n     */ , s = 6e4) {\n        this.M = t, this.timerId = e, this.U = n, this.j = r, this.B = s, this.G = 0, this.W = null, \n        /** The last backoff attempt, as epoch milliseconds. */\n        this.K = Date.now(), this.reset();\n    }\n    /**\n     * Resets the backoff delay.\n     *\n     * The very next backoffAndWait() will have no delay. If it is called again\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n     * subsequent ones will increase according to the backoffFactor.\n     */    reset() {\n        this.G = 0;\n    }\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     */    Y() {\n        this.G = this.B;\n    }\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts. If there was a pending backoff operation\n     * already, it will be canceled.\n     */    H(t) {\n        // Cancel any pending backoff operation.\n        this.cancel();\n        // First schedule using the current base (which may be 0 and should be\n        // honored as such).\n        const e = Math.floor(this.G + this.J()), n = Math.max(0, Date.now() - this.K), r = Math.max(0, e - n);\n        // Guard against lastAttemptTime being in the future due to a clock change.\n                r > 0 && m(\"ExponentialBackoff\", `Backing off for ${r} ms (base delay: ${this.G} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`), \n        this.W = this.M.enqueueAfterDelay(this.timerId, r, (() => (this.K = Date.now(), \n        t()))), \n        // Apply backoff factor to determine next delay and ensure it is within\n        // bounds.\n        this.G *= this.j, this.G < this.U && (this.G = this.U), this.G > this.B && (this.G = this.B);\n    }\n    X() {\n        null !== this.W && (this.W.skipDelay(), this.W = null);\n    }\n    cancel() {\n        null !== this.W && (this.W.cancel(), this.W = null);\n    }\n    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */    J() {\n        return (Math.random() - .5) * this.G;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Datastore and its related methods are a wrapper around the external Google\n * Cloud Datastore grpc API, which provides an interface that is more convenient\n * for the rest of the client SDK architecture to consume.\n */\n/**\n * An implementation of Datastore that exposes additional state for internal\n * consumption.\n */\nclass en extends class {} {\n    constructor(t, e, n, r) {\n        super(), this.authCredentials = t, this.appCheckCredentials = e, this.Z = n, this.C = r, \n        this.tt = !1;\n    }\n    et() {\n        if (this.tt) throw new L(x, \"The client has already been terminated.\");\n    }\n    /** Invokes the provided RPC with auth and AppCheck tokens. */    v(t, e, n) {\n        return this.et(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([r, s]) => this.Z.v(t, e, n, r, s))).catch((t => {\n            throw \"FirebaseError\" === t.name ? (t.code === D && (this.authCredentials.invalidateToken(), \n            this.appCheckCredentials.invalidateToken()), t) : new L(I, t.toString());\n        }));\n    }\n    /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */    R(t, e, n, r) {\n        return this.et(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([s, i]) => this.Z.R(t, e, n, s, i, r))).catch((t => {\n            throw \"FirebaseError\" === t.name ? (t.code === D && (this.authCredentials.invalidateToken(), \n            this.appCheckCredentials.invalidateToken()), t) : new L(I, t.toString());\n        }));\n    }\n    terminate() {\n        this.tt = !0;\n    }\n}\n\n// TODO(firestorexp): Make sure there is only one Datastore instance per\n// firestore-exp client.\nasync function nn(t, e) {\n    const n = b(t), r = Be(n.C) + \"/documents\", s = {\n        writes: e.map((t => We(n.C, t)))\n    };\n    await n.v(\"Commit\", r, s);\n}\n\nasync function rn(t, e) {\n    const n = b(t), r = Be(n.C) + \"/documents\", s = {\n        documents: e.map((t => Me(n.C, t)))\n    }, i = await n.R(\"BatchGetDocuments\", r, s, e.length), o = new Map;\n    i.forEach((t => {\n        const e = Ge(n.C, t);\n        o.set(e.key.toString(), e);\n    }));\n    const u = [];\n    return e.forEach((t => {\n        const e = o.get(t.toString());\n        v(!!e), u.push(e);\n    })), u;\n}\n\nasync function sn(t, e) {\n    const n = b(t), r = Ke(n.C, ye(e));\n    return (await n.R(\"RunQuery\", r.parent, {\n        structuredQuery: r.structuredQuery\n    })).filter((t => !!t.document)).map((t => function(t, e, n) {\n        const r = Ue(t, e.name), s = Ce(e.updateTime), i = new Yt({\n            mapValue: {\n                fields: e.fields\n            }\n        }), o = Ht.newFoundDocument(r, s, i);\n        return n && o.setHasCommittedMutations(), n ? o.setHasCommittedMutations() : o;\n    }(n.C, t.document, void 0)));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const on = new Map;\n\n/**\n * An instance map that ensures only one Datastore exists per Firestore\n * instance.\n */\n/**\n * Returns an initialized and started Datastore for the given Firestore\n * instance. Callers must invoke removeComponents() when the Firestore\n * instance is terminated.\n */\nfunction un(t) {\n    if (t._terminated) throw new L(x, \"The client has already been terminated.\");\n    if (!on.has(t)) {\n        m(\"ComponentProvider\", \"Initializing Datastore\");\n        const i = function(t) {\n            return new wt(t, fetch.bind(null));\n        }((e = t._databaseId, n = t.app.options.appId || \"\", r = t._persistenceKey, s = t._freezeSettings(), \n        new Y(e, n, r, s.host, s.ssl, s.experimentalForceLongPolling, s.experimentalAutoDetectLongPolling, s.useFetchStreams))), o = Ze(t._databaseId), u = function(t, e, n, r) {\n            return new en(t, e, n, r);\n        }(t._authCredentials, t._appCheckCredentials, i, o);\n        on.set(t, u);\n    }\n    var e, n, r, s;\n    /**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */    return on.get(t);\n}\n\n/**\n * Removes all components associated with the provided instance. Must be called\n * when the `Firestore` instance is terminated.\n */\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied `FirestoreSettings` object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nclass cn {\n    constructor(t) {\n        var e;\n        if (void 0 === t.host) {\n            if (void 0 !== t.ssl) throw new L(A, \"Can't provide ssl option if host option is not set\");\n            this.host = \"firestore.googleapis.com\", this.ssl = true;\n        } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;\n        if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, \n        void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040; else {\n            if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new L(A, \"cacheSizeBytes must be at least 1048576\");\n            this.cacheSizeBytes = t.cacheSizeBytes;\n        }\n        this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, \n        this.useFetchStreams = !!t.useFetchStreams, function(t, e, n, r) {\n            if (!0 === e && !0 === r) throw new L(A, `${t} and ${n} cannot be used together.`);\n        }(\"experimentalForceLongPolling\", t.experimentalForceLongPolling, \"experimentalAutoDetectLongPolling\", t.experimentalAutoDetectLongPolling);\n    }\n    isEqual(t) {\n        return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The Cloud Firestore service interface.\n *\n * Do not call this constructor directly. Instead, use {@link getFirestore}.\n */ class an {\n    /** @hideconstructor */\n    constructor(t, e, n, r) {\n        this._authCredentials = t, this._appCheckCredentials = e, this._databaseId = n, \n        this._app = r, \n        /**\n         * Whether it's a Firestore or Firestore Lite instance.\n         */\n        this.type = \"firestore-lite\", this._persistenceKey = \"(lite)\", this._settings = new cn({}), \n        this._settingsFrozen = !1;\n    }\n    /**\n     * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service\n     * instance.\n     */    get app() {\n        if (!this._app) throw new L(x, \"Firestore was not initialized using the Firebase SDK. 'app' is not available\");\n        return this._app;\n    }\n    get _initialized() {\n        return this._settingsFrozen;\n    }\n    get _terminated() {\n        return void 0 !== this._terminateTask;\n    }\n    _setSettings(t) {\n        if (this._settingsFrozen) throw new L(x, \"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.\");\n        this._settings = new cn(t), void 0 !== t.credentials && (this._authCredentials = function(t) {\n            if (!t) return new j;\n            switch (t.type) {\n              case \"gapi\":\n                const e = t.client;\n                return new W(e, t.sessionIndex || \"0\", t.iamToken || null, t.authTokenFactory || null);\n\n              case \"provider\":\n                return t.client;\n\n              default:\n                throw new L(A, \"makeAuthCredentialsProvider failed due to invalid credential type\");\n            }\n        }(t.credentials));\n    }\n    _getSettings() {\n        return this._settings;\n    }\n    _freezeSettings() {\n        return this._settingsFrozen = !0, this._settings;\n    }\n    _delete() {\n        return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;\n    }\n    /** Returns a JSON-serializable representation of this `Firestore` instance. */    toJSON() {\n        return {\n            app: this._app,\n            databaseId: this._databaseId,\n            settings: this._settings\n        };\n    }\n    /**\n     * Terminates all components used by this client. Subclasses can override\n     * this method to clean up their own dependencies, but must also call this\n     * method.\n     *\n     * Only ever called once.\n     */    _terminate() {\n        return function(t) {\n            const e = on.get(t);\n            e && (m(\"ComponentProvider\", \"Removing Datastore\"), on.delete(t), e.terminate());\n        }(this), Promise.resolve();\n    }\n}\n\nfunction hn(t, e, n) {\n    n || (n = \"(default)\");\n    const r = _getProvider(t, \"firestore/lite\");\n    if (r.isInitialized(n)) throw new L(x, \"Firestore can only be initialized once per app.\");\n    return r.initialize({\n        options: e,\n        instanceIdentifier: n\n    });\n}\n\nfunction ln(e, n) {\n    const r = \"object\" == typeof e ? e : t(), s = \"string\" == typeof e ? e : n || \"(default)\";\n    return _getProvider(r, \"firestore/lite\").getImmediate({\n        identifier: s\n    });\n}\n\n/**\n * Modify this instance to communicate with the Cloud Firestore emulator.\n *\n * Note: This must be called before this instance has been used to do any\n * operations.\n *\n * @param firestore - The `Firestore` instance to configure to connect to the\n * emulator.\n * @param host - the emulator host (ex: localhost).\n * @param port - the emulator port (ex: 9000).\n * @param options.mockUserToken - the mock auth token to use for unit testing\n * Security Rules.\n */ function fn(t, e, n, r = {}) {\n    var s;\n    const i = (t = ot(t, an))._getSettings();\n    if (\"firestore.googleapis.com\" !== i.host && i.host !== e && y(\"Host has been set in both settings() and useEmulator(), emulator host will be used\"), \n    t._setSettings(Object.assign(Object.assign({}, i), {\n        host: `${e}:${n}`,\n        ssl: !1\n    })), r.mockUserToken) {\n        let e, n;\n        if (\"string\" == typeof r.mockUserToken) e = r.mockUserToken, n = l.MOCK_USER; else {\n            // Let createMockUserToken validate first (catches common mistakes like\n            // invalid field \"uid\" and missing field \"sub\" / \"user_id\".)\n            e = a(r.mockUserToken, null === (s = t._app) || void 0 === s ? void 0 : s.options.projectId);\n            const i = r.mockUserToken.sub || r.mockUserToken.user_id;\n            if (!i) throw new L(A, \"mockUserToken must contain 'sub' or 'user_id' field!\");\n            n = new l(i);\n        }\n        t._authCredentials = new B(new U(e, n));\n    }\n}\n\n/**\n * Terminates the provided `Firestore` instance.\n *\n * After calling `terminate()` only the `clearIndexedDbPersistence()` functions\n * may be used. Any other function will throw a `FirestoreError`. Termination\n * does not cancel any pending writes, and any promises that are awaiting a\n * response from the server will not be resolved.\n *\n * To restart after termination, create a new instance of `Firestore` with\n * {@link getFirestore}.\n *\n * Note: Under normal circumstances, calling `terminate()` is not required. This\n * function is useful only when you want to force this instance to release all of\n * its resources or in combination with {@link clearIndexedDbPersistence} to\n * ensure that all local state is destroyed between test runs.\n *\n * @param firestore - The `Firestore` instance to terminate.\n * @returns A `Promise` that is resolved when the instance has been successfully\n * terminated.\n */ function dn(t) {\n    return t = ot(t, an), e(t.app, \"firestore/lite\"), t._delete();\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `DocumentReference` refers to a document location in a Firestore database\n * and can be used to write, read, or listen to the location. The document at\n * the referenced location may or may not exist.\n */\nclass wn {\n    /** @hideconstructor */\n    constructor(t, \n    /**\n     * If provided, the `FirestoreDataConverter` associated with this instance.\n     */\n    e, n) {\n        this.converter = e, this._key = n, \n        /** The type of this Firestore reference. */\n        this.type = \"document\", this.firestore = t;\n    }\n    get _path() {\n        return this._key.path;\n    }\n    /**\n     * The document's identifier within its collection.\n     */    get id() {\n        return this._key.path.lastSegment();\n    }\n    /**\n     * A string representing the path of the referenced document (relative\n     * to the root of the database).\n     */    get path() {\n        return this._key.path.canonicalString();\n    }\n    /**\n     * The collection this `DocumentReference` belongs to.\n     */    get parent() {\n        return new pn(this.firestore, this.converter, this._key.path.popLast());\n    }\n    withConverter(t) {\n        return new wn(this.firestore, t, this._key);\n    }\n}\n\n/**\n * A `Query` refers to a query which you can read or listen to. You can also\n * construct refined `Query` objects by adding filters and ordering.\n */ class mn {\n    // This is the lite version of the Query class in the main SDK.\n    /** @hideconstructor protected */\n    constructor(t, \n    /**\n     * If provided, the `FirestoreDataConverter` associated with this instance.\n     */\n    e, n) {\n        this.converter = e, this._query = n, \n        /** The type of this Firestore reference. */\n        this.type = \"query\", this.firestore = t;\n    }\n    withConverter(t) {\n        return new mn(this.firestore, t, this._query);\n    }\n}\n\n/**\n * A `CollectionReference` object can be used for adding documents, getting\n * document references, and querying for documents (using {@link query}).\n */ class pn extends mn {\n    /** @hideconstructor */\n    constructor(t, e, n) {\n        super(t, e, new fe(n)), this._path = n, \n        /** The type of this Firestore reference. */\n        this.type = \"collection\";\n    }\n    /** The collection's identifier. */    get id() {\n        return this._query.path.lastSegment();\n    }\n    /**\n     * A string representing the path of the referenced collection (relative\n     * to the root of the database).\n     */    get path() {\n        return this._query.path.canonicalString();\n    }\n    /**\n     * A reference to the containing `DocumentReference` if this is a\n     * subcollection. If this isn't a subcollection, the reference is null.\n     */    get parent() {\n        const t = this._path.popLast();\n        return t.isEmpty() ? null : new wn(this.firestore, \n        /* converter= */ null, new et(t));\n    }\n    withConverter(t) {\n        return new pn(this.firestore, t, this._path);\n    }\n}\n\nfunction yn(t, e, ...n) {\n    if (t = h(t), nt(\"collection\", \"path\", e), t instanceof an) {\n        const r = X.fromString(e, ...n);\n        return st(r), new pn(t, /* converter= */ null, r);\n    }\n    {\n        if (!(t instanceof wn || t instanceof pn)) throw new L(A, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n        const r = t._path.child(X.fromString(e, ...n));\n        return st(r), new pn(t.firestore, \n        /* converter= */ null, r);\n    }\n}\n\n// TODO(firestorelite): Consider using ErrorFactory -\n// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106\n/**\n * Creates and returns a new `Query` instance that includes all documents in the\n * database that are contained in a collection or subcollection with the\n * given `collectionId`.\n *\n * @param firestore - A reference to the root `Firestore` instance.\n * @param collectionId - Identifies the collections to query over. Every\n * collection or subcollection with this ID as the last segment of its path\n * will be included. Cannot contain a slash.\n * @returns The created `Query`.\n */ function _n(t, e) {\n    if (t = ot(t, an), nt(\"collectionGroup\", \"collection id\", e), e.indexOf(\"/\") >= 0) throw new L(A, `Invalid collection ID '${e}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);\n    return new mn(t, \n    /* converter= */ null, \n    /**\n * Creates a new Query for a collection group query that matches all documents\n * within the provided collection group.\n */\n    function(t) {\n        return new fe(X.emptyPath(), t);\n    }(e));\n}\n\nfunction gn(t, e, ...n) {\n    if (t = h(t), \n    // We allow omission of 'pathString' but explicitly prohibit passing in both\n    // 'undefined' and 'null'.\n    1 === arguments.length && (e = pt.N()), nt(\"doc\", \"path\", e), t instanceof an) {\n        const r = X.fromString(e, ...n);\n        return rt(r), new wn(t, \n        /* converter= */ null, new et(r));\n    }\n    {\n        if (!(t instanceof wn || t instanceof pn)) throw new L(A, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n        const r = t._path.child(X.fromString(e, ...n));\n        return rt(r), new wn(t.firestore, t instanceof pn ? t.converter : null, new et(r));\n    }\n}\n\n/**\n * Returns true if the provided references are equal.\n *\n * @param left - A reference to compare.\n * @param right - A reference to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */ function vn(t, e) {\n    return t = h(t), e = h(e), (t instanceof wn || t instanceof pn) && (e instanceof wn || e instanceof pn) && (t.firestore === e.firestore && t.path === e.path && t.converter === e.converter);\n}\n\n/**\n * Returns true if the provided queries point to the same collection and apply\n * the same constraints.\n *\n * @param left - A `Query` to compare.\n * @param right - A `Query` to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */ function bn(t, e) {\n    return t = h(t), e = h(e), t instanceof mn && e instanceof mn && (t.firestore === e.firestore && _e(t._query, e._query) && t.converter === e.converter);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `FieldPath` refers to a field in a document. The path may consist of a\n * single field name (referring to a top-level field in the document), or a\n * list of field names (referring to a nested field in the document).\n *\n * Create a `FieldPath` by providing field names. If more than one field\n * name is provided, the path will point to a nested field in a document.\n */ class En {\n    /**\n     * Creates a `FieldPath` from the provided field names. If more than one field\n     * name is provided, the path will point to a nested field in a document.\n     *\n     * @param fieldNames - A list of field names.\n     */\n    constructor(...t) {\n        for (let e = 0; e < t.length; ++e) if (0 === t[e].length) throw new L(A, \"Invalid field name at argument $(i + 1). Field names must not be empty.\");\n        this._internalPath = new tt(t);\n    }\n    /**\n     * Returns true if this `FieldPath` is equal to the provided one.\n     *\n     * @param other - The `FieldPath` to compare against.\n     * @returns true if this `FieldPath` is equal to the provided one.\n     */    isEqual(t) {\n        return this._internalPath.isEqual(t._internalPath);\n    }\n}\n\n/**\n * Returns a special sentinel `FieldPath` to refer to the ID of a document.\n * It can be used in queries to sort or filter by the document ID.\n */ function Tn() {\n    return new En(\"__name__\");\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing an array of bytes.\n */ class In {\n    /** @hideconstructor */\n    constructor(t) {\n        this._byteString = t;\n    }\n    /**\n     * Creates a new `Bytes` object from the given Base64 string, converting it to\n     * bytes.\n     *\n     * @param base64 - The Base64 string used to create the `Bytes` object.\n     */    static fromBase64String(t) {\n        try {\n            return new In(Nt.fromBase64String(t));\n        } catch (t) {\n            throw new L(A, \"Failed to construct data from Base64 string: \" + t);\n        }\n    }\n    /**\n     * Creates a new `Bytes` object from the given Uint8Array.\n     *\n     * @param array - The Uint8Array used to create the `Bytes` object.\n     */    static fromUint8Array(t) {\n        return new In(Nt.fromUint8Array(t));\n    }\n    /**\n     * Returns the underlying bytes as a Base64-encoded string.\n     *\n     * @returns The Base64-encoded string created from the `Bytes` object.\n     */    toBase64() {\n        return this._byteString.toBase64();\n    }\n    /**\n     * Returns the underlying bytes in a new `Uint8Array`.\n     *\n     * @returns The Uint8Array created from the `Bytes` object.\n     */    toUint8Array() {\n        return this._byteString.toUint8Array();\n    }\n    /**\n     * Returns a string representation of the `Bytes` object.\n     *\n     * @returns A string representation of the `Bytes` object.\n     */    toString() {\n        return \"Bytes(base64: \" + this.toBase64() + \")\";\n    }\n    /**\n     * Returns true if this `Bytes` object is equal to the provided one.\n     *\n     * @param other - The `Bytes` object to compare against.\n     * @returns true if this `Bytes` object is equal to the provided one.\n     */    isEqual(t) {\n        return this._byteString.isEqual(t._byteString);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Sentinel values that can be used when writing document fields with `set()`\n * or `update()`.\n */ class An {\n    /**\n     * @param _methodName - The public API endpoint that returns this class.\n     * @hideconstructor\n     */\n    constructor(t) {\n        this._methodName = t;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing a geographic location in Firestore. The\n * location is represented as latitude/longitude pair.\n *\n * Latitude values are in the range of [-90, 90].\n * Longitude values are in the range of [-180, 180].\n */ class Rn {\n    /**\n     * Creates a new immutable `GeoPoint` object with the provided latitude and\n     * longitude values.\n     * @param latitude - The latitude as number between -90 and 90.\n     * @param longitude - The longitude as number between -180 and 180.\n     */\n    constructor(t, e) {\n        if (!isFinite(t) || t < -90 || t > 90) throw new L(A, \"Latitude must be a number between -90 and 90, but was: \" + t);\n        if (!isFinite(e) || e < -180 || e > 180) throw new L(A, \"Longitude must be a number between -180 and 180, but was: \" + e);\n        this._lat = t, this._long = e;\n    }\n    /**\n     * The latitude of this `GeoPoint` instance.\n     */    get latitude() {\n        return this._lat;\n    }\n    /**\n     * The longitude of this `GeoPoint` instance.\n     */    get longitude() {\n        return this._long;\n    }\n    /**\n     * Returns true if this `GeoPoint` is equal to the provided one.\n     *\n     * @param other - The `GeoPoint` to compare against.\n     * @returns true if this `GeoPoint` is equal to the provided one.\n     */    isEqual(t) {\n        return this._lat === t._lat && this._long === t._long;\n    }\n    /** Returns a JSON-serializable representation of this GeoPoint. */    toJSON() {\n        return {\n            latitude: this._lat,\n            longitude: this._long\n        };\n    }\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */    _compareTo(t) {\n        return yt(this._lat, t._lat) || yt(this._long, t._long);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const Pn = /^__.*__$/;\n\n/** The result of parsing document data (e.g. for a setData call). */ class Vn {\n    constructor(t, e, n) {\n        this.data = t, this.fieldMask = e, this.fieldTransforms = n;\n    }\n    toMutation(t, e) {\n        return null !== this.fieldMask ? new Ne(t, this.data, this.fieldMask, e, this.fieldTransforms) : new Ve(t, this.data, e, this.fieldTransforms);\n    }\n}\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */ class Nn {\n    constructor(t, \n    // The fieldMask does not include document transforms.\n    e, n) {\n        this.data = t, this.fieldMask = e, this.fieldTransforms = n;\n    }\n    toMutation(t, e) {\n        return new Ne(t, this.data, this.fieldMask, e, this.fieldTransforms);\n    }\n}\n\nfunction Dn(t) {\n    switch (t) {\n      case 0 /* Set */ :\n // fall through\n              case 2 /* MergeSet */ :\n // fall through\n              case 1 /* Update */ :\n        return !0;\n\n      case 3 /* Argument */ :\n      case 4 /* ArrayArgument */ :\n        return !1;\n\n      default:\n        throw g();\n    }\n}\n\n/** A \"context\" object passed around while parsing user data. */ class $n {\n    /**\n     * Initializes a ParseContext with the given source and path.\n     *\n     * @param settings - The settings for the parser.\n     * @param databaseId - The database ID of the Firestore instance.\n     * @param serializer - The serializer to use to generate the Value proto.\n     * @param ignoreUndefinedProperties - Whether to ignore undefined properties\n     * rather than throw.\n     * @param fieldTransforms - A mutable list of field transforms encountered\n     * while parsing the data.\n     * @param fieldMask - A mutable list of field paths encountered while parsing\n     * the data.\n     *\n     * TODO(b/34871131): We don't support array paths right now, so path can be\n     * null to indicate the context represents any location within an array (in\n     * which case certain features will not work and errors will be somewhat\n     * compromised).\n     */\n    constructor(t, e, n, r, s, i) {\n        this.settings = t, this.databaseId = e, this.C = n, this.ignoreUndefinedProperties = r, \n        // Minor hack: If fieldTransforms is undefined, we assume this is an\n        // external call and we need to validate the entire path.\n        void 0 === s && this.nt(), this.fieldTransforms = s || [], this.fieldMask = i || [];\n    }\n    get path() {\n        return this.settings.path;\n    }\n    get rt() {\n        return this.settings.rt;\n    }\n    /** Returns a new context with the specified settings overwritten. */    st(t) {\n        return new $n(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.C, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);\n    }\n    it(t) {\n        var e;\n        const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.st({\n            path: n,\n            ot: !1\n        });\n        return r.ut(t), r;\n    }\n    ct(t) {\n        var e;\n        const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.st({\n            path: n,\n            ot: !1\n        });\n        return r.nt(), r;\n    }\n    at(t) {\n        // TODO(b/34871131): We don't support array paths right now; so make path\n        // undefined.\n        return this.st({\n            path: void 0,\n            ot: !0\n        });\n    }\n    ht(t) {\n        return Jn(t, this.settings.methodName, this.settings.lt || !1, this.path, this.settings.ft);\n    }\n    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */    contains(t) {\n        return void 0 !== this.fieldMask.find((e => t.isPrefixOf(e))) || void 0 !== this.fieldTransforms.find((e => t.isPrefixOf(e.field)));\n    }\n    nt() {\n        // TODO(b/34871131): Remove null check once we have proper paths for fields\n        // within arrays.\n        if (this.path) for (let t = 0; t < this.path.length; t++) this.ut(this.path.get(t));\n    }\n    ut(t) {\n        if (0 === t.length) throw this.ht(\"Document fields must not be empty\");\n        if (Dn(this.rt) && Pn.test(t)) throw this.ht('Document fields cannot begin and end with \"__\"');\n    }\n}\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */ class xn {\n    constructor(t, e, n) {\n        this.databaseId = t, this.ignoreUndefinedProperties = e, this.C = n || Ze(t);\n    }\n    /** Creates a new top-level parse context. */    dt(t, e, n, r = !1) {\n        return new $n({\n            rt: t,\n            methodName: e,\n            ft: n,\n            path: tt.emptyPath(),\n            ot: !1,\n            lt: r\n        }, this.databaseId, this.C, this.ignoreUndefinedProperties);\n    }\n}\n\nfunction Fn(t) {\n    const e = t._freezeSettings(), n = Ze(t._databaseId);\n    return new xn(t._databaseId, !!e.ignoreUndefinedProperties, n);\n}\n\n/** Parse document data from a set() call. */ function Sn(t, e, n, r, s, i = {}) {\n    const o = t.dt(i.merge || i.mergeFields ? 2 /* MergeSet */ : 0 /* Set */ , e, n, s);\n    Kn(\"Data must be an object, but it was:\", o, r);\n    const u = Gn(r, o);\n    let c, a;\n    if (i.merge) c = new Vt(o.fieldMask), a = o.fieldTransforms; else if (i.mergeFields) {\n        const t = [];\n        for (const r of i.mergeFields) {\n            const s = Qn(e, r, n);\n            if (!o.contains(s)) throw new L(A, `Field '${s}' is specified in your field mask but missing from your input data.`);\n            Xn(t, s) || t.push(s);\n        }\n        c = new Vt(t), a = o.fieldTransforms.filter((t => c.covers(t.field)));\n    } else c = null, a = o.fieldTransforms;\n    return new Vn(new Yt(u), c, a);\n}\n\nclass qn extends An {\n    _toFieldTransform(t) {\n        if (2 /* MergeSet */ !== t.rt) throw 1 /* Update */ === t.rt ? t.ht(`${this._methodName}() can only appear at the top level of your update data`) : t.ht(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);\n        // No transform to add for a delete, but we need to add it to our\n        // fieldMask so it gets deleted.\n        return t.fieldMask.push(t.path), null;\n    }\n    isEqual(t) {\n        return t instanceof qn;\n    }\n}\n\n/**\n * Creates a child context for parsing SerializableFieldValues.\n *\n * This is different than calling `ParseContext.contextWith` because it keeps\n * the fieldTransforms and fieldMask separate.\n *\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\n * Although these values are used with writes, any elements in these FieldValues\n * are not considered writes since they cannot contain any FieldValue sentinels,\n * etc.\n *\n * @param fieldValue - The sentinel FieldValue for which to create a child\n *     context.\n * @param context - The parent context.\n * @param arrayElement - Whether or not the FieldValue has an array.\n */ function On(t, e, n) {\n    return new $n({\n        rt: 3 /* Argument */ ,\n        ft: e.settings.ft,\n        methodName: t._methodName,\n        ot: n\n    }, e.databaseId, e.C, e.ignoreUndefinedProperties);\n}\n\nclass kn extends An {\n    _toFieldTransform(t) {\n        return new Ae(t.path, new be);\n    }\n    isEqual(t) {\n        return t instanceof kn;\n    }\n}\n\nclass Cn extends An {\n    constructor(t, e) {\n        super(t), this.wt = e;\n    }\n    _toFieldTransform(t) {\n        const e = On(this, t, \n        /*array=*/ !0), n = this.wt.map((t => zn(t, e))), r = new Ee(n);\n        return new Ae(t.path, r);\n    }\n    isEqual(t) {\n        // TODO(mrschmidt): Implement isEquals\n        return this === t;\n    }\n}\n\nclass Ln extends An {\n    constructor(t, e) {\n        super(t), this.wt = e;\n    }\n    _toFieldTransform(t) {\n        const e = On(this, t, \n        /*array=*/ !0), n = this.wt.map((t => zn(t, e))), r = new Te(n);\n        return new Ae(t.path, r);\n    }\n    isEqual(t) {\n        // TODO(mrschmidt): Implement isEquals\n        return this === t;\n    }\n}\n\nclass Mn extends An {\n    constructor(t, e) {\n        super(t), this.yt = e;\n    }\n    _toFieldTransform(t) {\n        const e = new Ie(t.C, ge(t.C, this.yt));\n        return new Ae(t.path, e);\n    }\n    isEqual(t) {\n        // TODO(mrschmidt): Implement isEquals\n        return this === t;\n    }\n}\n\n/** Parse update data from an update() call. */ function Un(t, e, n, r) {\n    const s = t.dt(1 /* Update */ , e, n);\n    Kn(\"Data must be an object, but it was:\", s, r);\n    const i = [], o = Yt.empty();\n    Et(r, ((t, r) => {\n        const u = Hn(e, t, n);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                r = h(r);\n        const c = s.ct(u);\n        if (r instanceof qn) \n        // Add it to the field mask, but don't add anything to updateData.\n        i.push(u); else {\n            const t = zn(r, c);\n            null != t && (i.push(u), o.set(u, t));\n        }\n    }));\n    const u = new Vt(i);\n    return new Nn(o, u, s.fieldTransforms);\n}\n\n/** Parse update data from a list of field/value arguments. */ function jn(t, e, n, r, s, i) {\n    const o = t.dt(1 /* Update */ , e, n), u = [ Qn(e, r, n) ], c = [ s ];\n    if (i.length % 2 != 0) throw new L(A, `Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);\n    for (let t = 0; t < i.length; t += 2) u.push(Qn(e, i[t])), c.push(i[t + 1]);\n    const a = [], l = Yt.empty();\n    // We iterate in reverse order to pick the last value for a field if the\n    // user specified the field multiple times.\n    for (let t = u.length - 1; t >= 0; --t) if (!Xn(a, u[t])) {\n        const e = u[t];\n        let n = c[t];\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                n = h(n);\n        const r = o.ct(e);\n        if (n instanceof qn) \n        // Add it to the field mask, but don't add anything to updateData.\n        a.push(e); else {\n            const t = zn(n, r);\n            null != t && (a.push(e), l.set(e, t));\n        }\n    }\n    const f = new Vt(a);\n    return new Nn(l, f, o.fieldTransforms);\n}\n\n/**\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n * bound).\n *\n * @param allowArrays - Whether the query value is an array that may directly\n * contain additional arrays (e.g. the operand of an `in` query).\n */ function Bn(t, e, n, r = !1) {\n    return zn(n, t.dt(r ? 4 /* ArrayArgument */ : 3 /* Argument */ , e));\n}\n\n/**\n * Parses user data to Protobuf Values.\n *\n * @param input - Data to be parsed.\n * @param context - A context object representing the current path being parsed,\n * the source of the data being parsed, etc.\n * @returns The parsed value, or null if the value was a FieldValue sentinel\n * that should not be included in the resulting parsed data.\n */ function zn(t, e) {\n    if (Wn(\n    // Unwrap the API type from the Compat SDK. This will return the API type\n    // from firestore-exp.\n    t = h(t))) return Kn(\"Unsupported field value:\", e, t), Gn(t, e);\n    if (t instanceof An) \n    // FieldValues usually parse into transforms (except deleteField())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n    /**\n * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n * context.fieldTransforms.\n */\n    return function(t, e) {\n        // Sentinels are only supported with writes, and not within arrays.\n        if (!Dn(e.rt)) throw e.ht(`${t._methodName}() can only be used with update() and set()`);\n        if (!e.path) throw e.ht(`${t._methodName}() is not currently supported inside arrays`);\n        const n = t._toFieldTransform(e);\n        n && e.fieldTransforms.push(n);\n    }\n    /**\n * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n *\n * @returns The parsed value\n */ (t, e), null;\n    if (void 0 === t && e.ignoreUndefinedProperties) \n    // If the input is undefined it can never participate in the fieldMask, so\n    // don't handle this below. If `ignoreUndefinedProperties` is false,\n    // `parseScalarValue` will reject an undefined value.\n    return null;\n    if (\n    // If context.path is null we are inside an array and we don't support\n    // field mask paths more granular than the top-level array.\n    e.path && e.fieldMask.push(e.path), t instanceof Array) {\n        // TODO(b/34871131): Include the path containing the array in the error\n        // message.\n        // In the case of IN queries, the parsed data is an array (representing\n        // the set of values to be included for the IN query) that may directly\n        // contain additional arrays (each representing an individual field\n        // value), so we disable this validation.\n        if (e.settings.ot && 4 /* ArrayArgument */ !== e.rt) throw e.ht(\"Nested arrays are not supported\");\n        return function(t, e) {\n            const n = [];\n            let r = 0;\n            for (const s of t) {\n                let t = zn(s, e.at(r));\n                null == t && (\n                // Just include nulls in the array for fields being replaced with a\n                // sentinel.\n                t = {\n                    nullValue: \"NULL_VALUE\"\n                }), n.push(t), r++;\n            }\n            return {\n                arrayValue: {\n                    values: n\n                }\n            };\n        }(t, e);\n    }\n    return function(t, e) {\n        if (null === (t = h(t))) return {\n            nullValue: \"NULL_VALUE\"\n        };\n        if (\"number\" == typeof t) return ge(e.C, t);\n        if (\"boolean\" == typeof t) return {\n            booleanValue: t\n        };\n        if (\"string\" == typeof t) return {\n            stringValue: t\n        };\n        if (t instanceof Date) {\n            const n = gt.fromDate(t);\n            return {\n                timestampValue: qe(e.C, n)\n            };\n        }\n        if (t instanceof gt) {\n            // Firestore backend truncates precision down to microseconds. To ensure\n            // offline mode works the same with regards to truncation, perform the\n            // truncation immediately without waiting for the backend to do that.\n            const n = new gt(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));\n            return {\n                timestampValue: qe(e.C, n)\n            };\n        }\n        if (t instanceof Rn) return {\n            geoPointValue: {\n                latitude: t.latitude,\n                longitude: t.longitude\n            }\n        };\n        if (t instanceof In) return {\n            bytesValue: Oe(e.C, t._byteString)\n        };\n        if (t instanceof wn) {\n            const n = e.databaseId, r = t.firestore._databaseId;\n            if (!r.isEqual(n)) throw e.ht(`Document reference is for database ${r.projectId}/${r.database} but should be for database ${n.projectId}/${n.database}`);\n            return {\n                referenceValue: Le(t.firestore._databaseId || e.databaseId, t._key.path)\n            };\n        }\n        throw e.ht(`Unsupported field value: ${it(t)}`);\n    }\n    /**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */ (t, e);\n}\n\nfunction Gn(t, e) {\n    const n = {};\n    return !function(t) {\n        for (const e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;\n        return !0;\n    }(t) ? Et(t, ((t, r) => {\n        const s = zn(r, e.it(t));\n        null != s && (n[t] = s);\n    })) : \n    // If we encounter an empty object, we explicitly add it to the update\n    // mask to ensure that the server creates a map entry.\n    e.path && e.path.length > 0 && e.fieldMask.push(e.path), {\n        mapValue: {\n            fields: n\n        }\n    };\n}\n\nfunction Wn(t) {\n    return !(\"object\" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof gt || t instanceof Rn || t instanceof In || t instanceof wn || t instanceof An);\n}\n\nfunction Kn(t, e, n) {\n    if (!Wn(n) || !function(t) {\n        return \"object\" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));\n    }(n)) {\n        const r = it(n);\n        throw \"an object\" === r ? e.ht(t + \" a custom object\") : e.ht(t + \" \" + r);\n    }\n}\n\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */ function Qn(t, e, n) {\n    if ((\n    // If required, replace the FieldPath Compat class with with the firestore-exp\n    // FieldPath.\n    e = h(e)) instanceof En) return e._internalPath;\n    if (\"string\" == typeof e) return Hn(t, e);\n    throw Jn(\"Field path arguments must be of type string or \", t, \n    /* hasConverter= */ !1, \n    /* path= */ void 0, n);\n}\n\n/**\n * Matches any characters in a field path string that are reserved.\n */ const Yn = new RegExp(\"[~\\\\*/\\\\[\\\\]]\");\n\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName - The publicly visible method name\n * @param path - The dot-separated string form of a field path which will be\n * split on dots.\n * @param targetDoc - The document against which the field path will be\n * evaluated.\n */ function Hn(t, e, n) {\n    if (e.search(Yn) >= 0) throw Jn(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`, t, \n    /* hasConverter= */ !1, \n    /* path= */ void 0, n);\n    try {\n        return new En(...e.split(\".\"))._internalPath;\n    } catch (r) {\n        throw Jn(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t, \n        /* hasConverter= */ !1, \n        /* path= */ void 0, n);\n    }\n}\n\nfunction Jn(t, e, n, r, s) {\n    const i = r && !r.isEmpty(), o = void 0 !== s;\n    let u = `Function ${e}() called with invalid data`;\n    n && (u += \" (via `toFirestore()`)\"), u += \". \";\n    let c = \"\";\n    return (i || o) && (c += \" (found\", i && (c += ` in field ${r}`), o && (c += ` in document ${s}`), \n    c += \")\"), new L(A, u + t + c);\n}\n\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */ function Xn(t, e) {\n    return t.some((t => t.isEqual(e)));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `DocumentSnapshot` contains data read from a document in your Firestore\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\n * get a specific field.\n *\n * For a `DocumentSnapshot` that points to a non-existing document, any data\n * access will return 'undefined'. You can use the `exists()` method to\n * explicitly verify a document's existence.\n */ class Zn {\n    // Note: This class is stripped down version of the DocumentSnapshot in\n    // the legacy SDK. The changes are:\n    // - No support for SnapshotMetadata.\n    // - No support for SnapshotOptions.\n    /** @hideconstructor protected */\n    constructor(t, e, n, r, s) {\n        this._firestore = t, this._userDataWriter = e, this._key = n, this._document = r, \n        this._converter = s;\n    }\n    /** Property of the `DocumentSnapshot` that provides the document's ID. */    get id() {\n        return this._key.path.lastSegment();\n    }\n    /**\n     * The `DocumentReference` for the document included in the `DocumentSnapshot`.\n     */    get ref() {\n        return new wn(this._firestore, this._converter, this._key);\n    }\n    /**\n     * Signals whether or not the document at the snapshot's location exists.\n     *\n     * @returns true if the document exists.\n     */    exists() {\n        return null !== this._document;\n    }\n    /**\n     * Retrieves all fields in the document as an `Object`. Returns `undefined` if\n     * the document doesn't exist.\n     *\n     * @returns An `Object` containing all fields in the document or `undefined`\n     * if the document doesn't exist.\n     */    data() {\n        if (this._document) {\n            if (this._converter) {\n                // We only want to use the converter and create a new DocumentSnapshot\n                // if a converter has been provided.\n                const t = new tr(this._firestore, this._userDataWriter, this._key, this._document, \n                /* converter= */ null);\n                return this._converter.fromFirestore(t);\n            }\n            return this._userDataWriter.convertValue(this._document.data.value);\n        }\n    }\n    /**\n     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\n     * document or field doesn't exist.\n     *\n     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\n     * field.\n     * @returns The data at the specified field location or undefined if no such\n     * field exists in the document.\n     */\n    // We are using `any` here to avoid an explicit cast by our users.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    get(t) {\n        if (this._document) {\n            const e = this._document.data.field(rr(\"DocumentSnapshot.get\", t));\n            if (null !== e) return this._userDataWriter.convertValue(e);\n        }\n    }\n}\n\n/**\n * A `QueryDocumentSnapshot` contains data read from a document in your\n * Firestore database as part of a query. The document is guaranteed to exist\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\n * specific field.\n *\n * A `QueryDocumentSnapshot` offers the same API surface as a\n * `DocumentSnapshot`. Since query results contain only existing documents, the\n * `exists` property will always be true and `data()` will never return\n * 'undefined'.\n */ class tr extends Zn {\n    /**\n     * Retrieves all fields in the document as an `Object`.\n     *\n     * @override\n     * @returns An `Object` containing all fields in the document.\n     */\n    data() {\n        return super.data();\n    }\n}\n\n/**\n * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects\n * representing the results of a query. The documents can be accessed as an\n * array via the `docs` property or enumerated using the `forEach` method. The\n * number of documents can be determined via the `empty` and `size`\n * properties.\n */ class er {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._docs = e, this.query = t;\n    }\n    /** An array of all the documents in the `QuerySnapshot`. */    get docs() {\n        return [ ...this._docs ];\n    }\n    /** The number of documents in the `QuerySnapshot`. */    get size() {\n        return this.docs.length;\n    }\n    /** True if there are no documents in the `QuerySnapshot`. */    get empty() {\n        return 0 === this.docs.length;\n    }\n    /**\n     * Enumerates all of the documents in the `QuerySnapshot`.\n     *\n     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for\n     * each document in the snapshot.\n     * @param thisArg - The `this` binding for the callback.\n     */    forEach(t, e) {\n        this._docs.forEach(t, e);\n    }\n}\n\n/**\n * Returns true if the provided snapshots are equal.\n *\n * @param left - A snapshot to compare.\n * @param right - A snapshot to compare.\n * @returns true if the snapshots are equal.\n */ function nr(t, e) {\n    return t = h(t), e = h(e), t instanceof Zn && e instanceof Zn ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof er && e instanceof er && (bn(t.query, e.query) && _t(t.docs, e.docs, nr));\n}\n\n/**\n * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.\n */ function rr(t, e) {\n    return \"string\" == typeof e ? Hn(t, e) : e instanceof En ? e._internalPath : e._delegate._internalPath;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Firestore query. `QueryConstraint`s are created by invoking {@link where},\n * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link\n * endBefore:1}, {@link (endAt:1)}, {@link limit} or {@link limitToLast} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nclass sr {}\n\n/**\n * Creates a new immutable instance of {@link Query} that is extended to also include\n * additional query constraints.\n *\n * @param query - The {@link Query} instance to use as a base for the new constraints.\n * @param queryConstraints - The list of {@link QueryConstraint}s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */ function ir(t, ...e) {\n    for (const n of e) t = n._apply(t);\n    return t;\n}\n\nclass or extends sr {\n    constructor(t, e, n) {\n        super(), this._t = t, this.gt = e, this.vt = n, this.type = \"where\";\n    }\n    _apply(t) {\n        const e = Fn(t.firestore), n = function(t, e, n, r, s, i, o) {\n            let u;\n            if (s.isKeyField()) {\n                if (\"array-contains\" /* ARRAY_CONTAINS */ === i || \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ === i) throw new L(A, `Invalid Query. You can't perform '${i}' queries on documentId().`);\n                if (\"in\" /* IN */ === i || \"not-in\" /* NOT_IN */ === i) {\n                    br(o, i);\n                    const e = [];\n                    for (const n of o) e.push(vr(r, t, n));\n                    u = {\n                        arrayValue: {\n                            values: e\n                        }\n                    };\n                } else u = vr(r, t, o);\n            } else \"in\" /* IN */ !== i && \"not-in\" /* NOT_IN */ !== i && \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ !== i || br(o, i), \n            u = Bn(n, e, o, \n            /* allowArrays= */ \"in\" /* IN */ === i || \"not-in\" /* NOT_IN */ === i);\n            const c = Zt.create(s, i, u);\n            return function(t, e) {\n                if (e.S()) {\n                    const n = we(t);\n                    if (null !== n && !n.isEqual(e.field)) throw new L(A, `Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '${n.toString()}' and '${e.field.toString()}'`);\n                    const r = de(t);\n                    null !== r && Er(t, e.field, r);\n                }\n                const n = function(t, e) {\n                    for (const n of t.filters) if (e.indexOf(n.op) >= 0) return n.op;\n                    return null;\n                }(t, \n                /**\n * Given an operator, returns the set of operators that cannot be used with it.\n *\n * Operators in a query must adhere to the following set of rules:\n * 1. Only one array operator is allowed.\n * 2. Only one disjunctive operator is allowed.\n * 3. `NOT_EQUAL` cannot be used with another `NOT_EQUAL` operator.\n * 4. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.\n *\n * Array operators: `ARRAY_CONTAINS`, `ARRAY_CONTAINS_ANY`\n * Disjunctive operators: `IN`, `ARRAY_CONTAINS_ANY`, `NOT_IN`\n */\n                function(t) {\n                    switch (t) {\n                      case \"!=\" /* NOT_EQUAL */ :\n                        return [ \"!=\" /* NOT_EQUAL */ , \"not-in\" /* NOT_IN */ ];\n\n                      case \"array-contains\" /* ARRAY_CONTAINS */ :\n                        return [ \"array-contains\" /* ARRAY_CONTAINS */ , \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ , \"not-in\" /* NOT_IN */ ];\n\n                      case \"in\" /* IN */ :\n                        return [ \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ , \"in\" /* IN */ , \"not-in\" /* NOT_IN */ ];\n\n                      case \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ :\n                        return [ \"array-contains\" /* ARRAY_CONTAINS */ , \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ , \"in\" /* IN */ , \"not-in\" /* NOT_IN */ ];\n\n                      case \"not-in\" /* NOT_IN */ :\n                        return [ \"array-contains\" /* ARRAY_CONTAINS */ , \"array-contains-any\" /* ARRAY_CONTAINS_ANY */ , \"in\" /* IN */ , \"not-in\" /* NOT_IN */ , \"!=\" /* NOT_EQUAL */ ];\n\n                      default:\n                        return [];\n                    }\n                }(e.op));\n                if (null !== n) \n                // Special case when it's a duplicate op to give a slightly clearer error message.\n                throw n === e.op ? new L(A, `Invalid query. You cannot use more than one '${e.op.toString()}' filter.`) : new L(A, `Invalid query. You cannot use '${e.op.toString()}' filters with '${n.toString()}' filters.`);\n            }(t, c), c;\n        }(t._query, \"where\", e, t.firestore._databaseId, this._t, this.gt, this.vt);\n        return new mn(t.firestore, t.converter, function(t, e) {\n            const n = t.filters.concat([ e ]);\n            return new fe(t.path, t.collectionGroup, t.explicitOrderBy.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);\n        }(t._query, n));\n    }\n}\n\n/**\n * Creates a {@link QueryConstraint} that enforces that documents must contain the\n * specified field and that the value should satisfy the relation constraint\n * provided.\n *\n * @param fieldPath - The path to compare\n * @param opStr - The operation string (e.g \"&lt;\", \"&lt;=\", \"==\", \"&lt;\",\n *   \"&lt;=\", \"!=\").\n * @param value - The value for comparison\n * @returns The created {@link Query}.\n */ function ur(t, e, n) {\n    const r = e, s = rr(\"where\", t);\n    return new or(s, r, n);\n}\n\nclass cr extends sr {\n    constructor(t, e) {\n        super(), this._t = t, this.bt = e, this.type = \"orderBy\";\n    }\n    _apply(t) {\n        const e = function(t, e, n) {\n            if (null !== t.startAt) throw new L(A, \"Invalid query. You must not call startAt() or startAfter() before calling orderBy().\");\n            if (null !== t.endAt) throw new L(A, \"Invalid query. You must not call endAt() or endBefore() before calling orderBy().\");\n            const r = new ae(e, n);\n            return function(t, e) {\n                if (null === de(t)) {\n                    // This is the first order by. It must match any inequality.\n                    const n = we(t);\n                    null !== n && Er(t, n, e.field);\n                }\n            }(t, r), r;\n        }\n        /**\n * Create a `Bound` from a query and a document.\n *\n * Note that the `Bound` will always include the key of the document\n * and so only the provided document will compare equal to the returned\n * position.\n *\n * Will throw if the document does not contain all fields of the order by\n * of the query or if any of the fields in the order by are an uncommitted\n * server timestamp.\n */ (t._query, this._t, this.bt);\n        return new mn(t.firestore, t.converter, function(t, e) {\n            // TODO(dimond): validate that orderBy does not list the same key twice.\n            const n = t.explicitOrderBy.concat([ e ]);\n            return new fe(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);\n        }(t._query, e));\n    }\n}\n\n/**\n * Creates a {@link QueryConstraint} that sorts the query result by the\n * specified field, optionally in descending order instead of ascending.\n *\n * @param fieldPath - The field to sort by.\n * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If\n * not specified, order will be ascending.\n * @returns The created {@link Query}.\n */ function ar(t, e = \"asc\") {\n    const n = e, r = rr(\"orderBy\", t);\n    return new cr(r, n);\n}\n\nclass hr extends sr {\n    constructor(t, e, n) {\n        super(), this.type = t, this.Et = e, this.Tt = n;\n    }\n    _apply(t) {\n        return new mn(t.firestore, t.converter, function(t, e, n) {\n            return new fe(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);\n        }(t._query, this.Et, this.Tt));\n    }\n}\n\n/**\n * Creates a {@link QueryConstraint} that only returns the first matching documents.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link Query}.\n */ function lr(t) {\n    return ut(\"limit\", t), new hr(\"limit\", t, \"F\" /* First */);\n}\n\n/**\n * Creates a {@link QueryConstraint} that only returns the last matching documents.\n *\n * You must specify at least one `orderBy` clause for `limitToLast` queries,\n * otherwise an exception will be thrown during execution.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link Query}.\n */ function fr(t) {\n    return ut(\"limitToLast\", t), new hr(\"limitToLast\", t, \"L\" /* Last */);\n}\n\nclass dr extends sr {\n    constructor(t, e, n) {\n        super(), this.type = t, this.It = e, this.At = n;\n    }\n    _apply(t) {\n        const e = gr(t, this.type, this.It, this.At);\n        return new mn(t.firestore, t.converter, function(t, e) {\n            return new fe(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);\n        }(t._query, e));\n    }\n}\n\nfunction wr(...t) {\n    return new dr(\"startAt\", t, \n    /*inclusive=*/ !0);\n}\n\nfunction mr(...t) {\n    return new dr(\"startAfter\", t, \n    /*inclusive=*/ !1);\n}\n\nclass pr extends sr {\n    constructor(t, e, n) {\n        super(), this.type = t, this.It = e, this.At = n;\n    }\n    _apply(t) {\n        const e = gr(t, this.type, this.It, this.At);\n        return new mn(t.firestore, t.converter, function(t, e) {\n            return new fe(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);\n        }(t._query, e));\n    }\n}\n\nfunction yr(...t) {\n    return new pr(\"endBefore\", t, \n    /*inclusive=*/ !1);\n}\n\nfunction _r(...t) {\n    return new pr(\"endAt\", t, /*inclusive=*/ !0);\n}\n\n/** Helper function to create a bound from a document or fields */ function gr(t, e, n, r) {\n    if (n[0] = h(n[0]), n[0] instanceof Zn) return function(t, e, n, r, s) {\n        if (!r) throw new L(P, `Can't use a DocumentSnapshot that doesn't exist for ${n}().`);\n        const i = [];\n        // Because people expect to continue/end a query at the exact document\n        // provided, we need to use the implicit sort order rather than the explicit\n        // sort order, because it's guaranteed to contain the document key. That way\n        // the position becomes unambiguous and the query continues/ends exactly at\n        // the provided document. Without the key (by using the explicit sort\n        // orders), multiple documents could match the position, yielding duplicate\n        // results.\n                for (const n of pe(t)) if (n.field.isKeyField()) i.push(Bt(e, r.key)); else {\n            const t = r.data.field(n.field);\n            if (St(t)) throw new L(A, 'Invalid query. You are trying to start or end a query using a document for which the field \"' + n.field + '\" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');\n            if (null === t) {\n                const t = n.field.canonicalString();\n                throw new L(A, `Invalid query. You are trying to start or end a query using a document for which the field '${t}' (used as the orderBy) does not exist.`);\n            }\n            i.push(t);\n        }\n        return new ce(i, s);\n    }\n    /**\n * Converts a list of field values to a `Bound` for the given query.\n */ (t._query, t.firestore._databaseId, e, n[0]._document, r);\n    {\n        const s = Fn(t.firestore);\n        return function(t, e, n, r, s, i) {\n            // Use explicit order by's because it has to match the query the user made\n            const o = t.explicitOrderBy;\n            if (s.length > o.length) throw new L(A, `Too many arguments provided to ${r}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);\n            const u = [];\n            for (let i = 0; i < s.length; i++) {\n                const c = s[i];\n                if (o[i].field.isKeyField()) {\n                    if (\"string\" != typeof c) throw new L(A, `Invalid query. Expected a string for document ID in ${r}(), but got a ${typeof c}`);\n                    if (!me(t) && -1 !== c.indexOf(\"/\")) throw new L(A, `Invalid query. When querying a collection and ordering by documentId(), the value passed to ${r}() must be a plain document ID, but '${c}' contains a slash.`);\n                    const n = t.path.child(X.fromString(c));\n                    if (!et.isDocumentKey(n)) throw new L(A, `Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${r}() must result in a valid document path, but '${n}' is not because it contains an odd number of segments.`);\n                    const s = new et(n);\n                    u.push(Bt(e, s));\n                } else {\n                    const t = Bn(n, r, c);\n                    u.push(t);\n                }\n            }\n            return new ce(u, i);\n        }\n        /**\n * Parses the given `documentIdValue` into a `ReferenceValue`, throwing\n * appropriate errors if the value is anything other than a `DocumentReference`\n * or `string`, or if the string is malformed.\n */ (t._query, t.firestore._databaseId, s, e, n, r);\n    }\n}\n\nfunction vr(t, e, n) {\n    if (\"string\" == typeof (n = h(n))) {\n        if (\"\" === n) throw new L(A, \"Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.\");\n        if (!me(e) && -1 !== n.indexOf(\"/\")) throw new L(A, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${n}' contains a '/' character.`);\n        const r = e.path.child(X.fromString(n));\n        if (!et.isDocumentKey(r)) throw new L(A, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${r}' is not because it has an odd number of segments (${r.length}).`);\n        return Bt(t, new et(r));\n    }\n    if (n instanceof wn) return Bt(t, n._key);\n    throw new L(A, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${it(n)}.`);\n}\n\n/**\n * Validates that the value passed into a disjunctive filter satisfies all\n * array requirements.\n */ function br(t, e) {\n    if (!Array.isArray(t) || 0 === t.length) throw new L(A, `Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);\n    if (t.length > 10) throw new L(A, `Invalid Query. '${e.toString()}' filters support a maximum of 10 elements in the value array.`);\n}\n\nfunction Er(t, e, n) {\n    if (!n.isEqual(e)) throw new L(A, `Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '${e.toString()}' and so you must also use '${e.toString()}' as your first argument to orderBy(), but your first orderBy() is on field '${n.toString()}' instead.`);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Converts Firestore's internal types to the JavaScript types that we expose\n * to the user.\n *\n * @internal\n */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Converts custom model object of type T into `DocumentData` by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to `DocumentData`\n * because we want to provide the user with a more specific error message if\n * their `set()` or fails due to invalid data originating from a `toFirestore()`\n * call.\n */\nfunction Tr(t, e, n) {\n    let r;\n    // Cast to `any` in order to satisfy the union type constraint on\n    // toFirestore().\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return r = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, \n    r;\n}\n\nclass Ir extends class {\n    convertValue(t, e = \"none\") {\n        switch (Ct(t)) {\n          case 0 /* NullValue */ :\n            return null;\n\n          case 1 /* BooleanValue */ :\n            return t.booleanValue;\n\n          case 2 /* NumberValue */ :\n            return xt(t.integerValue || t.doubleValue);\n\n          case 3 /* TimestampValue */ :\n            return this.convertTimestamp(t.timestampValue);\n\n          case 4 /* ServerTimestampValue */ :\n            return this.convertServerTimestamp(t, e);\n\n          case 5 /* StringValue */ :\n            return t.stringValue;\n\n          case 6 /* BlobValue */ :\n            return this.convertBytes(Ft(t.bytesValue));\n\n          case 7 /* RefValue */ :\n            return this.convertReference(t.referenceValue);\n\n          case 8 /* GeoPointValue */ :\n            return this.convertGeoPoint(t.geoPointValue);\n\n          case 9 /* ArrayValue */ :\n            return this.convertArray(t.arrayValue, e);\n\n          case 10 /* ObjectValue */ :\n            return this.convertObject(t.mapValue, e);\n\n          default:\n            throw g();\n        }\n    }\n    convertObject(t, e) {\n        const n = {};\n        return Et(t.fields, ((t, r) => {\n            n[t] = this.convertValue(r, e);\n        })), n;\n    }\n    convertGeoPoint(t) {\n        return new Rn(xt(t.latitude), xt(t.longitude));\n    }\n    convertArray(t, e) {\n        return (t.values || []).map((t => this.convertValue(t, e)));\n    }\n    convertServerTimestamp(t, e) {\n        switch (e) {\n          case \"previous\":\n            const n = qt(t);\n            return null == n ? null : this.convertValue(n, e);\n\n          case \"estimate\":\n            return this.convertTimestamp(Ot(t));\n\n          default:\n            return null;\n        }\n    }\n    convertTimestamp(t) {\n        const e = $t(t);\n        return new gt(e.seconds, e.nanos);\n    }\n    convertDocumentKey(t, e) {\n        const n = X.fromString(t);\n        v(Xe(n));\n        const r = new H(n.get(1), n.get(3)), s = new et(n.popFirst(5));\n        return r.isEqual(e) || \n        // TODO(b/64130202): Somehow support foreign references.\n        p(`Document ${s} contains a document reference within a different database (${r.projectId}/${r.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`), \n        s;\n    }\n} {\n    constructor(t) {\n        super(), this.firestore = t;\n    }\n    convertBytes(t) {\n        return new In(t);\n    }\n    convertReference(t) {\n        const e = this.convertDocumentKey(t, this.firestore._databaseId);\n        return new wn(this.firestore, /* converter= */ null, e);\n    }\n}\n\n/**\n * Reads the document referred to by the specified document reference.\n *\n * All documents are directly fetched from the server, even if the document was\n * previously read or modified. Recent modifications are only reflected in the\n * retrieved `DocumentSnapshot` if they have already been applied by the\n * backend. If the client is offline, the read fails. If you like to use\n * caching or see local modifications, please use the full Firestore SDK.\n *\n * @param reference - The reference of the document to fetch.\n * @returns A Promise resolved with a `DocumentSnapshot` containing the current\n * document contents.\n */ function Ar(t) {\n    const e = un((t = ot(t, wn)).firestore), n = new Ir(t.firestore);\n    return rn(e, [ t._key ]).then((e => {\n        v(1 === e.length);\n        const r = e[0];\n        return new Zn(t.firestore, n, t._key, r.isFoundDocument() ? r : null, t.converter);\n    }));\n}\n\n/**\n * Executes the query and returns the results as a {@link QuerySnapshot}.\n *\n * All queries are executed directly by the server, even if the the query was\n * previously executed. Recent modifications are only reflected in the retrieved\n * results if they have already been applied by the backend. If the client is\n * offline, the operation fails. To see previously cached result and local\n * modifications, use the full Firestore SDK.\n *\n * @param query - The `Query` to execute.\n * @returns A Promise that will be resolved with the results of the query.\n */ function Rr(t) {\n    !function(t) {\n        if (\"L\" /* Last */ === t.limitType && 0 === t.explicitOrderBy.length) throw new L(q, \"limitToLast() queries require specifying at least one orderBy() clause\");\n    }((t = ot(t, mn))._query);\n    const e = un(t.firestore), n = new Ir(t.firestore);\n    return sn(e, t._query).then((e => {\n        const r = e.map((e => new tr(t.firestore, n, e.key, e, t.converter)));\n        return \"L\" /* Last */ === t._query.limitType && \n        // Limit to last queries reverse the orderBy constraint that was\n        // specified by the user. As such, we need to reverse the order of the\n        // results to return the documents in the expected order.\n        r.reverse(), new er(t, r);\n    }));\n}\n\nfunction Pr(t, e, n) {\n    const r = Tr((t = ot(t, wn)).converter, e, n), s = Sn(Fn(t.firestore), \"setDoc\", t._key, r, null !== t.converter, n);\n    return nn(un(t.firestore), [ s.toMutation(t._key, Re.none()) ]);\n}\n\nfunction Vr(t, e, n, ...r) {\n    const s = Fn((t = ot(t, wn)).firestore);\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n        let i;\n    i = \"string\" == typeof (e = h(e)) || e instanceof En ? jn(s, \"updateDoc\", t._key, e, n, r) : Un(s, \"updateDoc\", t._key, e);\n    return nn(un(t.firestore), [ i.toMutation(t._key, Re.exists(!0)) ]);\n}\n\n/**\n * Deletes the document referred to by the specified `DocumentReference`.\n *\n * The deletion will only be reflected in document reads that occur after the\n * returned promise resolves. If the client is offline, the\n * delete fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the document to delete.\n * @returns A `Promise` resolved once the document has been successfully\n * deleted from the backend.\n */ function Nr(t) {\n    return nn(un((t = ot(t, wn)).firestore), [ new De(t._key, Re.none()) ]);\n}\n\n/**\n * Add a new document to specified `CollectionReference` with the given data,\n * assigning it a document ID automatically.\n *\n * The result of this write will only be reflected in document reads that occur\n * after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the collection to add this document to.\n * @param data - An Object containing the data for the new document.\n * @throws Error - If the provided input is not a valid Firestore document.\n * @returns A `Promise` resolved with a `DocumentReference` pointing to the\n * newly created document after it has been written to the backend.\n */ function Dr(t, e) {\n    const n = gn(t = ot(t, pn)), r = Tr(t.converter, e), s = Sn(Fn(t.firestore), \"addDoc\", n._key, r, null !== n.converter, {});\n    return nn(un(t.firestore), [ s.toMutation(n._key, Re.exists(!1)) ]).then((() => n));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or\n * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.\n */ function $r() {\n    return new qn(\"deleteField\");\n}\n\n/**\n * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to\n * include a server-generated timestamp in the written data.\n */ function xr() {\n    return new kn(\"serverTimestamp\");\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array\n * value that already exists on the server. Each specified element that doesn't\n * already exist in the array will be added to the end. If the field being\n * modified is not already an array it will be overwritten with an array\n * containing exactly the specified elements.\n *\n * @param elements - The elements to union into the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`.\n */ function Fr(...t) {\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new Cn(\"arrayUnion\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link (setDoc:1)} or {@link\n * updateDoc:1} that tells the server to remove the given elements from any\n * array value that already exists on the server. All instances of each element\n * specified will be removed from the array. If the field being modified is not\n * already an array it will be overwritten with an empty array.\n *\n * @param elements - The elements to remove from the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */ function Sr(...t) {\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new Ln(\"arrayRemove\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by\n * the given value.\n *\n * If either the operand or the current field value uses floating point\n * precision, all arithmetic follows IEEE 754 semantics. If both values are\n * integers, values outside of JavaScript's safe number range\n * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to\n * precision loss. Furthermore, once processed by the Firestore backend, all\n * integer operations are capped between -2^63 and 2^63-1.\n *\n * If the current field value is not of type `number`, or if the field does not\n * yet exist, the transformation sets the field to the given value.\n *\n * @param n - The value to increment by.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */ function qr(t) {\n    return new Mn(\"increment\", t);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A write batch, used to perform multiple writes as a single atomic unit.\n *\n * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It\n * provides methods for adding writes to the write batch. None of the writes\n * will be committed (or visible locally) until {@link WriteBatch.commit} is\n * called.\n */ class Or {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = !1, \n        this._dataReader = Fn(t);\n    }\n    set(t, e, n) {\n        this._verifyNotCommitted();\n        const r = kr(t, this._firestore), s = Tr(r.converter, e, n), i = Sn(this._dataReader, \"WriteBatch.set\", r._key, s, null !== r.converter, n);\n        return this._mutations.push(i.toMutation(r._key, Re.none())), this;\n    }\n    update(t, e, n, ...r) {\n        this._verifyNotCommitted();\n        const s = kr(t, this._firestore);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                let i;\n        return i = \"string\" == typeof (e = h(e)) || e instanceof En ? jn(this._dataReader, \"WriteBatch.update\", s._key, e, n, r) : Un(this._dataReader, \"WriteBatch.update\", s._key, e), \n        this._mutations.push(i.toMutation(s._key, Re.exists(!0))), this;\n    }\n    /**\n     * Deletes the document referred to by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be deleted.\n     * @returns This `WriteBatch` instance. Used for chaining method calls.\n     */    delete(t) {\n        this._verifyNotCommitted();\n        const e = kr(t, this._firestore);\n        return this._mutations = this._mutations.concat(new De(e._key, Re.none())), this;\n    }\n    /**\n     * Commits all of the writes in this write batch as a single atomic unit.\n     *\n     * The result of these writes will only be reflected in document reads that\n     * occur after the returned promise resolves. If the client is offline, the\n     * write fails. If you would like to see local modifications or buffer writes\n     * until the client is online, use the full Firestore SDK.\n     *\n     * @returns A `Promise` resolved once all of the writes in the batch have been\n     * successfully written to the backend as an atomic unit (note that it won't\n     * resolve while you're offline).\n     */    commit() {\n        return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();\n    }\n    _verifyNotCommitted() {\n        if (this._committed) throw new L(x, \"A write batch can no longer be used after commit() has been called.\");\n    }\n}\n\nfunction kr(t, e) {\n    if ((t = h(t)).firestore !== e) throw new L(A, \"Provided document reference is from a different Firestore instance.\");\n    return t;\n}\n\n/**\n * Creates a write batch, used for performing multiple writes as a single\n * atomic operation. The maximum number of writes allowed in a single WriteBatch\n * is 500.\n *\n * The result of these writes will only be reflected in document reads that\n * occur after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @returns A `WriteBatch` that can be used to atomically execute multiple\n * writes.\n */ function Cr(t) {\n    const e = un(t = ot(t, an));\n    return new Or(t, (t => nn(e, t)));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */ class Lr {\n    constructor(t) {\n        this.datastore = t, \n        // The version of each document that was read during this transaction.\n        this.readVersions = new Map, this.mutations = [], this.committed = !1, \n        /**\n         * A deferred usage error that occurred previously in this transaction that\n         * will cause the transaction to fail once it actually commits.\n         */\n        this.lastWriteError = null, \n        /**\n         * Set of documents that have been written in the transaction.\n         *\n         * When there's more than one write to the same key in a transaction, any\n         * writes after the first are handled differently.\n         */\n        this.writtenDocs = new Set;\n    }\n    async lookup(t) {\n        if (this.ensureCommitNotCalled(), this.mutations.length > 0) throw new L(A, \"Firestore transactions require all reads to be executed before all writes.\");\n        const e = await rn(this.datastore, t);\n        return e.forEach((t => this.recordVersion(t))), e;\n    }\n    set(t, e) {\n        this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n    }\n    update(t, e) {\n        try {\n            this.write(e.toMutation(t, this.preconditionForUpdate(t)));\n        } catch (t) {\n            this.lastWriteError = t;\n        }\n        this.writtenDocs.add(t.toString());\n    }\n    delete(t) {\n        this.write(new De(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n    }\n    async commit() {\n        if (this.ensureCommitNotCalled(), this.lastWriteError) throw this.lastWriteError;\n        const t = this.readVersions;\n        // For each mutation, note that the doc was written.\n                this.mutations.forEach((e => {\n            t.delete(e.key.toString());\n        })), \n        // For each document that was read but not written to, we want to perform\n        // a `verify` operation.\n        t.forEach(((t, e) => {\n            const n = et.fromPath(e);\n            this.mutations.push(new $e(n, this.precondition(n)));\n        })), await nn(this.datastore, this.mutations), this.committed = !0;\n    }\n    recordVersion(t) {\n        let e;\n        if (t.isFoundDocument()) e = t.version; else {\n            if (!t.isNoDocument()) throw g();\n            // Represent a deleted doc using SnapshotVersion.min().\n            e = vt.min();\n        }\n        const n = this.readVersions.get(t.key.toString());\n        if (n) {\n            if (!e.isEqual(n)) \n            // This transaction will fail no matter what.\n            throw new L(F, \"Document version changed between two reads.\");\n        } else this.readVersions.set(t.key.toString(), e);\n    }\n    /**\n     * Returns the version of this document when it was read in this transaction,\n     * as a precondition, or no precondition if it was not read.\n     */    precondition(t) {\n        const e = this.readVersions.get(t.toString());\n        return !this.writtenDocs.has(t.toString()) && e ? e.isEqual(vt.min()) ? Re.exists(!1) : Re.updateTime(e) : Re.none();\n    }\n    /**\n     * Returns the precondition for a document if the operation is an update.\n     */    preconditionForUpdate(t) {\n        const e = this.readVersions.get(t.toString());\n        // The first time a document is written, we want to take into account the\n        // read time and existence\n                if (!this.writtenDocs.has(t.toString()) && e) {\n            if (e.isEqual(vt.min())) \n            // The document doesn't exist, so fail the transaction.\n            // This has to be validated locally because you can't send a\n            // precondition that a document does not exist without changing the\n            // semantics of the backend write to be an insert. This is the reverse\n            // of what we want, since we want to assert that the document doesn't\n            // exist but then send the update and have it fail. Since we can't\n            // express that to the backend, we have to validate locally.\n            // Note: this can change once we can send separate verify writes in the\n            // transaction.\n            throw new L(A, \"Can't update a document that doesn't exist.\");\n            // Document exists, base precondition on document update time.\n                        return Re.updateTime(e);\n        }\n        // Document was not read, so we just use the preconditions for a blind\n        // update.\n        return Re.exists(!0);\n    }\n    write(t) {\n        this.ensureCommitNotCalled(), this.mutations.push(t);\n    }\n    ensureCommitNotCalled() {}\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const Mr = {\n    maxAttempts: 5\n};\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\nclass Ur {\n    constructor(t, e, n, r, s) {\n        this.asyncQueue = t, this.datastore = e, this.options = n, this.updateFunction = r, \n        this.deferred = s, this.Rt = n.maxAttempts, this.Pt = new tn(this.asyncQueue, \"transaction_retry\" /* TransactionRetry */);\n    }\n    /** Runs the transaction and sets the result on deferred. */    run() {\n        this.Rt -= 1, this.Vt();\n    }\n    Vt() {\n        this.Pt.H((async () => {\n            const t = new Lr(this.datastore), e = this.Nt(t);\n            e && e.then((e => {\n                this.asyncQueue.enqueueAndForget((() => t.commit().then((() => {\n                    this.deferred.resolve(e);\n                })).catch((t => {\n                    this.Dt(t);\n                }))));\n            })).catch((t => {\n                this.Dt(t);\n            }));\n        }));\n    }\n    Nt(t) {\n        try {\n            const e = this.updateFunction(t);\n            return !ct(e) && e.catch && e.then ? e : (this.deferred.reject(Error(\"Transaction callback must return a Promise\")), \n            null);\n        } catch (t) {\n            // Do not retry errors thrown by user provided updateFunction.\n            return this.deferred.reject(t), null;\n        }\n    }\n    Dt(t) {\n        this.Rt > 0 && this.$t(t) ? (this.Rt -= 1, this.asyncQueue.enqueueAndForget((() => (this.Vt(), \n        Promise.resolve())))) : this.deferred.reject(t);\n    }\n    $t(t) {\n        if (\"FirebaseError\" === t.name) {\n            // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n            // non-matching document versions with ABORTED. These errors should be retried.\n            const e = t.code;\n            return \"aborted\" === e || \"failed-precondition\" === e || !\n            /**\n * Determines whether an error code represents a permanent error when received\n * in response to a non-write operation.\n *\n * See isPermanentWriteError for classifying write errors.\n */\n            function(t) {\n                switch (t) {\n                  default:\n                    return g();\n\n                  case T:\n                  case I:\n                  case R:\n                  case $:\n                  case O:\n                  case k:\n // Unauthenticated means something went wrong with our token and we need\n                    // to retry with new credentials which will happen automatically.\n                                      case D:\n                    return !1;\n\n                  case A:\n                  case P:\n                  case V:\n                  case N:\n                  case x:\n // Aborted might be retried in some scenarios, but that is dependant on\n                    // the context and should handled individually by the calling code.\n                    // See https://cloud.google.com/apis/design/errors.\n                                      case F:\n                  case S:\n                  case q:\n                  case C:\n                    return !0;\n                }\n            }(e);\n        }\n        return !1;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The Platform's 'document' implementation or null if not available. */ function jr() {\n    // `document` is not always available, e.g. in ReactNative and WebWorkers.\n    // eslint-disable-next-line no-restricted-globals\n    return \"undefined\" != typeof document ? document : null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n *\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\n * in newer versions of TypeScript defines `finally`, which is not available in\n * IE.\n */ class Br {\n    constructor(t, e, n, r, s) {\n        this.asyncQueue = t, this.timerId = e, this.targetTimeMs = n, this.op = r, this.removalCallback = s, \n        this.deferred = new M, this.then = this.deferred.promise.then.bind(this.deferred.promise), \n        // It's normal for the deferred promise to be canceled (due to cancellation)\n        // and so we attach a dummy catch callback to avoid\n        // 'UnhandledPromiseRejectionWarning' log spam.\n        this.deferred.promise.catch((t => {}));\n    }\n    /**\n     * Creates and returns a DelayedOperation that has been scheduled to be\n     * executed on the provided asyncQueue after the provided delayMs.\n     *\n     * @param asyncQueue - The queue to schedule the operation on.\n     * @param id - A Timer ID identifying the type of operation this is.\n     * @param delayMs - The delay (ms) before the operation should be scheduled.\n     * @param op - The operation to run.\n     * @param removalCallback - A callback to be called synchronously once the\n     *   operation is executed or canceled, notifying the AsyncQueue to remove it\n     *   from its delayedOperations list.\n     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n     *   the DelayedOperation class public.\n     */    static createAndSchedule(t, e, n, r, s) {\n        const i = Date.now() + n, o = new Br(t, e, i, r, s);\n        return o.start(n), o;\n    }\n    /**\n     * Starts the timer. This is called immediately after construction by\n     * createAndSchedule().\n     */    start(t) {\n        this.timerHandle = setTimeout((() => this.handleDelayElapsed()), t);\n    }\n    /**\n     * Queues the operation to run immediately (if it hasn't already been run or\n     * canceled).\n     */    skipDelay() {\n        return this.handleDelayElapsed();\n    }\n    /**\n     * Cancels the operation if it hasn't already been executed or canceled. The\n     * promise will be rejected.\n     *\n     * As long as the operation has not yet been run, calling cancel() provides a\n     * guarantee that the operation will not be run.\n     */    cancel(t) {\n        null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new L(T, \"Operation cancelled\" + (t ? \": \" + t : \"\"))));\n    }\n    handleDelayElapsed() {\n        this.asyncQueue.enqueueAndForget((() => null !== this.timerHandle ? (this.clearTimeout(), \n        this.op().then((t => this.deferred.resolve(t)))) : Promise.resolve()));\n    }\n    clearTimeout() {\n        null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), \n        this.timerHandle = null);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class zr {\n    constructor() {\n        // The last promise in the queue.\n        this.xt = Promise.resolve(), \n        // A list of retryable operations. Retryable operations are run in order and\n        // retried with backoff.\n        this.Ft = [], \n        // Is this AsyncQueue being shut down? Once it is set to true, it will not\n        // be changed again.\n        this.St = !1, \n        // Operations scheduled to be queued in the future. Operations are\n        // automatically removed after they are run or canceled.\n        this.qt = [], \n        // visible for testing\n        this.Ot = null, \n        // Flag set while there's an outstanding AsyncQueue operation, used for\n        // assertion sanity-checks.\n        this.kt = !1, \n        // Enabled during shutdown on Safari to prevent future access to IndexedDB.\n        this.Ct = !1, \n        // List of TimerIds to fast-forward delays for.\n        this.Lt = [], \n        // Backoff timer used to schedule retries for retryable operations\n        this.Pt = new tn(this, \"async_queue_retry\" /* AsyncQueueRetry */), \n        // Visibility handler that triggers an immediate retry of all retryable\n        // operations. Meant to speed up recovery when we regain file system access\n        // after page comes into foreground.\n        this.Mt = () => {\n            const t = jr();\n            t && m(\"AsyncQueue\", \"Visibility state changed to \" + t.visibilityState), this.Pt.X();\n        };\n        const t = jr();\n        t && \"function\" == typeof t.addEventListener && t.addEventListener(\"visibilitychange\", this.Mt);\n    }\n    get isShuttingDown() {\n        return this.St;\n    }\n    /**\n     * Adds a new operation to the queue without waiting for it to complete (i.e.\n     * we ignore the Promise result).\n     */    enqueueAndForget(t) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.enqueue(t);\n    }\n    enqueueAndForgetEvenWhileRestricted(t) {\n        this.Ut(), \n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.jt(t);\n    }\n    enterRestrictedMode(t) {\n        if (!this.St) {\n            this.St = !0, this.Ct = t || !1;\n            const e = jr();\n            e && \"function\" == typeof e.removeEventListener && e.removeEventListener(\"visibilitychange\", this.Mt);\n        }\n    }\n    enqueue(t) {\n        if (this.Ut(), this.St) \n        // Return a Promise which never resolves.\n        return new Promise((() => {}));\n        // Create a deferred Promise that we can return to the callee. This\n        // allows us to return a \"hanging Promise\" only to the callee and still\n        // advance the queue even when the operation is not run.\n                const e = new M;\n        return this.jt((() => this.St && this.Ct ? Promise.resolve() : (t().then(e.resolve, e.reject), \n        e.promise))).then((() => e.promise));\n    }\n    enqueueRetryable(t) {\n        this.enqueueAndForget((() => (this.Ft.push(t), this.Bt())));\n    }\n    /**\n     * Runs the next operation from the retryable queue. If the operation fails,\n     * reschedules with backoff.\n     */    async Bt() {\n        if (0 !== this.Ft.length) {\n            try {\n                await this.Ft[0](), this.Ft.shift(), this.Pt.reset();\n            } catch (t) {\n                if (!\n                /**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n                /** Verifies whether `e` is an IndexedDbTransactionError. */\n                function(t) {\n                    // Use name equality, as instanceof checks on errors don't work with errors\n                    // that wrap other errors.\n                    return \"IndexedDbTransactionError\" === t.name;\n                }\n                /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (t)) throw t;\n // Failure will be handled by AsyncQueue\n                                m(\"AsyncQueue\", \"Operation failed with retryable error: \" + t);\n            }\n            this.Ft.length > 0 && \n            // If there are additional operations, we re-schedule `retryNextOp()`.\n            // This is necessary to run retryable operations that failed during\n            // their initial attempt since we don't know whether they are already\n            // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\n            // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\n            // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\n            // call scheduled here.\n            // Since `backoffAndRun()` cancels an existing backoff and schedules a\n            // new backoff on every call, there is only ever a single additional\n            // operation in the queue.\n            this.Pt.H((() => this.Bt()));\n        }\n    }\n    jt(t) {\n        const e = this.xt.then((() => (this.kt = !0, t().catch((t => {\n            this.Ot = t, this.kt = !1;\n            const e = \n            /**\n * Chrome includes Error.message in Error.stack. Other browsers do not.\n * This returns expected output of message + stack when available.\n * @param error - Error or FirestoreError\n */\n            function(t) {\n                let e = t.message || \"\";\n                t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + \"\\n\" + t.stack);\n                return e;\n            }\n            /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n            // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the\n            // legacy SDK.\n            /**\n * A reference to a transaction.\n *\n * The `Transaction` object passed to a transaction's `updateFunction` provides\n * the methods to read and write data within the transaction context. See\n * {@link runTransaction}.\n */ (t);\n            // Re-throw the error so that this.tail becomes a rejected Promise and\n            // all further attempts to chain (via .then) will just short-circuit\n            // and return the rejected Promise.\n            throw p(\"INTERNAL UNHANDLED ERROR: \", e), t;\n        })).then((t => (this.kt = !1, t))))));\n        return this.xt = e, e;\n    }\n    enqueueAfterDelay(t, e, n) {\n        this.Ut(), \n        // Fast-forward delays for timerIds that have been overriden.\n        this.Lt.indexOf(t) > -1 && (e = 0);\n        const r = Br.createAndSchedule(this, t, e, n, (t => this.zt(t)));\n        return this.qt.push(r), r;\n    }\n    Ut() {\n        this.Ot && g();\n    }\n    verifyOperationInProgress() {}\n    /**\n     * Waits until all currently queued tasks are finished executing. Delayed\n     * operations are not run.\n     */    async Gt() {\n        // Operations in the queue prior to draining may have enqueued additional\n        // operations. Keep draining the queue until the tail is no longer advanced,\n        // which indicates that no more new operations were enqueued and that all\n        // operations were executed.\n        let t;\n        do {\n            t = this.xt, await t;\n        } while (t !== this.xt);\n    }\n    /**\n     * For Tests: Determine if a delayed operation with a particular TimerId\n     * exists.\n     */    Wt(t) {\n        for (const e of this.qt) if (e.timerId === t) return !0;\n        return !1;\n    }\n    /**\n     * For Tests: Runs some or all delayed operations early.\n     *\n     * @param lastTimerId - Delayed operations up to and including this TimerId\n     * will be drained. Pass TimerId.All to run all delayed operations.\n     * @returns a Promise that resolves once all operations have been run.\n     */    Kt(t) {\n        // Note that draining may generate more delayed ops, so we do that first.\n        return this.Gt().then((() => {\n            // Run ops in the same order they'd run if they ran naturally.\n            this.qt.sort(((t, e) => t.targetTimeMs - e.targetTimeMs));\n            for (const e of this.qt) if (e.skipDelay(), \"all\" /* All */ !== t && e.timerId === t) break;\n            return this.Gt();\n        }));\n    }\n    /**\n     * For Tests: Skip all subsequent delays for a timer id.\n     */    Qt(t) {\n        this.Lt.push(t);\n    }\n    /** Called once a DelayedOperation is run or canceled. */    zt(t) {\n        // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n        const e = this.qt.indexOf(t);\n        this.qt.splice(e, 1);\n    }\n}\n\nclass Gr {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._firestore = t, this._transaction = e, this._dataReader = Fn(t);\n    }\n    /**\n     * Reads the document referenced by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be read.\n     * @returns A `DocumentSnapshot` with the read data.\n     */    get(t) {\n        const e = kr(t, this._firestore), n = new Ir(this._firestore);\n        return this._transaction.lookup([ e._key ]).then((t => {\n            if (!t || 1 !== t.length) return g();\n            const r = t[0];\n            if (r.isFoundDocument()) return new Zn(this._firestore, n, r.key, r, e.converter);\n            if (r.isNoDocument()) return new Zn(this._firestore, n, e._key, null, e.converter);\n            throw g();\n        }));\n    }\n    set(t, e, n) {\n        const r = kr(t, this._firestore), s = Tr(r.converter, e, n), i = Sn(this._dataReader, \"Transaction.set\", r._key, s, null !== r.converter, n);\n        return this._transaction.set(r._key, i), this;\n    }\n    update(t, e, n, ...r) {\n        const s = kr(t, this._firestore);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                let i;\n        return i = \"string\" == typeof (e = h(e)) || e instanceof En ? jn(this._dataReader, \"Transaction.update\", s._key, e, n, r) : Un(this._dataReader, \"Transaction.update\", s._key, e), \n        this._transaction.update(s._key, i), this;\n    }\n    /**\n     * Deletes the document referred to by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be deleted.\n     * @returns This `Transaction` instance. Used for chaining method calls.\n     */    delete(t) {\n        const e = kr(t, this._firestore);\n        return this._transaction.delete(e._key), this;\n    }\n}\n\n/**\n * Executes the given `updateFunction` and then attempts to commit the changes\n * applied within the transaction. If any document read within the transaction\n * has changed, Cloud Firestore retries the `updateFunction`. If it fails to\n * commit after 5 attempts, the transaction fails.\n *\n * The maximum number of writes allowed in a single transaction is 500.\n *\n * @param firestore - A reference to the Firestore database to run this\n * transaction against.\n * @param updateFunction - The function to execute within the transaction\n * context.\n * @param options - An options object to configure maximum number of attempts to\n * commit.\n * @returns If the transaction completed successfully or was explicitly aborted\n * (the `updateFunction` returned a failed promise), the promise returned by the\n * `updateFunction `is returned here. Otherwise, if the transaction failed, a\n * rejected promise with the corresponding failure error is returned.\n */ function Wr(t, e, n) {\n    const r = un(t = ot(t, an)), s = Object.assign(Object.assign({}, Mr), n);\n    !function(t) {\n        if (t.maxAttempts < 1) throw new L(A, \"Max attempts must be at least 1\");\n    }(s);\n    const i = new M;\n    return new Ur(new zr, r, s, (n => e(new Gr(t, n))), i).run(), i.promise;\n}\n\n/**\n * Firestore Lite\n *\n * @remarks Firestore Lite is a small online-only SDK that allows read\n * and write access to your Firestore database. All operations connect\n * directly to the backend, and `onSnapshot()` APIs are not supported.\n * @packageDocumentation\n */ !function(t) {\n    f = t;\n}(`${s}_lite`), n(new i(\"firestore/lite\", ((t, {instanceIdentifier: e, options: n}) => {\n    const r = t.getProvider(\"app\").getImmediate(), s = new an(new z(t.getProvider(\"auth-internal\")), new Q(t.getProvider(\"app-check-internal\")), function(t, e) {\n        if (!Object.prototype.hasOwnProperty.apply(t.options, [ \"projectId\" ])) throw new L(A, '\"projectId\" not provided in firebase.initializeApp.');\n        return new H(t.options.projectId, e);\n    }\n    /**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (r, e), r);\n    return n && s._setSettings(n), s;\n}), \"PUBLIC\").setMultipleInstances(!0)), \n// RUNTIME_ENV and BUILD_TARGET are replaced by real values during the compilation\nr(\"firestore-lite\", \"3.5.0\", \"\"), r(\"firestore-lite\", \"3.5.0\", \"__BUILD_TARGET__\");\n\nexport { In as Bytes, pn as CollectionReference, wn as DocumentReference, Zn as DocumentSnapshot, En as FieldPath, An as FieldValue, an as Firestore, L as FirestoreError, Rn as GeoPoint, mn as Query, sr as QueryConstraint, tr as QueryDocumentSnapshot, er as QuerySnapshot, gt as Timestamp, Gr as Transaction, Or as WriteBatch, Dr as addDoc, Sr as arrayRemove, Fr as arrayUnion, yn as collection, _n as collectionGroup, fn as connectFirestoreEmulator, Nr as deleteDoc, $r as deleteField, gn as doc, Tn as documentId, _r as endAt, yr as endBefore, Ar as getDoc, Rr as getDocs, ln as getFirestore, qr as increment, hn as initializeFirestore, lr as limit, fr as limitToLast, ar as orderBy, ir as query, bn as queryEqual, vn as refEqual, Wr as runTransaction, xr as serverTimestamp, Pr as setDoc, w as setLogLevel, nr as snapshotEqual, mr as startAfter, wr as startAt, dn as terminate, Vr as updateDoc, ur as where, Cr as writeBatch };\n//# sourceMappingURL=index.browser.esm2017.js.map\n","import { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport {\n  getFirestore, collection, getDocs, addDoc, doc, setDoc,\n} from 'firebase/firestore/lite'\nimport { refs } from './refs';\nimport { filmArray } from './modal-filmoteka';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBMQEt78CaPaq3dSOfApmBG4vPslBGp6pQ\",\n  authDomain: \"filmoteka-5bf07.firebaseapp.com\",\n  projectId: \"filmoteka-5bf07\",\n  storageBucket: \"filmoteka-5bf07.appspot.com\",\n  messagingSenderId: \"626342412224\",\n  appId: \"1:626342412224:web:b02b966cc92ff4eefbd225\",\n  measurementId: \"G-X5BM5EZZVP\"\n};\n\n// Ініціалізуємо бібліотеку \n\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\n\n//  Ініціалізуємо сервіс\nconst db = getFirestore(app)\n\n  // Посилання на колекцію\n  const colWatchedRef = collection(db, 'watched');\n  const colQueueRef = collection(db, 'queue');\n\n  // Отримуємо колекції\n  getDocs(colQueueRef)\n  .then((snapshot) => {\n    let queue = [];\n    snapshot.docs.forEach((doc) => {\n    queue.push({...doc.data(), id: doc.id})\n    })    \n    console.log(queue)})\n    .catch(err => {console.log(err.message)});\n  \n\n  getDocs(colWatchedRef)\n  .then((snapshot) => {\n    let watched = [];\n    snapshot.docs.forEach((doc) => {\n      watched.push({...doc.data(), id: doc.id})\n    })\n    console.log(watched)})\n    .catch(err => {console.log(err.message)});\n\n// Додовання в колекцію з автоID\nconst addWatchedFilm = document.querySelector('.modal-film-wrap');\naddWatchedFilm.addEventListener('click', (e) => {\n  e.preventDefault()\nconsole.log(e.target.id);\n\n  addDoc(colWatchedRef, {\n    id: e.target.id,\n    poster_path: filmArray.poster_path,\n    original_title: filmArray.original_title,\n    genres: filmArray.genres,\n    release_date: `${new Date(filmArray.release_date).getFullYear()}`,\n  }).then(() => {\n    // refs.watchedHederBtnEl.classList.add('active');\n    // refs.watchedHederBtnEl.textContent = 'Remove';\n    })\n})\n\n\n//     Add a new document in collection \"watched\"\n// setDoc(doc(db, \"watched\", \"77777\"), {\n//   original_title: \"Los Angeles\",\n//   adult: false,\n//   overview: \"A young girl is kidnapped during a powerful storm. Her mother joins forces with her mysterious neighbour to set off in pursuit of the kidnapper. Their journey will test their limits and expose the dark secrets\"\n// });\n\n  // setDoc(doc(db, 'watched', 'new-film-id'),addWatchedFilm.title.value );  \n\n  // async function getBooks(db) {\n  //   const booksCol = collection(db, 'books');\n  //   const booksSnapshot = await getDocs(booksCol);\n  //   const booksList = booksSnapshot.docs.map(doc => doc.data());\n  //   console.log(booksList);\n  //   return booksList;\n  // }\n\n// Додовання в колекцію з автоID\n// const addWatchedFilm = document.querySelector('.modal-film-wrap');\n// addWatchedFilm.addEventListener('click', (e) => {\n//   e.preventDefault()\n//   addDoc(collection, {\n//     id: addWatchedFilm.title.value,\n//     adult: addWatchedFilm.author.value,\n//   }).then(() => {\n//     addWatchedFilm.reset()\n//   })\n// })\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { AppConfig } from '../interfaces/installation-impl';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\n\nexport async function createInstallationRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getKey } from '../util/get-key';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { IdChangeCallbackFn } from '../api';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void {\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key: string, fid: string): void {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({ key, fid });\n  }\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || (self as unknown as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DBSchema, IDBPDatabase, openDB } from 'idb';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { InstallationEntry } from '../interfaces/installation-entry';\nimport { getKey } from '../util/get-key';\nimport { fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\ninterface InstallationsDB extends DBSchema {\n  'firebase-installations-store': {\n    key: string;\n    value: InstallationEntry | undefined;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<InstallationsDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<InstallationsDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key) as Promise<InstallationEntry>;\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = (await objectStore.get(key)) as InstallationEntry;\n  await objectStore.put(value, key);\n  await tx.done;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = (await store.get(\n    key\n  )) as InstallationEntry;\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n  await tx.done;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> {\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.done;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallationRequest } from '../functions/create-installation-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  installations: FirebaseInstallationsImpl\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(installations.appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      installations,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      installations,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(\n      installations,\n      installationEntry\n    );\n    return set(installations.appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(installations.appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(\n    installations.appConfig\n  );\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(installations.appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    const { installationEntry, registrationPromise } =\n      await getInstallationEntry(installations);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n    }\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport {\n  FirebaseInstallationsImpl,\n  AppConfig\n} from '../interfaces/installation-impl';\n\nexport async function generateAuthTokenRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION,\n      appId: appConfig.appId\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken =\n      extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthTokenRequest } from '../functions/generate-auth-token-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh = false\n): Promise<CompletedAuthToken> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(installations.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(installations.appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return {\n        ...oldEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthTokenRequest(\n      installations,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(installations.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Creates a Firebase Installation if there isn't one for the app and\n * returns the Installation ID.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function getId(installations: Installations): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    installationsImpl\n  );\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns a Firebase Installations auth token, identifying the current\n * Firebase Installation.\n * @param installations - The `Installations` instance.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getToken(\n  installations: Installations,\n  forceRefresh = false\n): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  await completeInstallationRegistration(installationsImpl);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<void> {\n  const { registrationPromise } = await getInstallationEntry(installations);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { RegisteredInstallationEntry } from '../interfaces/installation-entry';\nimport {\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function deleteInstallationRequest(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<void> {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request: RequestInit = {\n    method: 'DELETE',\n    headers\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteInstallationRequest } from '../functions/delete-installation-request';\nimport { remove, update } from '../helpers/idb-manager';\nimport { RequestStatus } from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Deletes the Firebase Installation and all associated data.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function deleteInstallations(\n  installations: Installations\n): Promise<void> {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(ErrorCode.DELETE_PENDING_REGISTRATION);\n    } else if (entry.registrationStatus === RequestStatus.COMPLETED) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, _getProvider } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstanceFactory,\n  ComponentContainer\n} from '@firebase/component';\nimport { getId, getToken } from '../api/index';\nimport { _FirebaseInstallationsInternal } from '../interfaces/public-types';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { extractAppConfig } from '../helpers/extract-app-config';\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory: InstanceFactory<'installations'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Throws if app isn't configured properly.\n  const appConfig = extractAppConfig(app);\n  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n\n  const installationsImpl: FirebaseInstallationsImpl = {\n    app,\n    appConfig,\n    heartbeatServiceProvider,\n    _delete: () => Promise.resolve()\n  };\n  return installationsImpl;\n};\n\nconst internalFactory: InstanceFactory<'installations-internal'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Internal FIS instance relies on public FIS instance.\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal: _FirebaseInstallationsInternal = {\n    getId: () => getId(installations),\n    getToken: (forceRefresh?: boolean) => getToken(installations, forceRefresh)\n  };\n  return installationsInternal;\n};\n\nexport function registerInstallations(): void {\n  _registerComponent(\n    new Component(INSTALLATIONS_NAME, publicFactory, ComponentType.PUBLIC)\n  );\n  _registerComponent(\n    new Component(\n      INSTALLATIONS_NAME_INTERNAL,\n      internalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { addCallback, removeCallback } from '../helpers/fid-changed';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * An user defined callback function that gets called when Installations ID changes.\n *\n * @public\n */\nexport type IdChangeCallbackFn = (installationId: string) => void;\n/**\n * Unsubscribe a callback function previously added via {@link IdChangeCallbackFn}.\n *\n * @public\n */\nexport type IdChangeUnsubscribeFn = () => void;\n\n/**\n * Sets a new callback that will get called when Installation ID changes.\n * Returns an unsubscribe function that will remove the callback when called.\n * @param installations - The `Installations` instance.\n * @param callback - The callback function that is invoked when FID changes.\n * @returns A function that can be called to unsubscribe.\n *\n * @public\n */\nexport function onIdChange(\n  installations: Installations,\n  callback: IdChangeCallbackFn\n): IdChangeUnsubscribeFn {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  addCallback(appConfig, callback);\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns an instance of {@link Installations} associated with the given\n * {@link @firebase/app#FirebaseApp} instance.\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\n *\n * @public\n */\nexport function getInstallations(app: FirebaseApp = getApp()): Installations {\n  const installationsImpl = _getProvider(app, 'installations').getImmediate();\n  return installationsImpl;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CustomParams,\n  ControlParams,\n  EventParams,\n  ConsentSettings\n} from './public-types';\nimport { DynamicConfig, DataLayer, Gtag, MinimalDynamicConfig } from './types';\nimport { GtagCommand, GTAG_URL } from './constants';\nimport { logger } from './logger';\n\n// Possible parameter types for gtag 'event' and 'config' commands\ntype GtagConfigOrEventParams = ControlParams & EventParams & CustomParams;\n\n/**\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\n * have either resolved or rejected.\n *\n * @param promises Array of promises to wait for.\n */\nexport function promiseAllSettled<T>(\n  promises: Array<Promise<T>>\n): Promise<T[]> {\n  return Promise.all(promises.map(promise => promise.catch(e => e)));\n}\n\n/**\n * Inserts gtag script tag into the page to asynchronously download gtag.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function insertScriptTag(\n  dataLayerName: string,\n  measurementId: string\n): void {\n  const script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n  script.src = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/**\n * Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName] as DataLayer;\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'config' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param measurementId GA Measurement ID to set config for.\n * @param gtagParams Gtag config params to set.\n */\nasync function gtagOnConfig(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId as string];\n  try {\n    if (correspondingAppId) {\n      await initializationPromisesMap[correspondingAppId];\n    } else {\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      const foundConfig = dynamicConfigResults.find(\n        config => config.measurementId === measurementId\n      );\n      if (foundConfig) {\n        await initializationPromisesMap[foundConfig.appId];\n      }\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n  gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'event' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementId GA Measurement ID to log event to.\n * @param gtagParams Params to log with this event.\n */\nasync function gtagOnEvent(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  try {\n    let initializationPromisesToWaitFor: Array<Promise<string>> = [];\n\n    // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n    if (gtagParams && gtagParams['send_to']) {\n      let gaSendToList: string | string[] = gtagParams['send_to'];\n      // Make it an array if is isn't, so it can be dealt with the same way.\n      if (!Array.isArray(gaSendToList)) {\n        gaSendToList = [gaSendToList];\n      }\n      // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      for (const sendToId of gaSendToList) {\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(\n          config => config.measurementId === sendToId\n        );\n        const initializationPromise =\n          foundConfig && initializationPromisesMap[foundConfig.appId];\n        if (initializationPromise) {\n          initializationPromisesToWaitFor.push(initializationPromise);\n        } else {\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n        }\n      }\n    }\n\n    // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n    if (initializationPromisesToWaitFor.length === 0) {\n      initializationPromisesToWaitFor = Object.values(\n        initializationPromisesMap\n      );\n    }\n\n    // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n    await Promise.all(initializationPromisesToWaitFor);\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\n    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n  } catch (e) {\n    logger.error(e);\n  }\n}\n\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  /**\n   * Allows wrapped gtag calls to wait on whichever intialization promises are required,\n   * depending on the contents of the gtag params' `send_to` field, if any.\n   */\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  /**\n   * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\n   * before determining what initialization promises (which include FIDs) to wait for.\n   */\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  /**\n   * Wrapped gtag config calls can narrow down which initialization promise (with FID)\n   * to wait for if the measurementId is already fetched, by getting the corresponding appId,\n   * which is the key for the initialization promises map.\n   */\n  measurementIdToAppId: { [measurementId: string]: string }\n): Gtag {\n  /**\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\n   * @param command Gtag command type.\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\n   * @param gtagParams Params if event is EVENT/CONFIG.\n   */\n  async function gtagWrapper(\n    command: 'config' | 'set' | 'event' | 'consent',\n    idOrNameOrParams: string | ControlParams,\n    gtagParams?: GtagConfigOrEventParams | ConsentSettings\n  ): Promise<void> {\n    try {\n      // If event, check that relevant initialization promises have completed.\n      if (command === GtagCommand.EVENT) {\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          idOrNameOrParams as string,\n          gtagParams as GtagConfigOrEventParams\n        );\n      } else if (command === GtagCommand.CONFIG) {\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementIdToAppId,\n          idOrNameOrParams as string,\n          gtagParams as GtagConfigOrEventParams\n        );\n      } else if (command === GtagCommand.CONSENT) {\n        // If CONFIG, second arg must be measurementId.\n        gtagCore(GtagCommand.CONSENT, 'update', gtagParams as ConsentSettings);\n      } else {\n        // If SET, second arg must be params.\n        gtagCore(GtagCommand.SET, idOrNameOrParams as CustomParams);\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n  return gtagWrapper as Gtag;\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\n */\nexport function wrapOrCreateGtag(\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  dataLayerName: string,\n  gtagFunctionName: string\n): {\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} {\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function (..._args: unknown[]) {\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n  };\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(\n    gtagCore,\n    initializationPromisesMap,\n    dynamicConfigPromisesList,\n    measurementIdToAppId\n  );\n\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n  };\n}\n\n/**\n * Returns first script tag in DOM matching our gtag url pattern.\n */\nexport function findGtagScriptOnPage(): HTMLScriptElement | null {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Most logic is copied from packages/remote-config/src/client/retrying_client.ts\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { DynamicConfig, ThrottleMetadata, MinimalDynamicConfig } from './types';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { DYNAMIC_CONFIG_URL, FETCH_TIMEOUT_MILLIS } from './constants';\nimport { logger } from './logger';\n\n// App config fields needed by analytics.\nexport interface AppFields {\n  appId: string;\n  apiKey: string;\n  measurementId?: string;\n}\n\n/**\n * Backoff factor for 503 errors, which we want to be conservative about\n * to avoid overloading servers. Each retry interval will be\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\n * will be ~30 seconds (with fuzzing).\n */\nexport const LONG_RETRY_FACTOR = 30;\n\n/**\n * Base wait interval to multiplied by backoffFactor^backoffCount.\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n\n/**\n * Stubbable retry data storage class.\n */\nclass RetryData {\n  constructor(\n    public throttleMetadata: { [appId: string]: ThrottleMetadata } = {},\n    public intervalMillis: number = BASE_INTERVAL_MILLIS\n  ) {}\n\n  getThrottleMetadata(appId: string): ThrottleMetadata {\n    return this.throttleMetadata[appId];\n  }\n\n  setThrottleMetadata(appId: string, metadata: ThrottleMetadata): void {\n    this.throttleMetadata[appId] = metadata;\n  }\n\n  deleteThrottleMetadata(appId: string): void {\n    delete this.throttleMetadata[appId];\n  }\n}\n\nconst defaultRetryData = new RetryData();\n\n/**\n * Set GET request headers.\n * @param apiKey App API key.\n */\nfunction getHeaders(apiKey: string): Headers {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\n/**\n * Fetches dynamic config from backend.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfig(\n  appFields: AppFields\n): Promise<DynamicConfig> {\n  const { appId, apiKey } = appFields;\n  const request: RequestInit = {\n    method: 'GET',\n    headers: getHeaders(apiKey)\n  };\n  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n  const response = await fetch(appUrl, request);\n  if (response.status !== 200 && response.status !== 304) {\n    let errorMessage = '';\n    try {\n      // Try to get any error message text from server response.\n      const jsonResponse = (await response.json()) as {\n        error?: { message?: string };\n      };\n      if (jsonResponse.error?.message) {\n        errorMessage = jsonResponse.error.message;\n      }\n    } catch (_ignored) {}\n    throw ERROR_FACTORY.create(AnalyticsError.CONFIG_FETCH_FAILED, {\n      httpStatus: response.status,\n      responseMessage: errorMessage\n    });\n  }\n  return response.json();\n}\n\n/**\n * Fetches dynamic config from backend, retrying if failed.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfigWithRetry(\n  app: FirebaseApp,\n  // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\n  retryData: RetryData = defaultRetryData,\n  timeoutMillis?: number\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, apiKey, measurementId } = app.options;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n\n  if (!apiKey) {\n    if (measurementId) {\n      return {\n        measurementId,\n        appId\n      };\n    }\n    throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n  }\n\n  const throttleMetadata: ThrottleMetadata = retryData.getThrottleMetadata(\n    appId\n  ) || {\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n  };\n\n  const signal = new AnalyticsAbortSignal();\n\n  setTimeout(\n    async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      signal.abort();\n    },\n    timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS\n  );\n\n  return attemptFetchDynamicConfigWithRetry(\n    { appId, apiKey, measurementId },\n    throttleMetadata,\n    signal,\n    retryData\n  );\n}\n\n/**\n * Runs one retry attempt.\n * @param appFields Necessary app config fields.\n * @param throttleMetadata Ongoing metadata to determine throttling times.\n * @param signal Abort signal.\n */\nasync function attemptFetchDynamicConfigWithRetry(\n  appFields: AppFields,\n  { throttleEndTimeMillis, backoffCount }: ThrottleMetadata,\n  signal: AnalyticsAbortSignal,\n  retryData: RetryData = defaultRetryData // for testing\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, measurementId } = appFields;\n  // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n  try {\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n  } catch (e) {\n    if (measurementId) {\n      logger.warn(\n        `Timed out fetching this Firebase app's measurement ID from the server.` +\n          ` Falling back to the measurement ID ${measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config. [${\n            (e as Error)?.message\n          }]`\n      );\n      return { appId, measurementId };\n    }\n    throw e;\n  }\n\n  try {\n    const response = await fetchDynamicConfig(appFields);\n\n    // Note the SDK only clears throttle state if response is success or non-retriable.\n    retryData.deleteThrottleMetadata(appId);\n\n    return response;\n  } catch (e) {\n    const error = e as Error;\n    if (!isRetriableError(error)) {\n      retryData.deleteThrottleMetadata(appId);\n      if (measurementId) {\n        logger.warn(\n          `Failed to fetch this Firebase app's measurement ID from the server.` +\n            ` Falling back to the measurement ID ${measurementId}` +\n            ` provided in the \"measurementId\" field in the local Firebase config. [${error?.message}]`\n        );\n        return { appId, measurementId };\n      } else {\n        throw e;\n      }\n    }\n\n    const backoffMillis =\n      Number(error?.customData?.httpStatus) === 503\n        ? calculateBackoffMillis(\n            backoffCount,\n            retryData.intervalMillis,\n            LONG_RETRY_FACTOR\n          )\n        : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n\n    // Increments backoff state.\n    const throttleMetadata = {\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n    };\n\n    // Persists state.\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n\n    return attemptFetchDynamicConfigWithRetry(\n      appFields,\n      throttleMetadata,\n      signal,\n      retryData\n    );\n  }\n}\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(\n  signal: AnalyticsAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(AnalyticsError.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Shims a minimal AbortSignal (copied from Remote Config).\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class AnalyticsAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AnalyticsError {\n  ALREADY_EXISTS = 'already-exists',\n  ALREADY_INITIALIZED = 'already-initialized',\n  ALREADY_INITIALIZED_SETTINGS = 'already-initialized-settings',\n  INTEROP_COMPONENT_REG_FAILED = 'interop-component-reg-failed',\n  INVALID_ANALYTICS_CONTEXT = 'invalid-analytics-context',\n  INDEXEDDB_UNAVAILABLE = 'indexeddb-unavailable',\n  FETCH_THROTTLE = 'fetch-throttle',\n  CONFIG_FETCH_FAILED = 'config-fetch-failed',\n  NO_API_KEY = 'no-api-key',\n  NO_APP_ID = 'no-app-id'\n}\n\nconst ERRORS: ErrorMap<AnalyticsError> = {\n  [AnalyticsError.ALREADY_EXISTS]:\n    'A Firebase Analytics instance with the appId {$id} ' +\n    ' already exists. ' +\n    'Only one Firebase Analytics instance can be created for each appId.',\n  [AnalyticsError.ALREADY_INITIALIZED]:\n    'initializeAnalytics() cannot be called again with different options than those ' +\n    'it was initially called with. It can be called again with the same options to ' +\n    'return the existing instance, or getAnalytics() can be used ' +\n    'to get a reference to the already-intialized instance.',\n  [AnalyticsError.ALREADY_INITIALIZED_SETTINGS]:\n    'Firebase Analytics has already been initialized.' +\n    'settings() must be called before initializing any Analytics instance' +\n    'or it will have no effect.',\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]:\n    'Firebase Analytics Interop Component failed to instantiate: {$reason}',\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]:\n    'Firebase Analytics is not supported in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]:\n    'IndexedDB unavailable or restricted in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [AnalyticsError.CONFIG_FETCH_FAILED]:\n    'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\n  [AnalyticsError.NO_API_KEY]:\n    'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid API key.',\n  [AnalyticsError.NO_APP_ID]:\n    'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid app ID.'\n};\n\ninterface ErrorParams {\n  [AnalyticsError.ALREADY_EXISTS]: { id: string };\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]: { reason: Error };\n  [AnalyticsError.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [AnalyticsError.CONFIG_FETCH_FAILED]: {\n    httpStatus: number;\n    responseMessage: string;\n  };\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]: { errorInfo: string };\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AnalyticsError, ErrorParams>(\n  'analytics',\n  'Analytics',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  CustomParams,\n  ControlParams,\n  EventParams,\n  ConsentSettings\n} from './public-types';\nimport { Gtag } from './types';\nimport { GtagCommand } from './constants';\n\n/**\n * Event parameters to set on 'gtag' during initialization.\n */\nexport let defaultEventParametersForInit: CustomParams | undefined;\n\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport async function logEvent(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n    return;\n  } else {\n    const measurementId = await initializationPromise;\n    const params: EventParams | ControlParams = {\n      ...eventParams,\n      'send_to': measurementId\n    };\n    gtagFunction(GtagCommand.EVENT, eventName, params);\n  }\n}\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport async function setCurrentScreen(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport async function setUserId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'user_id': id });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport async function setUserProperties(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    const flatProperties: { [key: string]: unknown } = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport async function setAnalyticsCollectionEnabled(\n  initializationPromise: Promise<string>,\n  enabled: boolean\n): Promise<void> {\n  const measurementId = await initializationPromise;\n  window[`ga-disable-${measurementId}`] = !enabled;\n}\n\n/**\n * Consent parameters to default to during 'gtag' initialization.\n */\nexport let defaultConsentSettingsForInit: ConsentSettings | undefined;\n\n/**\n * Sets the variable {@link defaultConsentSettingsForInit} for use in the initialization of\n * analytics.\n *\n * @param consentSettings Maps the applicable end user consent state for gtag.js.\n */\nexport function _setConsentDefaultForInit(\n  consentSettings?: ConsentSettings\n): void {\n  defaultConsentSettingsForInit = consentSettings;\n}\n\n/**\n * Sets the variable `defaultEventParametersForInit` for use in the initialization of\n * analytics.\n *\n * @param customParams Any custom params the user may pass to gtag.js.\n */\nexport function _setDefaultEventParametersForInit(\n  customParams?: CustomParams\n): void {\n  defaultEventParametersForInit = customParams;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicConfig, Gtag, MinimalDynamicConfig } from './types';\nimport { GtagCommand, GA_FID_KEY, ORIGIN_KEY } from './constants';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { fetchDynamicConfigWithRetry } from './get-config';\nimport { logger } from './logger';\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { findGtagScriptOnPage, insertScriptTag } from './helpers';\nimport { AnalyticsSettings } from './public-types';\nimport {\n  defaultConsentSettingsForInit,\n  _setConsentDefaultForInit,\n  defaultEventParametersForInit,\n  _setDefaultEventParametersForInit\n} from './functions';\n\nasync function validateIndexedDB(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    logger.warn(\n      ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n        errorInfo: 'IndexedDB is not available in this environment.'\n      }).message\n    );\n    return false;\n  } else {\n    try {\n      await validateIndexedDBOpenable();\n    } catch (e) {\n      logger.warn(\n        ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n          errorInfo: (e as Error)?.toString()\n        }).message\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\n * @param measurementIdToAppId Maps measurementID to appID.\n * @param installations _FirebaseInstallationsInternal instance.\n *\n * @returns Measurement ID.\n */\nexport async function _initializeAnalytics(\n  app: FirebaseApp,\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [key: string]: string },\n  installations: _FirebaseInstallationsInternal,\n  gtagCore: Gtag,\n  dataLayerName: string,\n  options?: AnalyticsSettings\n): Promise<string> {\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n  dynamicConfigPromise\n    .then(config => {\n      measurementIdToAppId[config.measurementId] = config.appId;\n      if (\n        app.options.measurementId &&\n        config.measurementId !== app.options.measurementId\n      ) {\n        logger.warn(\n          `The measurement ID in the local Firebase config (${app.options.measurementId})` +\n            ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\n            ` To ensure analytics events are always sent to the correct Analytics property,` +\n            ` update the` +\n            ` measurement ID field in the local config or remove it from the local config.`\n        );\n      }\n    })\n    .catch(e => logger.error(e));\n  // Add to list to track state of all dynamic config promises.\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n\n  const fidPromise: Promise<string | undefined> = validateIndexedDB().then(\n    envIsValid => {\n      if (envIsValid) {\n        return installations.getId();\n      } else {\n        return undefined;\n      }\n    }\n  );\n\n  const [dynamicConfig, fid] = await Promise.all([\n    dynamicConfigPromise,\n    fidPromise\n  ]);\n\n  // Detect if user has already put the gtag <script> tag on this page.\n  if (!findGtagScriptOnPage()) {\n    insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n  }\n\n  // Detects if there are consent settings that need to be configured.\n  if (defaultConsentSettingsForInit) {\n    gtagCore(GtagCommand.CONSENT, 'default', defaultConsentSettingsForInit);\n    _setConsentDefaultForInit(undefined);\n  }\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (gtagCore as any)('js', new Date());\n  // User config added first. We don't want users to accidentally overwrite\n  // base Firebase config properties.\n  const configProperties: Record<string, unknown> = options?.config ?? {};\n\n  // guard against developers accidentally setting properties with prefix `firebase_`\n  configProperties[ORIGIN_KEY] = 'firebase';\n  configProperties.update = true;\n\n  if (fid != null) {\n    configProperties[GA_FID_KEY] = fid;\n  }\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n  // `configProperties`.\n  gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n\n  // Detects if there is data that will be set on every event logged from the SDK.\n  if (defaultEventParametersForInit) {\n    gtagCore(GtagCommand.SET, defaultEventParametersForInit);\n    _setDefaultEventParametersForInit(undefined);\n  }\n\n  return dynamicConfig.measurementId;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable camelcase */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport {\n  Analytics,\n  AnalyticsCallOptions,\n  AnalyticsSettings,\n  ConsentSettings,\n  CustomParams,\n  EventNameString,\n  EventParams\n} from './public-types';\nimport { Provider } from '@firebase/component';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable,\n  areCookiesEnabled,\n  isBrowserExtension,\n  getModularInstance,\n  deepEqual\n} from '@firebase/util';\nimport { ANALYTICS_TYPE, GtagCommand } from './constants';\nimport {\n  AnalyticsService,\n  initializationPromisesMap,\n  wrappedGtagFunction\n} from './factory';\nimport { logger } from './logger';\nimport {\n  logEvent as internalLogEvent,\n  setCurrentScreen as internalSetCurrentScreen,\n  setUserId as internalSetUserId,\n  setUserProperties as internalSetUserProperties,\n  setAnalyticsCollectionEnabled as internalSetAnalyticsCollectionEnabled,\n  _setConsentDefaultForInit,\n  _setDefaultEventParametersForInit\n} from './functions';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\n\nexport { settings } from './factory';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    [ANALYTICS_TYPE]: AnalyticsService;\n  }\n}\n\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport function getAnalytics(app: FirebaseApp = getApp()): Analytics {\n  app = getModularInstance(app);\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n\n  if (analyticsProvider.isInitialized()) {\n    return analyticsProvider.getImmediate();\n  }\n\n  return initializeAnalytics(app);\n}\n\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport function initializeAnalytics(\n  app: FirebaseApp,\n  options: AnalyticsSettings = {}\n): Analytics {\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n  if (analyticsProvider.isInitialized()) {\n    const existingInstance = analyticsProvider.getImmediate();\n    if (deepEqual(options, analyticsProvider.getOptions())) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n    }\n  }\n  const analyticsInstance = analyticsProvider.initialize({ options });\n  return analyticsInstance;\n}\n\n/**\n * This is a public static method provided to users that wraps four different checks:\n *\n * 1. Check if it's not a browser extension environment.\n * 2. Check if cookies are enabled in current browser.\n * 3. Check if IndexedDB is supported by the browser environment.\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\n *\n * @public\n *\n */\nexport async function isSupported(): Promise<boolean> {\n  if (isBrowserExtension()) {\n    return false;\n  }\n  if (!areCookiesEnabled()) {\n    return false;\n  }\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Use gtag `config` command to set `screen_name`.\n *\n * @public\n *\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param screenName - Screen name to set.\n */\nexport function setCurrentScreen(\n  analyticsInstance: Analytics,\n  screenName: string,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetCurrentScreen(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    screenName,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Use gtag `config` command to set `user_id`.\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param id - User ID to set.\n */\nexport function setUserId(\n  analyticsInstance: Analytics,\n  id: string,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserId(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    id,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Use gtag `config` command to set all params specified.\n *\n * @public\n */\nexport function setUserProperties(\n  analyticsInstance: Analytics,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserProperties(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    properties,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Sets whether Google Analytics collection is enabled for this app on this device.\n * Sets global `window['ga-disable-analyticsId'] = true;`\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param enabled - If true, enables collection, if false, disables it.\n */\nexport function setAnalyticsCollectionEnabled(\n  analyticsInstance: Analytics,\n  enabled: boolean\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetAnalyticsCollectionEnabled(\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    enabled\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Adds data that will be set on every event logged from the SDK, including automatic ones.\n * With gtag's \"set\" command, the values passed persist on the current page and are passed with\n * all subsequent events.\n * @public\n * @param customParams - Any custom params the user may pass to gtag.js.\n */\nexport function setDefaultEventParameters(customParams: CustomParams): void {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(GtagCommand.SET, customParams);\n  } else {\n    _setDefaultEventParametersForInit(customParams);\n  }\n}\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_payment_info',\n  eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    payment_type?: EventParams['payment_type'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_shipping_info',\n  eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    shipping_tier?: EventParams['shipping_tier'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_to_cart' | 'add_to_wishlist' | 'remove_from_cart',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'begin_checkout',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'checkout_progress',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * {@link https://developers.google.com/analytics/devguides/collection/ga4/exceptions\n * | Measure exceptions}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'exception',\n  eventParams?: {\n    description?: EventParams['description'];\n    fatal?: EventParams['fatal'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'generate_lead',\n  eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'login',\n  eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * {@link https://developers.google.com/analytics/devguides/collection/ga4/page-view\n * | Page views}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'page_view',\n  eventParams?: {\n    page_title?: string;\n    page_location?: string;\n    page_path?: string;\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'purchase' | 'refund',\n  eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    transaction_id: EventParams['transaction_id'];\n    tax?: EventParams['tax'];\n    shipping?: EventParams['shipping'];\n    items?: EventParams['items'];\n    coupon?: EventParams['coupon'];\n    affiliation?: EventParams['affiliation'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See {@link https://firebase.google.com/docs/analytics/screenviews\n * | Track Screenviews}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'screen_view',\n  eventParams?: {\n    firebase_screen: EventParams['firebase_screen'];\n    firebase_screen_class: EventParams['firebase_screen_class'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'search' | 'view_search_results',\n  eventParams?: {\n    search_term?: EventParams['search_term'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_content',\n  eventParams?: {\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_item',\n  eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_promotion' | 'view_promotion',\n  eventParams?: {\n    items?: EventParams['items'];\n    promotion_id?: EventParams['promotion_id'];\n    promotion_name?: EventParams['promotion_name'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'set_checkout_option',\n  eventParams?: {\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'share',\n  eventParams?: {\n    method?: EventParams['method'];\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'sign_up',\n  eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'timing_complete',\n  eventParams?: {\n    name: string;\n    value: number;\n    event_category?: string;\n    event_label?: string;\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_cart' | 'view_item',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_item_list',\n  eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent<T extends string>(\n  analyticsInstance: Analytics,\n  eventName: CustomEventName<T>,\n  eventParams?: { [key: string]: any },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * List of official event parameters can be found in the gtag.js\n * reference documentation:\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n *\n * @public\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalLogEvent(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    eventName,\n    eventParams,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Any custom event name string not in the standard list of recommended\n * event names.\n * @public\n */\nexport type CustomEventName<T> = T extends EventNameString ? never : T;\n\n/**\n * Sets the applicable end user consent state for this web app across all gtag references once\n * Firebase Analytics is initialized.\n *\n * Use the {@link ConsentSettings} to specify individual consent type values. By default consent\n * types are set to \"granted\".\n * @public\n * @param consentSettings - Maps the applicable end user consent state for gtag.js.\n */\nexport function setConsent(consentSettings: ConsentSettings): void {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(GtagCommand.CONSENT, 'update', consentSettings);\n  } else {\n    _setConsentDefaultForInit(consentSettings);\n  }\n}\n","/**\n * Firebase Analytics\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerVersion, _registerComponent } from '@firebase/app';\nimport { FirebaseAnalyticsInternal } from '@firebase/analytics-interop-types';\nimport { factory } from './factory';\nimport { ANALYTICS_TYPE } from './constants';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { logEvent } from './api';\nimport { name, version } from '../package.json';\nimport { AnalyticsCallOptions } from './public-types';\nimport '@firebase/installations';\n\ndeclare global {\n  interface Window {\n    [key: string]: unknown;\n  }\n}\n\nfunction registerAnalytics(): void {\n  _registerComponent(\n    new Component(\n      ANALYTICS_TYPE,\n      (container, { options: analyticsOptions }: InstanceFactoryOptions) => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const installations = container\n          .getProvider('installations-internal')\n          .getImmediate();\n\n        return factory(app, installations, analyticsOptions);\n      },\n      ComponentType.PUBLIC\n    )\n  );\n\n  _registerComponent(\n    new Component('analytics-internal', internalFactory, ComponentType.PRIVATE)\n  );\n\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n\n  function internalFactory(\n    container: ComponentContainer\n  ): FirebaseAnalyticsInternal {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: (\n          eventName: string,\n          eventParams?: { [key: string]: unknown },\n          options?: AnalyticsCallOptions\n        ) => logEvent(analytics, eventName, eventParams, options)\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(AnalyticsError.INTEROP_COMPONENT_REG_FAILED, {\n        reason: e as Error\n      });\n    }\n  }\n}\n\nregisterAnalytics();\n\nexport * from './api';\nexport * from './public-types';\n"],"names":["$c81c85f5b6b618be$var$l","l","t","this","uid","key","isAuthenticated","UNAUTHENTICATED","GOOGLE_CREDENTIALS","FIRST_PARTY","MOCK_USER","$c81c85f5b6b618be$var$f","$c81c85f5b6b618be$var$d","o","$c81c85f5b6b618be$var$m","_len","arguments","length","e","Array","_key","logLevel","u","DEBUG","_d","n","map","$c81c85f5b6b618be$var$_","debug","apply","concat","$parcel$interopDefault","$8nrFW","$c81c85f5b6b618be$var$p","ERROR","error","$c81c85f5b6b618be$var$y","WARN","warn","JSON","stringify","e1","$c81c85f5b6b618be$var$g","Error","$c81c85f5b6b618be$var$v","$c81c85f5b6b618be$var$b","$c81c85f5b6b618be$var$T","$c81c85f5b6b618be$var$I","$c81c85f5b6b618be$var$A","$c81c85f5b6b618be$var$R","$c81c85f5b6b618be$var$P","$c81c85f5b6b618be$var$N","$c81c85f5b6b618be$var$D","$c81c85f5b6b618be$var$$","$c81c85f5b6b618be$var$x","$c81c85f5b6b618be$var$F","$c81c85f5b6b618be$var$S","$c81c85f5b6b618be$var$q","$c81c85f5b6b618be$var$O","$c81c85f5b6b618be$var$k","$c81c85f5b6b618be$export$8fada0bf726bf278","FirebaseError1","L","_this","_super","call","code","message","toString","name","c","$c81c85f5b6b618be$var$U","U","user","type","headers","Map","set","$c81c85f5b6b618be$var$j","j","Promise","resolve","enqueueRetryable","$c81c85f5b6b618be$var$z","z","t1","auth","onInit","getToken","then","accessToken","getUid","$c81c85f5b6b618be$var$G","G","r","i","h","getAuthHeaderValueForFirstParty","$c81c85f5b6b618be$var$W","W","$c81c85f5b6b618be$var$K","K","value","$c81c85f5b6b618be$var$Q","Q","t2","m","appCheck","token","$c81c85f5b6b618be$var$Y","Y","s","databaseId","appId","persistenceKey","host","ssl","forceLongPolling","autoDetectLongPolling","useFetchStreams","$c81c85f5b6b618be$var$H","H","projectId","database","$c81c85f5b6b618be$var$J","J","segments","offset","len","comparator","t3","slice","limit","forEach","push","construct","get","Math","min","n1","$c81c85f5b6b618be$var$X","X","toArray","join","canonicalString","t4","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator1","Symbol","iterator","next","done","_e1","indexOf","split","filter","err","return","$c81c85f5b6b618be$var$Z","$c81c85f5b6b618be$var$tt","tt","replace","isValidIdentifier","test","e2","e3","$c81c85f5b6b618be$var$et","et","path","popLast","lastSegment","fromString","popFirst","emptyPath","$c81c85f5b6b618be$var$nt","$c81c85f5b6b618be$var$rt","isDocumentKey","$c81c85f5b6b618be$var$st","$c81c85f5b6b618be$var$it","t5","substring","constructor","$c81c85f5b6b618be$var$ot","_delegate","$c81c85f5b6b618be$var$ct","$c81c85f5b6b618be$var$at","$c81c85f5b6b618be$var$lt","$c81c85f5b6b618be$var$ft","$c81c85f5b6b618be$var$ht","BatchGetDocuments","Commit","RunQuery","$c81c85f5b6b618be$var$dt","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","$c81c85f5b6b618be$var$wt","_superClass","wt","P","$bpxeT","$2TvXO","mark","_callee","method","body","_ctx","sent","t0","status","statusText","ok","json","databaseInfo","p","g","t6","e4","T","I","A","v","e5","n2","$c81c85f5b6b618be$var$mt","self","crypto","msCrypto","Uint8Array","getRandomValues","e6","floor","random","$c81c85f5b6b618be$var$pt","pt","charAt","$c81c85f5b6b618be$var$yt","$c81c85f5b6b618be$var$_t","t7","every","$c81c85f5b6b618be$export$d9bcbd5e1ff81430","gt","seconds","nanoseconds","Date","toMillis","String","padStart","fromMillis","now","getTime","$c81c85f5b6b618be$var$vt","vt","timestamp","_compareTo","isEqual","$c81c85f5b6b618be$var$bt","Object","prototype","hasOwnProperty","$c81c85f5b6b618be$var$Et","$c81c85f5b6b618be$var$Tt","Tt","root","$c81c85f5b6b618be$var$At","EMPTY","insert","copy","BLACK","remove","isEmpty","left","right","size","minKey","maxKey","inorderTraversal","reverseTraversal","$c81c85f5b6b618be$var$It","It","isReverse","nodeStack","pop","At","color","RED","fixUp","isRed","moveRedLeft","removeMin","rotateRight","moveRedRight","rotateLeft","colorFlip","check","pow","$c81c85f5b6b618be$var$Rt","Rt","data","getIteratorFrom","hasNext","getNext","getIterator","$c81c85f5b6b618be$var$Pt","has","t8","add","_$t","Pt","iter","$c81c85f5b6b618be$var$Vt","Vt","fields","sort","_iterator3","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator2","err1","_iterator4","isPrefixOf","t9","$c81c85f5b6b618be$var$_iterator","$c81c85f5b6b618be$var$Nt","Nt","binaryString","charCodeAt","btoa","atob","t10","fromCharCode","EMPTY_BYTE_STRING","$c81c85f5b6b618be$var$Dt","RegExp","$c81c85f5b6b618be$var$$t","exec","substr","Number","nanos","$c81c85f5b6b618be$var$xt","$c81c85f5b6b618be$var$Ft","fromBase64String","fromUint8Array","$c81c85f5b6b618be$var$St","mapValue","__type__","stringValue","$c81c85f5b6b618be$var$qt","__previous_value__","$c81c85f5b6b618be$var$Ot","__local_write_time__","timestampValue","$c81c85f5b6b618be$var$Ct","t11","$c81c85f5b6b618be$var$Lt","t12","e8","n3","booleanValue","bytesValue","referenceValue","geoPointValue","latitude","longitude","integerValue","doubleValue","isNaN","arrayValue","values","$c81c85f5b6b618be$var$Gt","$c81c85f5b6b618be$var$Wt","$c81c85f5b6b618be$var$Kt","$c81c85f5b6b618be$var$Qt","t15","assign","e10","n5","$c81c85f5b6b618be$var$Yt","Yt","getFieldsMap","t16","isImmediateParentOf","applyChanges","s1","field","e11","n6","_iterator5","_$e","$c81c85f5b6b618be$var$Ht","Ht","documentType","version","readTime","documentState","empty","hasLocalMutations","hasCommittedMutations","clone","$c81c85f5b6b618be$var$Jt","Jt","collectionGroup","orderBy","filters","startAt","endAt","D","$c81c85f5b6b618be$var$Xt","$c81c85f5b6b618be$var$ce","ce","position","inclusive","$c81c85f5b6b618be$var$ae","ae","dir","$c81c85f5b6b618be$var$fe","fe","explicitOrderBy","limitType","q","O","$c81c85f5b6b618be$var$de","$c81c85f5b6b618be$var$we","_iterator6","S","$c81c85f5b6b618be$var$pe","isKeyField","keyField","_$t1","_iterator7","n7","_$t2","$c81c85f5b6b618be$var$ye","_iterator8","e12","n8","$c81c85f5b6b618be$var$ge","t20","e14","isInteger","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","k","$c81c85f5b6b618be$var$ve","ve","_","$c81c85f5b6b618be$var$be","be","$c81c85f5b6b618be$var$Ee","Ee","elements","$c81c85f5b6b618be$var$Te","Te","$c81c85f5b6b618be$var$Ie","Ie","C","$c81c85f5b6b618be$var$Re","Re","updateTime","exists","$c81c85f5b6b618be$var$Pe","Pe","$c81c85f5b6b618be$var$Ve","Ve","precondition","fieldTransforms","$c81c85f5b6b618be$var$Ne","Ne","fieldMask","$c81c85f5b6b618be$var$De","De","$c81c85f5b6b618be$var$$e","$e","$c81c85f5b6b618be$var$xe","asc","desc","$c81c85f5b6b618be$var$Fe","in","$c81c85f5b6b618be$var$Se","Se","$c81c85f5b6b618be$var$qe","toISOString","$c81c85f5b6b618be$var$Oe","toBase64","toUint8Array","$c81c85f5b6b618be$var$ke","toTimestamp","$c81c85f5b6b618be$var$Ce","t21","fromTimestamp","$c81c85f5b6b618be$var$Le","t22","child","$c81c85f5b6b618be$var$Me","$c81c85f5b6b618be$var$Ue","t23","$c81c85f5b6b618be$var$Xe","$c81c85f5b6b618be$var$je","$c81c85f5b6b618be$var$Be","$c81c85f5b6b618be$var$ze","$c81c85f5b6b618be$var$We","t25","e16","n10","t31","update","delete","updateMask","fieldPaths","verify","updateTransforms","transform","fieldPath","setToServerValue","appendMissingElements","removeAllFromArray","increment","isNone","currentDocument","$c81c85f5b6b618be$var$Ke","t26","e17","structuredQuery","parent","from","collectionId","allDescendants","t27","t28","op","unaryFilter","$c81c85f5b6b618be$var$He","fieldFilter","$c81c85f5b6b618be$var$Ye","compositeFilter","where","t29","t30","direction","$c81c85f5b6b618be$var$Qe","before","$c81c85f5b6b618be$var$Ze","$c81c85f5b6b618be$var$en","_class","en","authCredentials","appCheckCredentials","Z","t32","all","param","_param","catch","invalidateToken","t33","R","$c81c85f5b6b618be$var$nn","t34","$c81c85f5b6b618be$var$_nn","writes","$c81c85f5b6b618be$var$_sn","t36","e18","n11","r2","document","t37","newFoundDocument","$c81c85f5b6b618be$var$on","$c81c85f5b6b618be$var$un","t38","_terminated","e19","_databaseId","n12","app","options","r3","_persistenceKey","_freezeSettings","experimentalForceLongPolling","experimentalAutoDetectLongPolling","fetch","bind","_authCredentials","_appCheckCredentials","$c81c85f5b6b618be$var$cn","cn","t39","e20","credentials","ignoreUndefinedProperties","cacheSizeBytes","$c81c85f5b6b618be$export$d0e2b3272814ce82","an","_app","_settings","_settingsFrozen","_terminateTask","t40","client","sessionIndex","iamToken","authTokenFactory","_terminate","settings","terminate","$c81c85f5b6b618be$export$f06a05d14c3a6678","$MjY8E","_getProvider","getImmediate","identifier","$c81c85f5b6b618be$export$6be62b059fb12175","wn","converter","firestore","$c81c85f5b6b618be$export$ab5a1a47940a200e","$c81c85f5b6b618be$export$62297b13309008b2","mn","_query","pn","_path","$c81c85f5b6b618be$export$bf5175b0c24981cd","_X","_X1","r4","$c81c85f5b6b618be$export$a1a8fea822d17659","En","_internalPath","$c81c85f5b6b618be$export$9f55f2e2bf8c2fc1","In","_byteString","t42","$c81c85f5b6b618be$export$c58bc8ee7ecc248d","An","_methodName","$c81c85f5b6b618be$export$f9f719d1b6419c4","Rn","isFinite","_lat","_long","$c81c85f5b6b618be$var$Pn","$c81c85f5b6b618be$var$Vn","Vn","$c81c85f5b6b618be$var$Dn","$c81c85f5b6b618be$var$$n","$n","nt","rt","st","ot","ut","$c81c85f5b6b618be$var$Jn","methodName","lt","ft","find","ht","$c81c85f5b6b618be$var$xn","xn","$c81c85f5b6b618be$var$Fn","$c81c85f5b6b618be$var$Sn","t43","dt","merge","mergeFields","$c81c85f5b6b618be$var$Kn","a","$c81c85f5b6b618be$var$Gn","_iterator9","_$r","_$s","$c81c85f5b6b618be$var$Qn","contains","$c81c85f5b6b618be$var$Xn","covers","$c81c85f5b6b618be$var$zn","t47","e21","$c81c85f5b6b618be$var$Wn","_toFieldTransform","_iterator10","at","nullValue","fromDate","n13","n14","t48","it","t49","getPrototypeOf","$c81c85f5b6b618be$var$Hn","$c81c85f5b6b618be$var$Yn","search","$ge8co","t50","some","$c81c85f5b6b618be$export$acab0e6ef25eb301","Zn","_firestore","_userDataWriter","_document","_converter","$c81c85f5b6b618be$export$6d4d04e42af6b03c","fromFirestore","convertValue","$c81c85f5b6b618be$var$rr","tr","$jh8P3","$fVNic","$c81c85f5b6b618be$export$8f21149d8133945c","er","_docs","query","docs","$c81c85f5b6b618be$var$Tr","toFirestore","$c81c85f5b6b618be$var$Ir","Ir","convertDocumentKey","convertTimestamp","convertServerTimestamp","convertBytes","convertReference","convertGeoPoint","convertArray","convertObject","t60","t61","$c81c85f5b6b618be$export$81d3477bd73c86ef","t62","e31","$c81c85f5b6b618be$var$sn","e32","reverse","$c81c85f5b6b618be$export$a13890143fb1c2dd","N","_X2","r5","$c81c85f5b6b618be$export$2a111da947c407d2","toMutation","t76","e37","instanceIdentifier","getProvider","_setSettings","setMultipleInstances","$dDDEV","parcelRequire","$2f87c48822f67453$var$PENDING_TIMEOUT_MS","$2f87c48822f67453$var$PACKAGE_VERSION","$2f87c48822f67453$var$version","$2f87c48822f67453$var$INTERNAL_AUTH_VERSION","$2f87c48822f67453$var$_obj","$hKHmD","$2xDiJ","ErrorFactory","$2f87c48822f67453$var$ERROR_DESCRIPTION_MAP","$2f87c48822f67453$var$isServerError","FirebaseError","includes","$2f87c48822f67453$var$getInstallationsEndpoint","$2f87c48822f67453$var$extractAuthTokenInfoFromResponse","response","requestStatus","expiresIn","responseExpiresIn","$2f87c48822f67453$var$getErrorFromResponse","requestName","$2f87c48822f67453$var$_getErrorFromResponse","prev","$2f87c48822f67453$var$ERROR_FACTORY","create","stop","$2f87c48822f67453$var$getHeaders","apiKey","Headers","$2f87c48822f67453$var$getHeadersWithAuth","appConfig","refreshToken","fn","wrap","result","abrupt","_1","param1","heartbeatServiceProvider","fid","endpoint","heartbeatService","optional","heartbeatsHeader","append","authVersion","sdkVersion","request","responseValue","registrationStatus","authToken","registeredInstallationEntry","$2f87c48822f67453$var$sleep","ms","$2f87c48822f67453$var$generateFid","fidByteArray","array","_String","$2f87c48822f67453$var$encode","_a","$2f87c48822f67453$var$fidChangeCallbacks","$2f87c48822f67453$var$broadcastChannel","BroadcastChannel","$2f87c48822f67453$var$callFidChangeCallbacks","$2f87c48822f67453$var$dbPromise","$ajgRO","openDB","oldVersion","db","createObjectStore","$2f87c48822f67453$var$OBJECT_STORE_NAME","$2f87c48822f67453$var$set","$2f87c48822f67453$var$_set","tx","objectStore","oldValue","$2f87c48822f67453$var$getKey","transaction","put","$2f87c48822f67453$var$fidChanged","updateFn","newValue","installations","registrationPromise","installationEntry1","$2f87c48822f67453$var$update","oldEntry","installationEntry","$2f87c48822f67453$var$updateOrCreateInstallationEntry","entryWithPromise","$2f87c48822f67453$var$triggerRegistrationIfNecessary","inProgressEntry","$2f87c48822f67453$var$waitUntilFidRegistration","$2f87c48822f67453$var$createInstallationRequest","$2f87c48822f67453$var$remove","entry","ref","$2f87c48822f67453$var$updateInstallationRequest","registrationTime","completedAuthToken","installation","$2f87c48822f67453$var$retryIfServerError","$2f87c48822f67453$var$refreshAuthToken","$2f87c48822f67453$var$_refreshAuthToken","$2f87c48822f67453$var$isEntryRegistered","oldAuthToken","forceRefresh","$2f87c48822f67453$var$isAuthTokenValid","navigator","onLine","$2f87c48822f67453$var$updateAuthTokenRequest","requestTime","updatedInstallationEntry","updatedInstallationEntry1","$2f87c48822f67453$var$generateAuthTokenRequest","customData","serverCode","creationTime","$2f87c48822f67453$var$TOKEN_EXPIRATION_BUFFER","$2f87c48822f67453$var$isAuthTokenExpired","$2f87c48822f67453$var$makeAuthTokenRequestInProgressEntry","inProgressAuthToken","$2f87c48822f67453$var$_getId","$6029874cccb4dfd3$var$FETCH_TIMEOUT_MILLIS","$6029874cccb4dfd3$var$DYNAMIC_CONFIG_URL","$6029874cccb4dfd3$var$GTAG_URL","$kZfxc","Logger","dataLayerName1","measurementId","$6029874cccb4dfd3$var$_gtagOnConfig","gtagCore","initializationPromisesMap1","dynamicConfigPromisesList1","measurementIdToAppId1","gtagParams","$6029874cccb4dfd3$var$promiseAllSettled","foundConfig","dynamicConfigResults","config","$6029874cccb4dfd3$var$logger","_iterator","finish","initializationPromisesToWaitFor","initializationPromisesMap4","dynamicConfigPromisesList4","measurementIdToAppId3","dataLayerName3","gtagFunctionName","_args","_gtagWrapper","command","idOrNameOrParams","$6029874cccb4dfd3$var$gtagOnEvent","initializationPromisesMap3","dynamicConfigPromisesList3","$6029874cccb4dfd3$var$_obj","$6029874cccb4dfd3$var$ERRORS","$8MBJY","RetryData","throttleMetadata","$a2hTj","metadata","appFields","errorMessage","jsonResponse","$6029874cccb4dfd3$var$fetchDynamicConfigWithRetry","$6029874cccb4dfd3$var$_fetchDynamicConfigWithRetry","_callee1","timeoutMillis","_options","signal","_ctx1","retryData","$6029874cccb4dfd3$var$defaultRetryData","$6029874cccb4dfd3$var$ERROR_FACTORY","getThrottleMetadata","backoffCount","setTimeout","logEvent","abort","setCurrentScreen","_b","backoffMillis","throttleEndTimeMillis","setUserId","httpStatus","calculateBackoffMillis","intervalMillis","setThrottleMetadata","setUserProperties","max","listener","$6029874cccb4dfd3$var$_logEvent$1","gtagFunction","initializationPromise","eventName","eventParams","params","consentSettings","internalSetCurrentScreen","isIndexedDBAvailable","internalSetUserId","errorInfo","internalSetUserProperties","validateIndexedDBOpenable","internalSetAnalyticsCollectionEnabled","internalLogEvent","dynamicConfigPromisesList5","measurementIdToAppId4","dataLayerName4","fidPromise","dynamicConfig","configProperties","dynamicConfigPromise","dataLayer","isArray","window","dataLayerName2","$6029874cccb4dfd3$var$__initializeAnalytics","$db0a627a18027f51$var$app","$6Urw1","initializeApp","authDomain","storageBucket","messagingSenderId","$db0a627a18027f51$var$db","$hbbGa","getFirestore","$db0a627a18027f51$var$colWatchedRef","collection","$db0a627a18027f51$var$colQueueRef","getDocs","snapshot","queue","doc1","id","console","log","watched","doc2","querySelector","addEventListener","preventDefault","target","addDoc","poster_path","$6Iqm0","filmArray","original_title","genres","release_date","getFullYear"],"version":3,"file":"films.58401d52.js.map"}